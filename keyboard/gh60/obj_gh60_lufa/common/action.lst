   1               		.file	"action.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.action_exec,"ax",@progbits
  11               	.global	action_exec
  13               	action_exec:
  14               	.LFB103:
  15               		.file 1 "../../tmk_core/common/action.c"
   1:../../tmk_core/common/action.c **** /*
   2:../../tmk_core/common/action.c **** Copyright 2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/common/action.c **** 
   4:../../tmk_core/common/action.c **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core/common/action.c **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core/common/action.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core/common/action.c **** (at your option) any later version.
   8:../../tmk_core/common/action.c **** 
   9:../../tmk_core/common/action.c **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core/common/action.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core/common/action.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core/common/action.c **** GNU General Public License for more details.
  13:../../tmk_core/common/action.c **** 
  14:../../tmk_core/common/action.c **** You should have received a copy of the GNU General Public License
  15:../../tmk_core/common/action.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core/common/action.c **** */
  17:../../tmk_core/common/action.c **** #include "host.h"
  18:../../tmk_core/common/action.c **** #include "keycode.h"
  19:../../tmk_core/common/action.c **** #include "keyboard.h"
  20:../../tmk_core/common/action.c **** #include "mousekey.h"
  21:../../tmk_core/common/action.c **** #include "command.h"
  22:../../tmk_core/common/action.c **** #include "led.h"
  23:../../tmk_core/common/action.c **** #include "backlight.h"
  24:../../tmk_core/common/action.c **** #include "action_layer.h"
  25:../../tmk_core/common/action.c **** #include "action_tapping.h"
  26:../../tmk_core/common/action.c **** #include "action_macro.h"
  27:../../tmk_core/common/action.c **** #include "action_util.h"
  28:../../tmk_core/common/action.c **** #include "action.h"
  29:../../tmk_core/common/action.c **** 
  30:../../tmk_core/common/action.c **** #ifdef DEBUG_ACTION
  31:../../tmk_core/common/action.c **** #include "debug.h"
  32:../../tmk_core/common/action.c **** #else
  33:../../tmk_core/common/action.c **** #include "nodebug.h"
  34:../../tmk_core/common/action.c **** #endif
  35:../../tmk_core/common/action.c **** 
  36:../../tmk_core/common/action.c **** 
  37:../../tmk_core/common/action.c **** void action_exec(keyevent_t event)
  38:../../tmk_core/common/action.c **** {
  16               		.loc 1 38 0
  17               		.cfi_startproc
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26 0004 CDB7      		in r28,__SP_L__
  27 0006 DEB7      		in r29,__SP_H__
  28               	.LCFI2:
  29               		.cfi_def_cfa_register 28
  30 0008 2B97      		sbiw r28,11
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 15
  33 000a 0FB6      		in __tmp_reg__,__SREG__
  34 000c F894      		cli
  35 000e DEBF      		out __SP_H__,r29
  36 0010 0FBE      		out __SREG__,__tmp_reg__
  37 0012 CDBF      		out __SP_L__,r28
  38               	/* prologue: function */
  39               	/* frame size = 11 */
  40               	/* stack size = 13 */
  41               	.L__stack_usage = 13
  42 0014 4F83      		std Y+7,r20
  43 0016 5887      		std Y+8,r21
  44 0018 6987      		std Y+9,r22
  45 001a 7A87      		std Y+10,r23
  46 001c 8B87      		std Y+11,r24
  47               	.LVL0:
  39:../../tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  40:../../tmk_core/common/action.c ****         dprint("\n---- action_exec: start -----\n");
  41:../../tmk_core/common/action.c ****         dprint("EVENT: "); debug_event(event); dprintln();
  42:../../tmk_core/common/action.c ****     }
  43:../../tmk_core/common/action.c **** 
  44:../../tmk_core/common/action.c ****     keyrecord_t record = { .event = event };
  48               		.loc 1 44 0
  49 001e DE01      		movw r26,r28
  50 0020 1196      		adiw r26,1
  51 0022 86E0      		ldi r24,lo8(6)
  52 0024 FD01      		movw r30,r26
  53               		0:
  54 0026 1192      		st Z+,__zero_reg__
  55 0028 8A95      		dec r24
  56 002a 01F4      		brne 0b
  57 002c 85E0      		ldi r24,lo8(5)
  58 002e FE01      		movw r30,r28
  59 0030 3796      		adiw r30,7
  60               		0:
  61 0032 0190      		ld r0,Z+
  62 0034 0D92      		st X+,r0
  63 0036 8A95      		dec r24
  64 0038 01F4      		brne 0b
  45:../../tmk_core/common/action.c **** 
  46:../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  47:../../tmk_core/common/action.c ****     action_tapping_process(record);
  65               		.loc 1 47 0
  66 003a 4981      		ldd r20,Y+1
  67               	.LVL1:
  68 003c 5A81      		ldd r21,Y+2
  69               	.LVL2:
  70 003e 6B81      		ldd r22,Y+3
  71 0040 7C81      		ldd r23,Y+4
  72 0042 8D81      		ldd r24,Y+5
  73 0044 9E81      		ldd r25,Y+6
  74 0046 0E94 0000 		call action_tapping_process
  75               	.LVL3:
  76               	/* epilogue start */
  48:../../tmk_core/common/action.c **** #else
  49:../../tmk_core/common/action.c ****     process_action(&record);
  50:../../tmk_core/common/action.c ****     if (!IS_NOEVENT(record.event)) {
  51:../../tmk_core/common/action.c ****         dprint("processed: "); debug_record(record); dprintln();
  52:../../tmk_core/common/action.c ****     }
  53:../../tmk_core/common/action.c **** #endif
  54:../../tmk_core/common/action.c **** }
  77               		.loc 1 54 0
  78 004a 2B96      		adiw r28,11
  79 004c 0FB6      		in __tmp_reg__,__SREG__
  80 004e F894      		cli
  81 0050 DEBF      		out __SP_H__,r29
  82 0052 0FBE      		out __SREG__,__tmp_reg__
  83 0054 CDBF      		out __SP_L__,r28
  84 0056 DF91      		pop r29
  85 0058 CF91      		pop r28
  86 005a 0895      		ret
  87               		.cfi_endproc
  88               	.LFE103:
  90               		.section	.text.register_code,"ax",@progbits
  91               	.global	register_code
  93               	register_code:
  94               	.LFB105:
  55:../../tmk_core/common/action.c **** 
  56:../../tmk_core/common/action.c **** void process_action(keyrecord_t *record)
  57:../../tmk_core/common/action.c **** {
  58:../../tmk_core/common/action.c ****     keyevent_t event = record->event;
  59:../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  60:../../tmk_core/common/action.c ****     uint8_t tap_count = record->tap.count;
  61:../../tmk_core/common/action.c **** #endif
  62:../../tmk_core/common/action.c **** 
  63:../../tmk_core/common/action.c ****     if (IS_NOEVENT(event)) { return; }
  64:../../tmk_core/common/action.c **** 
  65:../../tmk_core/common/action.c ****     action_t action = layer_switch_get_action(event.key);
  66:../../tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
  67:../../tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
  68:../../tmk_core/common/action.c ****     dprint(" layer_state: "); layer_debug();
  69:../../tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
  70:../../tmk_core/common/action.c **** #endif
  71:../../tmk_core/common/action.c ****     dprintln();
  72:../../tmk_core/common/action.c **** 
  73:../../tmk_core/common/action.c ****     switch (action.kind.id) {
  74:../../tmk_core/common/action.c ****         /* Key and Mods */
  75:../../tmk_core/common/action.c ****         case ACT_LMODS:
  76:../../tmk_core/common/action.c ****         case ACT_RMODS:
  77:../../tmk_core/common/action.c ****             {
  78:../../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
  79:../../tmk_core/common/action.c ****                                                                 action.key.mods<<4;
  80:../../tmk_core/common/action.c ****                 if (event.pressed) {
  81:../../tmk_core/common/action.c ****                     if (mods) {
  82:../../tmk_core/common/action.c ****                         add_weak_mods(mods);
  83:../../tmk_core/common/action.c ****                         send_keyboard_report();
  84:../../tmk_core/common/action.c ****                     }
  85:../../tmk_core/common/action.c ****                     register_code(action.key.code);
  86:../../tmk_core/common/action.c ****                 } else {
  87:../../tmk_core/common/action.c ****                     unregister_code(action.key.code);
  88:../../tmk_core/common/action.c ****                     if (mods) {
  89:../../tmk_core/common/action.c ****                         del_weak_mods(mods);
  90:../../tmk_core/common/action.c ****                         send_keyboard_report();
  91:../../tmk_core/common/action.c ****                     }
  92:../../tmk_core/common/action.c ****                 }
  93:../../tmk_core/common/action.c ****             }
  94:../../tmk_core/common/action.c ****             break;
  95:../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  96:../../tmk_core/common/action.c ****         case ACT_LMODS_TAP:
  97:../../tmk_core/common/action.c ****         case ACT_RMODS_TAP:
  98:../../tmk_core/common/action.c ****             {
  99:../../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 100:../../tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 101:../../tmk_core/common/action.c ****                 switch (action.layer_tap.code) {
 102:../../tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 103:../../tmk_core/common/action.c ****                     case MODS_ONESHOT:
 104:../../tmk_core/common/action.c ****                         // Oneshot modifier
 105:../../tmk_core/common/action.c ****                         if (event.pressed) {
 106:../../tmk_core/common/action.c ****                             if (tap_count == 0) {
 107:../../tmk_core/common/action.c ****                                 register_mods(mods);
 108:../../tmk_core/common/action.c ****                             }
 109:../../tmk_core/common/action.c ****                             else if (tap_count == 1) {
 110:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 111:../../tmk_core/common/action.c **** 
 112:../../tmk_core/common/action.c **** 								// Jemi&20160118
 113:../../tmk_core/common/action.c ****                                 set_oneshot_mods(mods);
 114:../../tmk_core/common/action.c ****                             }
 115:../../tmk_core/common/action.c ****                             else {
 116:../../tmk_core/common/action.c ****                                 register_mods(mods);
 117:../../tmk_core/common/action.c ****                             }
 118:../../tmk_core/common/action.c ****                         } else {
 119:../../tmk_core/common/action.c ****                             if (tap_count == 0) {
 120:../../tmk_core/common/action.c ****                                 clear_oneshot_mods();
 121:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 122:../../tmk_core/common/action.c ****                             }
 123:../../tmk_core/common/action.c ****                             else if (tap_count == 1) {
 124:../../tmk_core/common/action.c ****                                 // Retain Oneshot mods
 125:../../tmk_core/common/action.c ****                             }
 126:../../tmk_core/common/action.c ****                             else {
 127:../../tmk_core/common/action.c ****                                 clear_oneshot_mods();
 128:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 129:../../tmk_core/common/action.c ****                             }
 130:../../tmk_core/common/action.c ****                         }
 131:../../tmk_core/common/action.c ****                         break;
 132:../../tmk_core/common/action.c ****     #endif
 133:../../tmk_core/common/action.c ****                     case MODS_TAP_TOGGLE:
 134:../../tmk_core/common/action.c ****                         if (event.pressed) {
 135:../../tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 136:../../tmk_core/common/action.c ****                                 register_mods(mods);
 137:../../tmk_core/common/action.c ****                             }
 138:../../tmk_core/common/action.c ****                         } else {
 139:../../tmk_core/common/action.c ****                             if (tap_count < TAPPING_TOGGLE) {
 140:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 141:../../tmk_core/common/action.c ****                             }
 142:../../tmk_core/common/action.c ****                         }
 143:../../tmk_core/common/action.c ****                         break;
 144:../../tmk_core/common/action.c ****                     default:
 145:../../tmk_core/common/action.c ****                         if (event.pressed) {
 146:../../tmk_core/common/action.c ****                             if (tap_count > 0) {
 147:../../tmk_core/common/action.c ****                                 if (record->tap.interrupted) {
 148:../../tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: Cancel: add_mods\n");
 149:../../tmk_core/common/action.c ****                                     // ad hoc: set 0 to cancel tap
 150:../../tmk_core/common/action.c ****                                     record->tap.count = 0;
 151:../../tmk_core/common/action.c ****                                     register_mods(mods);
 152:../../tmk_core/common/action.c ****                                 } else {
 153:../../tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: register_code\n");
 154:../../tmk_core/common/action.c ****                                     register_code(action.key.code);
 155:../../tmk_core/common/action.c ****                                 }
 156:../../tmk_core/common/action.c ****                             } else {
 157:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 158:../../tmk_core/common/action.c ****                                 register_mods(mods);
 159:../../tmk_core/common/action.c ****                             }
 160:../../tmk_core/common/action.c ****                         } else {
 161:../../tmk_core/common/action.c ****                             if (tap_count > 0) {
 162:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 163:../../tmk_core/common/action.c ****                                 unregister_code(action.key.code);
 164:../../tmk_core/common/action.c ****                             } else {
 165:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 166:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 167:../../tmk_core/common/action.c ****                             }
 168:../../tmk_core/common/action.c ****                         }
 169:../../tmk_core/common/action.c ****                         break;
 170:../../tmk_core/common/action.c ****                 }
 171:../../tmk_core/common/action.c ****             }
 172:../../tmk_core/common/action.c ****             break;
 173:../../tmk_core/common/action.c **** #endif
 174:../../tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 175:../../tmk_core/common/action.c ****         /* other HID usage */
 176:../../tmk_core/common/action.c ****         case ACT_USAGE:
 177:../../tmk_core/common/action.c ****             switch (action.usage.page) {
 178:../../tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 179:../../tmk_core/common/action.c ****                     if (event.pressed) {
 180:../../tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 181:../../tmk_core/common/action.c ****                     } else {
 182:../../tmk_core/common/action.c ****                         host_system_send(0);
 183:../../tmk_core/common/action.c ****                     }
 184:../../tmk_core/common/action.c ****                     break;
 185:../../tmk_core/common/action.c ****                 case PAGE_CONSUMER:
 186:../../tmk_core/common/action.c ****                     if (event.pressed) {
 187:../../tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 188:../../tmk_core/common/action.c ****                     } else {
 189:../../tmk_core/common/action.c ****                         host_consumer_send(0);
 190:../../tmk_core/common/action.c ****                     }
 191:../../tmk_core/common/action.c ****                     break;
 192:../../tmk_core/common/action.c ****             }
 193:../../tmk_core/common/action.c ****             break;
 194:../../tmk_core/common/action.c **** #endif
 195:../../tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 196:../../tmk_core/common/action.c ****         /* Mouse key */
 197:../../tmk_core/common/action.c ****         case ACT_MOUSEKEY:
 198:../../tmk_core/common/action.c ****             if (event.pressed) {
 199:../../tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 200:../../tmk_core/common/action.c ****                 mousekey_send();
 201:../../tmk_core/common/action.c ****             } else {
 202:../../tmk_core/common/action.c ****                 mousekey_off(action.key.code);
 203:../../tmk_core/common/action.c ****                 mousekey_send();
 204:../../tmk_core/common/action.c ****             }
 205:../../tmk_core/common/action.c ****             break;
 206:../../tmk_core/common/action.c **** #endif
 207:../../tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 208:../../tmk_core/common/action.c ****         case ACT_LAYER:
 209:../../tmk_core/common/action.c ****             if (action.layer_bitop.on == 0) {
 210:../../tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 211:../../tmk_core/common/action.c ****                 if (!event.pressed) {
 212:../../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 213:../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 214:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 215:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 216:../../tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 217:../../tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 218:../../tmk_core/common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 219:../../tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 220:../../tmk_core/common/action.c ****                     }
 221:../../tmk_core/common/action.c ****                 }
 222:../../tmk_core/common/action.c ****             } else {
 223:../../tmk_core/common/action.c ****                 /* Layer Bitwise Operation */
 224:../../tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 225:../../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 226:../../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 227:../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 228:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 229:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 230:../../tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 231:../../tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 232:../../tmk_core/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 233:../../tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 234:../../tmk_core/common/action.c ****                     }
 235:../../tmk_core/common/action.c ****                 }
 236:../../tmk_core/common/action.c ****             }
 237:../../tmk_core/common/action.c ****             break;
 238:../../tmk_core/common/action.c ****     #ifndef NO_ACTION_TAPPING
 239:../../tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 240:../../tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 241:../../tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 242:../../tmk_core/common/action.c ****                 case 0xe0 ... 0xef:
 243:../../tmk_core/common/action.c ****                     /* layer On/Off with modifiers(left only) */
 244:../../tmk_core/common/action.c ****                     if (event.pressed) {
 245:../../tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 246:../../tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 247:../../tmk_core/common/action.c ****                     } else {
 248:../../tmk_core/common/action.c ****                         layer_off(action.layer_tap.val);
 249:../../tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 250:../../tmk_core/common/action.c ****                     }
 251:../../tmk_core/common/action.c ****                     break;
 252:../../tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 253:../../tmk_core/common/action.c ****                     /* tap toggle */
 254:../../tmk_core/common/action.c ****                     if (event.pressed) {
 255:../../tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 256:../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 257:../../tmk_core/common/action.c ****                         }
 258:../../tmk_core/common/action.c ****                     } else {
 259:../../tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 260:../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 261:../../tmk_core/common/action.c ****                         }
 262:../../tmk_core/common/action.c ****                     }
 263:../../tmk_core/common/action.c ****                     break;
 264:../../tmk_core/common/action.c ****                 case OP_ON_OFF:
 265:../../tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 266:../../tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 267:../../tmk_core/common/action.c ****                     break;
 268:../../tmk_core/common/action.c ****                 case OP_OFF_ON:
 269:../../tmk_core/common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) :
 270:../../tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 271:../../tmk_core/common/action.c ****                     break;
 272:../../tmk_core/common/action.c ****                 case OP_SET_CLEAR:
 273:../../tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 274:../../tmk_core/common/action.c ****                                     layer_clear();
 275:../../tmk_core/common/action.c ****                     break;
 276:../../tmk_core/common/action.c ****                 default:
 277:../../tmk_core/common/action.c ****                     /* tap key */
 278:../../tmk_core/common/action.c ****                     if (event.pressed) {
 279:../../tmk_core/common/action.c ****                         if (tap_count > 0) {
 280:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 281:../../tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 282:../../tmk_core/common/action.c ****                         } else {
 283:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
 284:../../tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 285:../../tmk_core/common/action.c ****                         }
 286:../../tmk_core/common/action.c ****                     } else {
 287:../../tmk_core/common/action.c ****                         if (tap_count > 0) {
 288:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 289:../../tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 290:../../tmk_core/common/action.c ****                         } else {
 291:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
 292:../../tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 293:../../tmk_core/common/action.c ****                         }
 294:../../tmk_core/common/action.c ****                     }
 295:../../tmk_core/common/action.c ****                     break;
 296:../../tmk_core/common/action.c ****             }
 297:../../tmk_core/common/action.c ****             break;
 298:../../tmk_core/common/action.c ****     #endif
 299:../../tmk_core/common/action.c **** #endif
 300:../../tmk_core/common/action.c ****         /* Extentions */
 301:../../tmk_core/common/action.c **** #ifndef NO_ACTION_MACRO
 302:../../tmk_core/common/action.c ****         case ACT_MACRO:
 303:../../tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 304:../../tmk_core/common/action.c ****             break;
 305:../../tmk_core/common/action.c **** #endif
 306:../../tmk_core/common/action.c **** #ifdef BACKLIGHT_ENABLE
 307:../../tmk_core/common/action.c **** 
 308:../../tmk_core/common/action.c **** 		// Jemi&20160114
 309:../../tmk_core/common/action.c ****         case ACT_BACKLIGHT:
 310:../../tmk_core/common/action.c ****             if (!event.pressed) {
 311:../../tmk_core/common/action.c ****                 switch (action.backlight.opt) {
 312:../../tmk_core/common/action.c ****                     case BACKLIGHT_INCREASE:
 313:../../tmk_core/common/action.c ****                         backlight_increase();
 314:../../tmk_core/common/action.c ****                         break;
 315:../../tmk_core/common/action.c ****                     case BACKLIGHT_DECREASE:
 316:../../tmk_core/common/action.c ****                         backlight_decrease();
 317:../../tmk_core/common/action.c ****                         break;
 318:../../tmk_core/common/action.c ****                     case BACKLIGHT_TOGGLE:
 319:../../tmk_core/common/action.c ****                         backlight_toggle();
 320:../../tmk_core/common/action.c ****                         break;
 321:../../tmk_core/common/action.c ****                     case BACKLIGHT_STEP:
 322:../../tmk_core/common/action.c ****                         backlight_step();
 323:../../tmk_core/common/action.c ****                         break;
 324:../../tmk_core/common/action.c ****                     case BACKLIGHT_LEVEL:
 325:../../tmk_core/common/action.c ****                         backlight_level(action.backlight.level);
 326:../../tmk_core/common/action.c ****                         break;
 327:../../tmk_core/common/action.c ****                 }
 328:../../tmk_core/common/action.c ****             }
 329:../../tmk_core/common/action.c ****             break;
 330:../../tmk_core/common/action.c **** #endif
 331:../../tmk_core/common/action.c ****         case ACT_COMMAND:
 332:../../tmk_core/common/action.c ****             break;
 333:../../tmk_core/common/action.c **** #ifndef NO_ACTION_FUNCTION
 334:../../tmk_core/common/action.c ****         case ACT_FUNCTION:
 335:../../tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 336:../../tmk_core/common/action.c ****             break;
 337:../../tmk_core/common/action.c **** #endif
 338:../../tmk_core/common/action.c ****         default:
 339:../../tmk_core/common/action.c ****             break;
 340:../../tmk_core/common/action.c ****     }
 341:../../tmk_core/common/action.c **** }
 342:../../tmk_core/common/action.c **** 
 343:../../tmk_core/common/action.c **** 
 344:../../tmk_core/common/action.c **** 
 345:../../tmk_core/common/action.c **** 
 346:../../tmk_core/common/action.c **** /*
 347:../../tmk_core/common/action.c ****  * Utilities for actions.
 348:../../tmk_core/common/action.c ****  */
 349:../../tmk_core/common/action.c **** void register_code(uint8_t code)
 350:../../tmk_core/common/action.c **** {
  95               		.loc 1 350 0
  96               		.cfi_startproc
  97               	.LVL4:
  98 0000 CF93      		push r28
  99               	.LCFI4:
 100               		.cfi_def_cfa_offset 3
 101               		.cfi_offset 28, -2
 102               	/* prologue: function */
 103               	/* frame size = 0 */
 104               	/* stack size = 1 */
 105               	.L__stack_usage = 1
 351:../../tmk_core/common/action.c ****     if (code == KC_NO) {
 106               		.loc 1 351 0
 107 0002 8823      		tst r24
 108 0004 01F4      		brne .+2
 109 0006 00C0      		rjmp .L2
 110 0008 C82F      		mov r28,r24
 352:../../tmk_core/common/action.c ****         return;
 353:../../tmk_core/common/action.c ****     }
 354:../../tmk_core/common/action.c **** 
 355:../../tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 356:../../tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 111               		.loc 1 356 0
 112 000a 8238      		cpi r24,lo8(-126)
 113 000c 01F4      		brne .L5
 357:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 358:../../tmk_core/common/action.c ****         // Resync: ignore if caps lock already is on
 359:../../tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
 114               		.loc 1 359 0
 115 000e 0E94 0000 		call host_keyboard_leds
 116               	.LVL5:
 117 0012 81FD      		sbrc r24,1
 118 0014 00C0      		rjmp .L2
 360:../../tmk_core/common/action.c **** #endif
 361:../../tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 119               		.loc 1 361 0
 120 0016 89E3      		ldi r24,lo8(57)
 121 0018 0E94 0000 		call add_key
 122               	.LVL6:
 362:../../tmk_core/common/action.c ****         send_keyboard_report();
 123               		.loc 1 362 0
 124 001c 0E94 0000 		call send_keyboard_report
 125               	.LVL7:
 363:../../tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 126               		.loc 1 363 0
 127 0020 89E3      		ldi r24,lo8(57)
 128 0022 00C0      		rjmp .L35
 129               	.LVL8:
 130               	.L5:
 364:../../tmk_core/common/action.c ****         send_keyboard_report();
 365:../../tmk_core/common/action.c ****     }
 366:../../tmk_core/common/action.c **** 
 367:../../tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 131               		.loc 1 367 0
 132 0024 8338      		cpi r24,lo8(-125)
 133 0026 01F4      		brne .L7
 368:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 369:../../tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
 134               		.loc 1 369 0
 135 0028 0E94 0000 		call host_keyboard_leds
 136               	.LVL9:
 137 002c 80FD      		sbrc r24,0
 138 002e 00C0      		rjmp .L2
 370:../../tmk_core/common/action.c **** #endif
 371:../../tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 139               		.loc 1 371 0
 140 0030 83E5      		ldi r24,lo8(83)
 141 0032 0E94 0000 		call add_key
 142               	.LVL10:
 372:../../tmk_core/common/action.c ****         send_keyboard_report();
 143               		.loc 1 372 0
 144 0036 0E94 0000 		call send_keyboard_report
 145               	.LVL11:
 373:../../tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 146               		.loc 1 373 0
 147 003a 83E5      		ldi r24,lo8(83)
 148               	.L35:
 149 003c 0E94 0000 		call del_key
 150               	.LVL12:
 151               	.L36:
 152               	/* epilogue start */
 374:../../tmk_core/common/action.c ****         send_keyboard_report();
 375:../../tmk_core/common/action.c ****     }
 376:../../tmk_core/common/action.c **** 
 377:../../tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 378:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 379:../../tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
 380:../../tmk_core/common/action.c **** #endif
 381:../../tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 382:../../tmk_core/common/action.c ****         send_keyboard_report();
 383:../../tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 384:../../tmk_core/common/action.c ****         send_keyboard_report();
 385:../../tmk_core/common/action.c ****     }
 386:../../tmk_core/common/action.c **** #endif
 387:../../tmk_core/common/action.c **** 
 388:../../tmk_core/common/action.c ****     else if IS_KEY(code) {
 389:../../tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 390:../../tmk_core/common/action.c ****         if (command_proc(code)) return;
 391:../../tmk_core/common/action.c **** 
 392:../../tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 393:../../tmk_core/common/action.c **** /* TODO: remove
 394:../../tmk_core/common/action.c ****         if (oneshot_state.mods && !oneshot_state.disabled) {
 395:../../tmk_core/common/action.c ****             uint8_t tmp_mods = get_mods();
 396:../../tmk_core/common/action.c ****             add_mods(oneshot_state.mods);
 397:../../tmk_core/common/action.c **** 
 398:../../tmk_core/common/action.c ****             add_key(code);
 399:../../tmk_core/common/action.c ****             send_keyboard_report();
 400:../../tmk_core/common/action.c **** 
 401:../../tmk_core/common/action.c ****             set_mods(tmp_mods);
 402:../../tmk_core/common/action.c ****             send_keyboard_report();
 403:../../tmk_core/common/action.c ****             oneshot_cancel();
 404:../../tmk_core/common/action.c ****         } else 
 405:../../tmk_core/common/action.c **** */
 406:../../tmk_core/common/action.c **** #endif
 407:../../tmk_core/common/action.c ****         {
 408:../../tmk_core/common/action.c ****         	// Jemi&20160118
 409:../../tmk_core/common/action.c ****             add_key(code);
 410:../../tmk_core/common/action.c ****             send_keyboard_report();
 411:../../tmk_core/common/action.c ****         }
 412:../../tmk_core/common/action.c ****     }
 413:../../tmk_core/common/action.c ****     else if IS_MOD(code) {
 414:../../tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 415:../../tmk_core/common/action.c ****         send_keyboard_report();
 416:../../tmk_core/common/action.c ****     }
 417:../../tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 418:../../tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 419:../../tmk_core/common/action.c ****     }
 420:../../tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 421:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 422:../../tmk_core/common/action.c ****     }
 423:../../tmk_core/common/action.c **** }
 153               		.loc 1 423 0
 154 0040 CF91      		pop r28
 374:../../tmk_core/common/action.c ****         send_keyboard_report();
 155               		.loc 1 374 0
 156 0042 0C94 0000 		jmp send_keyboard_report
 157               	.LVL13:
 158               	.L7:
 377:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 159               		.loc 1 377 0
 160 0046 8438      		cpi r24,lo8(-124)
 161 0048 01F4      		brne .L8
 379:../../tmk_core/common/action.c **** #endif
 162               		.loc 1 379 0
 163 004a 0E94 0000 		call host_keyboard_leds
 164               	.LVL14:
 165 004e 82FD      		sbrc r24,2
 166 0050 00C0      		rjmp .L2
 381:../../tmk_core/common/action.c ****         send_keyboard_report();
 167               		.loc 1 381 0
 168 0052 87E4      		ldi r24,lo8(71)
 169 0054 0E94 0000 		call add_key
 170               	.LVL15:
 382:../../tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 171               		.loc 1 382 0
 172 0058 0E94 0000 		call send_keyboard_report
 173               	.LVL16:
 383:../../tmk_core/common/action.c ****         send_keyboard_report();
 174               		.loc 1 383 0
 175 005c 87E4      		ldi r24,lo8(71)
 176 005e 00C0      		rjmp .L35
 177               	.LVL17:
 178               	.L8:
 388:../../tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 179               		.loc 1 388 0
 180 0060 8CEF      		ldi r24,lo8(-4)
 181               	.LVL18:
 182 0062 8C0F      		add r24,r28
 183 0064 813A      		cpi r24,lo8(-95)
 184 0066 00F4      		brsh .L9
 390:../../tmk_core/common/action.c **** 
 185               		.loc 1 390 0
 186 0068 8C2F      		mov r24,r28
 187 006a 0E94 0000 		call command_proc
 188               	.LVL19:
 189 006e 8111      		cpse r24,__zero_reg__
 190 0070 00C0      		rjmp .L2
 409:../../tmk_core/common/action.c ****             send_keyboard_report();
 191               		.loc 1 409 0
 192 0072 8C2F      		mov r24,r28
 193 0074 0E94 0000 		call add_key
 194               	.LVL20:
 195 0078 00C0      		rjmp .L36
 196               	.L9:
 413:../../tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 197               		.loc 1 413 0
 198 007a 80E2      		ldi r24,lo8(32)
 199 007c 8C0F      		add r24,r28
 200 007e 8830      		cpi r24,lo8(8)
 201 0080 00F4      		brsh .L10
 414:../../tmk_core/common/action.c ****         send_keyboard_report();
 202               		.loc 1 414 0
 203 0082 C770      		andi r28,lo8(7)
 204               	.LVL21:
 205 0084 81E0      		ldi r24,lo8(1)
 206 0086 00C0      		rjmp 2f
 207               		1:
 208 0088 880F      		lsl r24
 209               		2:
 210 008a CA95      		dec r28
 211 008c 02F4      		brpl 1b
 212 008e 0E94 0000 		call add_mods
 213               	.LVL22:
 214 0092 00C0      		rjmp .L36
 215               	.LVL23:
 216               	.L10:
 417:../../tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 217               		.loc 1 417 0
 218 0094 8BE5      		ldi r24,lo8(91)
 219 0096 8C0F      		add r24,r28
 220 0098 8330      		cpi r24,lo8(3)
 221 009a 00F4      		brsh .L11
 418:../../tmk_core/common/action.c ****     }
 222               		.loc 1 418 0
 223 009c C53A      		cpi r28,lo8(-91)
 224 009e 01F0      		breq .L14
 418:../../tmk_core/common/action.c ****     }
 225               		.loc 1 418 0 is_stmt 0 discriminator 1
 226 00a0 C63A      		cpi r28,lo8(-90)
 227 00a2 01F0      		breq .L15
 418:../../tmk_core/common/action.c ****     }
 228               		.loc 1 418 0
 229 00a4 83E8      		ldi r24,lo8(-125)
 230 00a6 90E0      		ldi r25,0
 231 00a8 00C0      		rjmp .L12
 232               	.L14:
 233 00aa 81E8      		ldi r24,lo8(-127)
 234 00ac 90E0      		ldi r25,0
 235 00ae 00C0      		rjmp .L12
 236               	.L15:
 237 00b0 82E8      		ldi r24,lo8(-126)
 238 00b2 90E0      		ldi r25,0
 239               	.L12:
 240               	/* epilogue start */
 241               		.loc 1 423 0 is_stmt 1 discriminator 12
 242 00b4 CF91      		pop r28
 243               	.LVL24:
 418:../../tmk_core/common/action.c ****     }
 244               		.loc 1 418 0 discriminator 12
 245 00b6 0C94 0000 		jmp host_system_send
 246               	.LVL25:
 247               	.L11:
 420:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 248               		.loc 1 420 0
 249 00ba 88E5      		ldi r24,lo8(88)
 250 00bc 8C0F      		add r24,r28
 251 00be 8331      		cpi r24,lo8(19)
 252 00c0 00F0      		brlo .+2
 253 00c2 00C0      		rjmp .L2
 421:../../tmk_core/common/action.c ****     }
 254               		.loc 1 421 0
 255 00c4 C83A      		cpi r28,lo8(-88)
 256 00c6 01F0      		breq .L16
 421:../../tmk_core/common/action.c ****     }
 257               		.loc 1 421 0 is_stmt 0 discriminator 1
 258 00c8 C93A      		cpi r28,lo8(-87)
 259 00ca 01F0      		breq .L17
 421:../../tmk_core/common/action.c ****     }
 260               		.loc 1 421 0 discriminator 3
 261 00cc CA3A      		cpi r28,lo8(-86)
 262 00ce 01F0      		breq .L18
 421:../../tmk_core/common/action.c ****     }
 263               		.loc 1 421 0 discriminator 5
 264 00d0 CB3A      		cpi r28,lo8(-85)
 265 00d2 01F0      		breq .L19
 421:../../tmk_core/common/action.c ****     }
 266               		.loc 1 421 0 discriminator 7
 267 00d4 CC3A      		cpi r28,lo8(-84)
 268 00d6 01F0      		breq .L20
 421:../../tmk_core/common/action.c ****     }
 269               		.loc 1 421 0 discriminator 13
 270 00d8 CD3A      		cpi r28,lo8(-83)
 271 00da 01F0      		breq .L21
 421:../../tmk_core/common/action.c ****     }
 272               		.loc 1 421 0 discriminator 15
 273 00dc C03B      		cpi r28,lo8(-80)
 274 00de 01F0      		breq .L22
 421:../../tmk_core/common/action.c ****     }
 275               		.loc 1 421 0 discriminator 17
 276 00e0 CE3A      		cpi r28,lo8(-82)
 277 00e2 01F0      		breq .L23
 421:../../tmk_core/common/action.c ****     }
 278               		.loc 1 421 0 discriminator 19
 279 00e4 CF3A      		cpi r28,lo8(-81)
 280 00e6 01F0      		breq .L24
 421:../../tmk_core/common/action.c ****     }
 281               		.loc 1 421 0 discriminator 21
 282 00e8 C13B      		cpi r28,lo8(-79)
 283 00ea 01F0      		breq .L25
 421:../../tmk_core/common/action.c ****     }
 284               		.loc 1 421 0 discriminator 23
 285 00ec C23B      		cpi r28,lo8(-78)
 286 00ee 01F0      		breq .L26
 421:../../tmk_core/common/action.c ****     }
 287               		.loc 1 421 0 discriminator 25
 288 00f0 C33B      		cpi r28,lo8(-77)
 289 00f2 01F0      		breq .L27
 421:../../tmk_core/common/action.c ****     }
 290               		.loc 1 421 0 discriminator 27
 291 00f4 C43B      		cpi r28,lo8(-76)
 292 00f6 01F0      		breq .L28
 421:../../tmk_core/common/action.c ****     }
 293               		.loc 1 421 0 discriminator 29
 294 00f8 C53B      		cpi r28,lo8(-75)
 295 00fa 01F0      		breq .L29
 421:../../tmk_core/common/action.c ****     }
 296               		.loc 1 421 0 discriminator 31
 297 00fc C63B      		cpi r28,lo8(-74)
 298 00fe 01F0      		breq .L30
 421:../../tmk_core/common/action.c ****     }
 299               		.loc 1 421 0 discriminator 33
 300 0100 C73B      		cpi r28,lo8(-73)
 301 0102 01F0      		breq .L31
 421:../../tmk_core/common/action.c ****     }
 302               		.loc 1 421 0 discriminator 35
 303 0104 C83B      		cpi r28,lo8(-72)
 304 0106 01F0      		breq .L32
 421:../../tmk_core/common/action.c ****     }
 305               		.loc 1 421 0 discriminator 37
 306 0108 C93B      		cpi r28,lo8(-71)
 307 010a 01F0      		breq .L33
 421:../../tmk_core/common/action.c ****     }
 308               		.loc 1 421 0 discriminator 39
 309 010c CA3B      		cpi r28,lo8(-70)
 310 010e 01F0      		breq .L34
 421:../../tmk_core/common/action.c ****     }
 311               		.loc 1 421 0
 312 0110 80E0      		ldi r24,0
 313 0112 90E0      		ldi r25,0
 314 0114 00C0      		rjmp .L13
 315               	.L16:
 316 0116 82EE      		ldi r24,lo8(-30)
 317 0118 90E0      		ldi r25,0
 318 011a 00C0      		rjmp .L13
 319               	.L17:
 320 011c 89EE      		ldi r24,lo8(-23)
 321 011e 90E0      		ldi r25,0
 322 0120 00C0      		rjmp .L13
 323               	.L18:
 324 0122 8AEE      		ldi r24,lo8(-22)
 325 0124 90E0      		ldi r25,0
 326 0126 00C0      		rjmp .L13
 327               	.L19:
 328 0128 85EB      		ldi r24,lo8(-75)
 329 012a 90E0      		ldi r25,0
 330 012c 00C0      		rjmp .L13
 331               	.L20:
 332 012e 86EB      		ldi r24,lo8(-74)
 333 0130 90E0      		ldi r25,0
 334 0132 00C0      		rjmp .L13
 335               	.L21:
 336 0134 87EB      		ldi r24,lo8(-73)
 337 0136 90E0      		ldi r25,0
 338 0138 00C0      		rjmp .L13
 339               	.L22:
 340 013a 8CEC      		ldi r24,lo8(-52)
 341 013c 90E0      		ldi r25,0
 342 013e 00C0      		rjmp .L13
 343               	.L23:
 344 0140 8DEC      		ldi r24,lo8(-51)
 345 0142 90E0      		ldi r25,0
 346 0144 00C0      		rjmp .L13
 347               	.L24:
 348 0146 83E8      		ldi r24,lo8(-125)
 349 0148 91E0      		ldi r25,lo8(1)
 350 014a 00C0      		rjmp .L13
 351               	.L25:
 352 014c 8AE8      		ldi r24,lo8(-118)
 353 014e 91E0      		ldi r25,lo8(1)
 354 0150 00C0      		rjmp .L13
 355               	.L26:
 356 0152 82E9      		ldi r24,lo8(-110)
 357 0154 91E0      		ldi r25,lo8(1)
 358 0156 00C0      		rjmp .L13
 359               	.L27:
 360 0158 84E9      		ldi r24,lo8(-108)
 361 015a 91E0      		ldi r25,lo8(1)
 362 015c 00C0      		rjmp .L13
 363               	.L28:
 364 015e 81E2      		ldi r24,lo8(33)
 365 0160 92E0      		ldi r25,lo8(2)
 366 0162 00C0      		rjmp .L13
 367               	.L29:
 368 0164 83E2      		ldi r24,lo8(35)
 369 0166 92E0      		ldi r25,lo8(2)
 370 0168 00C0      		rjmp .L13
 371               	.L30:
 372 016a 84E2      		ldi r24,lo8(36)
 373 016c 92E0      		ldi r25,lo8(2)
 374 016e 00C0      		rjmp .L13
 375               	.L31:
 376 0170 85E2      		ldi r24,lo8(37)
 377 0172 92E0      		ldi r25,lo8(2)
 378 0174 00C0      		rjmp .L13
 379               	.L32:
 380 0176 86E2      		ldi r24,lo8(38)
 381 0178 92E0      		ldi r25,lo8(2)
 382 017a 00C0      		rjmp .L13
 383               	.L33:
 384 017c 87E2      		ldi r24,lo8(39)
 385 017e 92E0      		ldi r25,lo8(2)
 386 0180 00C0      		rjmp .L13
 387               	.L34:
 388 0182 8AE2      		ldi r24,lo8(42)
 389 0184 92E0      		ldi r25,lo8(2)
 390               	.L13:
 391               	/* epilogue start */
 392               		.loc 1 423 0 is_stmt 1 discriminator 84
 393 0186 CF91      		pop r28
 394               	.LVL26:
 421:../../tmk_core/common/action.c ****     }
 395               		.loc 1 421 0 discriminator 84
 396 0188 0C94 0000 		jmp host_consumer_send
 397               	.LVL27:
 398               	.L2:
 399               	/* epilogue start */
 400               		.loc 1 423 0
 401 018c CF91      		pop r28
 402 018e 0895      		ret
 403               		.cfi_endproc
 404               	.LFE105:
 406               		.section	.text.unregister_code,"ax",@progbits
 407               	.global	unregister_code
 409               	unregister_code:
 410               	.LFB106:
 424:../../tmk_core/common/action.c **** 
 425:../../tmk_core/common/action.c **** void unregister_code(uint8_t code)
 426:../../tmk_core/common/action.c **** {
 411               		.loc 1 426 0
 412               		.cfi_startproc
 413               	.LVL28:
 414               	/* prologue: function */
 415               	/* frame size = 0 */
 416               	/* stack size = 0 */
 417               	.L__stack_usage = 0
 427:../../tmk_core/common/action.c ****     if (code == KC_NO) {
 418               		.loc 1 427 0
 419 0000 8823      		tst r24
 420 0002 01F4      		brne .+2
 421 0004 00C0      		rjmp .L38
 428:../../tmk_core/common/action.c ****         return;
 429:../../tmk_core/common/action.c ****     }
 430:../../tmk_core/common/action.c **** 
 431:../../tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 432:../../tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 422               		.loc 1 432 0
 423 0006 8238      		cpi r24,lo8(-126)
 424 0008 01F4      		brne .L41
 433:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 434:../../tmk_core/common/action.c ****         // Resync: ignore if caps lock already is off
 435:../../tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
 425               		.loc 1 435 0
 426 000a 0E94 0000 		call host_keyboard_leds
 427               	.LVL29:
 428 000e 81FF      		sbrs r24,1
 429 0010 00C0      		rjmp .L38
 436:../../tmk_core/common/action.c **** #endif
 437:../../tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 430               		.loc 1 437 0
 431 0012 89E3      		ldi r24,lo8(57)
 432 0014 0E94 0000 		call add_key
 433               	.LVL30:
 438:../../tmk_core/common/action.c ****         send_keyboard_report();
 434               		.loc 1 438 0
 435 0018 0E94 0000 		call send_keyboard_report
 436               	.LVL31:
 439:../../tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 437               		.loc 1 439 0
 438 001c 89E3      		ldi r24,lo8(57)
 439 001e 00C0      		rjmp .L57
 440               	.LVL32:
 441               	.L41:
 440:../../tmk_core/common/action.c ****         send_keyboard_report();
 441:../../tmk_core/common/action.c ****     }
 442:../../tmk_core/common/action.c **** 
 443:../../tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 442               		.loc 1 443 0
 443 0020 8338      		cpi r24,lo8(-125)
 444 0022 01F4      		brne .L43
 444:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 445:../../tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
 445               		.loc 1 445 0
 446 0024 0E94 0000 		call host_keyboard_leds
 447               	.LVL33:
 448 0028 80FF      		sbrs r24,0
 449 002a 00C0      		rjmp .L38
 446:../../tmk_core/common/action.c **** #endif
 447:../../tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 450               		.loc 1 447 0
 451 002c 83E5      		ldi r24,lo8(83)
 452 002e 0E94 0000 		call add_key
 453               	.LVL34:
 448:../../tmk_core/common/action.c ****         send_keyboard_report();
 454               		.loc 1 448 0
 455 0032 0E94 0000 		call send_keyboard_report
 456               	.LVL35:
 449:../../tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 457               		.loc 1 449 0
 458 0036 83E5      		ldi r24,lo8(83)
 459               	.L57:
 460 0038 0E94 0000 		call del_key
 461               	.LVL36:
 462               	.L58:
 450:../../tmk_core/common/action.c ****         send_keyboard_report();
 463               		.loc 1 450 0
 464 003c 0C94 0000 		jmp send_keyboard_report
 465               	.LVL37:
 466               	.L43:
 451:../../tmk_core/common/action.c ****     }
 452:../../tmk_core/common/action.c **** 
 453:../../tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 467               		.loc 1 453 0
 468 0040 8438      		cpi r24,lo8(-124)
 469 0042 01F4      		brne .L44
 454:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 455:../../tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
 470               		.loc 1 455 0
 471 0044 0E94 0000 		call host_keyboard_leds
 472               	.LVL38:
 473 0048 82FF      		sbrs r24,2
 474 004a 00C0      		rjmp .L38
 456:../../tmk_core/common/action.c **** #endif
 457:../../tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 475               		.loc 1 457 0
 476 004c 87E4      		ldi r24,lo8(71)
 477 004e 0E94 0000 		call add_key
 478               	.LVL39:
 458:../../tmk_core/common/action.c ****         send_keyboard_report();
 479               		.loc 1 458 0
 480 0052 0E94 0000 		call send_keyboard_report
 481               	.LVL40:
 459:../../tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 482               		.loc 1 459 0
 483 0056 87E4      		ldi r24,lo8(71)
 484 0058 00C0      		rjmp .L57
 485               	.LVL41:
 486               	.L44:
 460:../../tmk_core/common/action.c ****         send_keyboard_report();
 461:../../tmk_core/common/action.c ****     }
 462:../../tmk_core/common/action.c **** #endif
 463:../../tmk_core/common/action.c **** 
 464:../../tmk_core/common/action.c ****     else if IS_KEY(code) {
 487               		.loc 1 464 0
 488 005a 9CEF      		ldi r25,lo8(-4)
 489 005c 980F      		add r25,r24
 490 005e 913A      		cpi r25,lo8(-95)
 491 0060 00F0      		brlo .L57
 465:../../tmk_core/common/action.c ****         del_key(code);
 466:../../tmk_core/common/action.c ****         send_keyboard_report();
 467:../../tmk_core/common/action.c ****     }
 468:../../tmk_core/common/action.c ****     else if IS_MOD(code) {
 492               		.loc 1 468 0
 493 0062 90E2      		ldi r25,lo8(32)
 494 0064 980F      		add r25,r24
 495 0066 9830      		cpi r25,lo8(8)
 496 0068 00F4      		brsh .L46
 469:../../tmk_core/common/action.c ****         del_mods(MOD_BIT(code));
 497               		.loc 1 469 0
 498 006a 8770      		andi r24,lo8(7)
 499               	.LVL42:
 500 006c 91E0      		ldi r25,lo8(1)
 501 006e 00C0      		rjmp 2f
 502               		1:
 503 0070 990F      		lsl r25
 504               		2:
 505 0072 8A95      		dec r24
 506 0074 02F4      		brpl 1b
 507 0076 892F      		mov r24,r25
 508 0078 0E94 0000 		call del_mods
 509               	.LVL43:
 510 007c 00C0      		rjmp .L58
 511               	.LVL44:
 512               	.L46:
 470:../../tmk_core/common/action.c ****         send_keyboard_report();
 471:../../tmk_core/common/action.c ****     }
 472:../../tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 513               		.loc 1 472 0
 514 007e 9BE5      		ldi r25,lo8(91)
 515 0080 980F      		add r25,r24
 516 0082 9330      		cpi r25,lo8(3)
 517 0084 00F4      		brsh .L47
 473:../../tmk_core/common/action.c ****         host_system_send(0);
 518               		.loc 1 473 0
 519 0086 80E0      		ldi r24,0
 520 0088 90E0      		ldi r25,0
 521               	.LVL45:
 522 008a 0C94 0000 		jmp host_system_send
 523               	.LVL46:
 524               	.L47:
 474:../../tmk_core/common/action.c ****     }
 475:../../tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 525               		.loc 1 475 0
 526 008e 885A      		subi r24,lo8(-(88))
 527               	.LVL47:
 528 0090 8331      		cpi r24,lo8(19)
 529 0092 00F4      		brsh .L38
 476:../../tmk_core/common/action.c ****         host_consumer_send(0);
 530               		.loc 1 476 0
 531 0094 80E0      		ldi r24,0
 532 0096 90E0      		ldi r25,0
 533               	.LVL48:
 534 0098 0C94 0000 		jmp host_consumer_send
 535               	.LVL49:
 536               	.L38:
 537 009c 0895      		ret
 538               		.cfi_endproc
 539               	.LFE106:
 541               		.section	.text.register_mods,"ax",@progbits
 542               	.global	register_mods
 544               	register_mods:
 545               	.LFB107:
 477:../../tmk_core/common/action.c ****     }
 478:../../tmk_core/common/action.c **** }
 479:../../tmk_core/common/action.c **** 
 480:../../tmk_core/common/action.c **** void register_mods(uint8_t mods)
 481:../../tmk_core/common/action.c **** {
 546               		.loc 1 481 0
 547               		.cfi_startproc
 548               	.LVL50:
 549               	/* prologue: function */
 550               	/* frame size = 0 */
 551               	/* stack size = 0 */
 552               	.L__stack_usage = 0
 482:../../tmk_core/common/action.c ****     if (mods) {
 553               		.loc 1 482 0
 554 0000 8823      		tst r24
 555 0002 01F0      		breq .L59
 483:../../tmk_core/common/action.c ****         add_mods(mods);
 556               		.loc 1 483 0
 557 0004 0E94 0000 		call add_mods
 558               	.LVL51:
 484:../../tmk_core/common/action.c ****         send_keyboard_report();
 559               		.loc 1 484 0
 560 0008 0C94 0000 		jmp send_keyboard_report
 561               	.LVL52:
 562               	.L59:
 563 000c 0895      		ret
 564               		.cfi_endproc
 565               	.LFE107:
 567               		.section	.text.unregister_mods,"ax",@progbits
 568               	.global	unregister_mods
 570               	unregister_mods:
 571               	.LFB108:
 485:../../tmk_core/common/action.c ****     }
 486:../../tmk_core/common/action.c **** }
 487:../../tmk_core/common/action.c **** 
 488:../../tmk_core/common/action.c **** void unregister_mods(uint8_t mods)
 489:../../tmk_core/common/action.c **** {
 572               		.loc 1 489 0
 573               		.cfi_startproc
 574               	.LVL53:
 575               	/* prologue: function */
 576               	/* frame size = 0 */
 577               	/* stack size = 0 */
 578               	.L__stack_usage = 0
 490:../../tmk_core/common/action.c ****     if (mods) {
 579               		.loc 1 490 0
 580 0000 8823      		tst r24
 581 0002 01F0      		breq .L61
 491:../../tmk_core/common/action.c ****         del_mods(mods);
 582               		.loc 1 491 0
 583 0004 0E94 0000 		call del_mods
 584               	.LVL54:
 492:../../tmk_core/common/action.c ****         send_keyboard_report();
 585               		.loc 1 492 0
 586 0008 0C94 0000 		jmp send_keyboard_report
 587               	.LVL55:
 588               	.L61:
 589 000c 0895      		ret
 590               		.cfi_endproc
 591               	.LFE108:
 593               		.section	.text.process_action,"ax",@progbits
 594               	.global	process_action
 596               	process_action:
 597               	.LFB104:
  57:../../tmk_core/common/action.c ****     keyevent_t event = record->event;
 598               		.loc 1 57 0
 599               		.cfi_startproc
 600               	.LVL56:
 601 0000 BF92      		push r11
 602               	.LCFI5:
 603               		.cfi_def_cfa_offset 3
 604               		.cfi_offset 11, -2
 605 0002 CF92      		push r12
 606               	.LCFI6:
 607               		.cfi_def_cfa_offset 4
 608               		.cfi_offset 12, -3
 609 0004 DF92      		push r13
 610               	.LCFI7:
 611               		.cfi_def_cfa_offset 5
 612               		.cfi_offset 13, -4
 613 0006 EF92      		push r14
 614               	.LCFI8:
 615               		.cfi_def_cfa_offset 6
 616               		.cfi_offset 14, -5
 617 0008 FF92      		push r15
 618               	.LCFI9:
 619               		.cfi_def_cfa_offset 7
 620               		.cfi_offset 15, -6
 621 000a 0F93      		push r16
 622               	.LCFI10:
 623               		.cfi_def_cfa_offset 8
 624               		.cfi_offset 16, -7
 625 000c 1F93      		push r17
 626               	.LCFI11:
 627               		.cfi_def_cfa_offset 9
 628               		.cfi_offset 17, -8
 629 000e CF93      		push r28
 630               	.LCFI12:
 631               		.cfi_def_cfa_offset 10
 632               		.cfi_offset 28, -9
 633 0010 DF93      		push r29
 634               	.LCFI13:
 635               		.cfi_def_cfa_offset 11
 636               		.cfi_offset 29, -10
 637 0012 00D0      		rcall .
 638 0014 00D0      		rcall .
 639 0016 00D0      		rcall .
 640               	.LCFI14:
 641               		.cfi_def_cfa_offset 17
 642 0018 CDB7      		in r28,__SP_L__
 643 001a DEB7      		in r29,__SP_H__
 644               	.LCFI15:
 645               		.cfi_def_cfa_register 28
 646               	/* prologue: function */
 647               	/* frame size = 6 */
 648               	/* stack size = 15 */
 649               	.L__stack_usage = 15
  58:../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 650               		.loc 1 58 0
 651 001c 25E0      		ldi r18,lo8(5)
 652 001e FC01      		movw r30,r24
 653 0020 DE01      		movw r26,r28
 654 0022 1196      		adiw r26,1
 655               		0:
 656 0024 0190      		ld r0,Z+
 657 0026 0D92      		st X+,r0
 658 0028 2A95      		dec r18
 659 002a 01F4      		brne 0b
 660 002c FC01      		movw r30,r24
 661 002e 4081      		ld r20,Z
 662               	.LVL57:
 663 0030 3181      		ldd r19,Z+1
 664               	.LVL58:
 665 0032 0281      		ldd r16,Z+2
 666               	.LVL59:
  60:../../tmk_core/common/action.c **** #endif
 667               		.loc 1 60 0
 668 0034 2581      		ldd r18,Z+5
 669 0036 2295      		swap r18
 670 0038 2F70      		andi r18,lo8(15)
 671               	.LVL60:
 672               	.LBB8:
 673               	.LBB9:
 674               		.file 2 "../../tmk_core/common/keyboard.h"
   1:../../tmk_core/common/keyboard.h **** /*
   2:../../tmk_core/common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/common/keyboard.h **** 
   4:../../tmk_core/common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core/common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core/common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core/common/keyboard.h **** (at your option) any later version.
   8:../../tmk_core/common/keyboard.h **** 
   9:../../tmk_core/common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core/common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core/common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core/common/keyboard.h **** GNU General Public License for more details.
  13:../../tmk_core/common/keyboard.h **** 
  14:../../tmk_core/common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:../../tmk_core/common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core/common/keyboard.h **** */
  17:../../tmk_core/common/keyboard.h **** 
  18:../../tmk_core/common/keyboard.h **** #ifndef KEYBOARD_H
  19:../../tmk_core/common/keyboard.h **** #define KEYBOARD_H
  20:../../tmk_core/common/keyboard.h **** 
  21:../../tmk_core/common/keyboard.h **** #include <stdbool.h>
  22:../../tmk_core/common/keyboard.h **** #include <stdint.h>
  23:../../tmk_core/common/keyboard.h **** 
  24:../../tmk_core/common/keyboard.h **** 
  25:../../tmk_core/common/keyboard.h **** #ifdef __cplusplus
  26:../../tmk_core/common/keyboard.h **** extern "C" {
  27:../../tmk_core/common/keyboard.h **** #endif
  28:../../tmk_core/common/keyboard.h **** 
  29:../../tmk_core/common/keyboard.h **** /* key matrix position */
  30:../../tmk_core/common/keyboard.h **** typedef struct {
  31:../../tmk_core/common/keyboard.h ****     uint8_t col;
  32:../../tmk_core/common/keyboard.h ****     uint8_t row;
  33:../../tmk_core/common/keyboard.h **** } keypos_t;
  34:../../tmk_core/common/keyboard.h **** 
  35:../../tmk_core/common/keyboard.h **** /* key event */
  36:../../tmk_core/common/keyboard.h **** typedef struct {
  37:../../tmk_core/common/keyboard.h ****     keypos_t key;
  38:../../tmk_core/common/keyboard.h ****     bool     pressed;
  39:../../tmk_core/common/keyboard.h ****     uint16_t time;
  40:../../tmk_core/common/keyboard.h **** } keyevent_t;
  41:../../tmk_core/common/keyboard.h **** 
  42:../../tmk_core/common/keyboard.h **** /* equivalent test of keypos_t */
  43:../../tmk_core/common/keyboard.h **** #define KEYEQ(keya, keyb)       ((keya).row == (keyb).row && (keya).col == (keyb).col)
  44:../../tmk_core/common/keyboard.h **** 
  45:../../tmk_core/common/keyboard.h **** /* Rules for No Event:
  46:../../tmk_core/common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  47:../../tmk_core/common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  48:../../tmk_core/common/keyboard.h ****  */
  49:../../tmk_core/common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
 675               		.loc 2 49 0
 676 003a 6381      		ldd r22,Z+3
 677 003c 7481      		ldd r23,Z+4
 678 003e 672B      		or r22,r23
 679 0040 01F4      		brne .+2
 680 0042 00C0      		rjmp .L63
 681 0044 3F3F      		cpi r19,lo8(-1)
 682 0046 01F4      		brne .L65
 683               	.LBE9:
 684               	.LBE8:
  63:../../tmk_core/common/action.c **** 
 685               		.loc 1 63 0
 686 0048 4F3F      		cpi r20,lo8(-1)
 687 004a 01F4      		brne .+2
 688 004c 00C0      		rjmp .L63
 689               	.L65:
 690 004e 7C01      		movw r14,r24
  65:../../tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 691               		.loc 1 65 0
 692 0050 4983      		std Y+1,r20
 693 0052 3A83      		std Y+2,r19
 694 0054 8981      		ldd r24,Y+1
 695 0056 9A81      		ldd r25,Y+2
 696               	.LVL61:
 697 0058 2E83      		std Y+6,r18
 698 005a 0E94 0000 		call layer_switch_get_action
 699               	.LVL62:
 700 005e 182F      		mov r17,r24
 701               	.LVL63:
 702 0060 B92E      		mov r11,r25
  68:../../tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 703               		.loc 1 68 0
 704 0062 0E94 0000 		call layer_debug
 705               	.LVL64:
  69:../../tmk_core/common/action.c **** #endif
 706               		.loc 1 69 0
 707 0066 0E94 0000 		call default_layer_debug
 708               	.LVL65:
  73:../../tmk_core/common/action.c ****         /* Key and Mods */
 709               		.loc 1 73 0
 710 006a EB2D      		mov r30,r11
 711 006c E295      		swap r30
 712 006e EF70      		andi r30,lo8(15)
 713 0070 F0E0      		ldi r31,0
 714 0072 E050      		subi r30,lo8(-(gs(.L68)))
 715 0074 F040      		sbci r31,hi8(-(gs(.L68)))
 716 0076 2E81      		ldd r18,Y+6
 717 0078 0C94 0000 		jmp __tablejump2__
 718               		.section	.progmem.gcc_sw_table.process_action,"a",@progbits
 719               		.p2align	1
 720               	.L68:
 721 0000 0000      		.word gs(.L67)
 722 0002 0000      		.word gs(.L67)
 723 0004 0000      		.word gs(.L69)
 724 0006 0000      		.word gs(.L69)
 725 0008 0000      		.word gs(.L70)
 726 000a 0000      		.word gs(.L71)
 727 000c 0000      		.word gs(.L63)
 728 000e 0000      		.word gs(.L63)
 729 0010 0000      		.word gs(.L72)
 730 0012 0000      		.word gs(.L63)
 731 0014 0000      		.word gs(.L73)
 732 0016 0000      		.word gs(.L73)
 733 0018 0000      		.word gs(.L74)
 734 001a 0000      		.word gs(.L63)
 735 001c 0000      		.word gs(.L63)
 736 001e 0000      		.word gs(.L75)
 737               		.section	.text.process_action
 738               	.L67:
 739               	.LBB10:
  78:../../tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 740               		.loc 1 78 0
 741 007c 8B2D      		mov r24,r11
 742 007e 807F      		andi r24,lo8(-16)
 743 0080 9B2D      		mov r25,r11
 744 0082 9F70      		andi r25,lo8(15)
 745 0084 F92E      		mov r15,r25
 746 0086 8823      		tst r24
 747 0088 01F0      		breq .L77
  78:../../tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 748               		.loc 1 78 0 is_stmt 0 discriminator 2
 749 008a F294      		swap r15
 750 008c 80EF      		ldi r24,lo8(-16)
 751 008e F822      		and r15,r24
 752               	.L77:
 753               	.LVL66:
  80:../../tmk_core/common/action.c ****                     if (mods) {
 754               		.loc 1 80 0 is_stmt 1 discriminator 4
 755 0090 0023      		tst r16
 756 0092 01F0      		breq .L78
  81:../../tmk_core/common/action.c ****                         add_weak_mods(mods);
 757               		.loc 1 81 0
 758 0094 FF20      		tst r15
 759 0096 01F4      		brne .+2
 760 0098 00C0      		rjmp .L161
  82:../../tmk_core/common/action.c ****                         send_keyboard_report();
 761               		.loc 1 82 0
 762 009a 8F2D      		mov r24,r15
 763 009c 0E94 0000 		call add_weak_mods
 764               	.LVL67:
  83:../../tmk_core/common/action.c ****                     }
 765               		.loc 1 83 0
 766 00a0 0E94 0000 		call send_keyboard_report
 767               	.LVL68:
 768 00a4 00C0      		rjmp .L161
 769               	.L78:
 770               	.LVL69:
  87:../../tmk_core/common/action.c ****                     if (mods) {
 771               		.loc 1 87 0
 772 00a6 812F      		mov r24,r17
 773 00a8 0E94 0000 		call unregister_code
 774               	.LVL70:
  88:../../tmk_core/common/action.c ****                         del_weak_mods(mods);
 775               		.loc 1 88 0
 776 00ac FF20      		tst r15
 777 00ae 01F4      		brne .+2
 778 00b0 00C0      		rjmp .L63
  89:../../tmk_core/common/action.c ****                         send_keyboard_report();
 779               		.loc 1 89 0
 780 00b2 8F2D      		mov r24,r15
 781 00b4 0E94 0000 		call del_weak_mods
 782               	.LVL71:
 783               	/* epilogue start */
 784               	.LBE10:
 341:../../tmk_core/common/action.c **** 
 785               		.loc 1 341 0
 786 00b8 2696      		adiw r28,6
 787               	.LVL72:
 788 00ba 0FB6      		in __tmp_reg__,__SREG__
 789 00bc F894      		cli
 790 00be DEBF      		out __SP_H__,r29
 791 00c0 0FBE      		out __SREG__,__tmp_reg__
 792 00c2 CDBF      		out __SP_L__,r28
 793               	.LVL73:
 794 00c4 DF91      		pop r29
 795 00c6 CF91      		pop r28
 796 00c8 1F91      		pop r17
 797               	.LVL74:
 798 00ca 0F91      		pop r16
 799               	.LVL75:
 800 00cc FF90      		pop r15
 801               	.LVL76:
 802 00ce EF90      		pop r14
 803               	.LVL77:
 804 00d0 DF90      		pop r13
 805 00d2 CF90      		pop r12
 806 00d4 BF90      		pop r11
 807               	.LBB11:
  90:../../tmk_core/common/action.c ****                     }
 808               		.loc 1 90 0
 809 00d6 0C94 0000 		jmp send_keyboard_report
 810               	.LVL78:
 811               	.L69:
 812               	.LBE11:
 813               	.LBB12:
  99:../../tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 814               		.loc 1 99 0
 815 00da 8B2D      		mov r24,r11
 816 00dc 807F      		andi r24,lo8(-16)
 817 00de 9B2D      		mov r25,r11
 818 00e0 9F70      		andi r25,lo8(15)
 819 00e2 8032      		cpi r24,lo8(32)
 820 00e4 01F4      		brne .L81
  99:../../tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 821               		.loc 1 99 0 is_stmt 0 discriminator 1
 822 00e6 892F      		mov r24,r25
 823 00e8 00C0      		rjmp .L82
 824               	.L81:
  99:../../tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 825               		.loc 1 99 0 discriminator 2
 826 00ea 892F      		mov r24,r25
 827 00ec 8295      		swap r24
 828 00ee 807F      		andi r24,lo8(-16)
 829               	.L82:
 830               	.LVL79:
 101:../../tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 831               		.loc 1 101 0 is_stmt 1 discriminator 4
 832 00f0 1123      		tst r17
 833 00f2 01F0      		breq .L84
 834 00f4 1130      		cpi r17,lo8(1)
 835 00f6 01F0      		breq .L85
 836 00f8 00C0      		rjmp .L169
 837               	.L84:
 105:../../tmk_core/common/action.c ****                             if (tap_count == 0) {
 838               		.loc 1 105 0
 839 00fa 0023      		tst r16
 840 00fc 01F0      		breq .L86
 106:../../tmk_core/common/action.c ****                                 register_mods(mods);
 841               		.loc 1 106 0
 842 00fe 2223      		tst r18
 843 0100 01F0      		breq .L160
 109:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 844               		.loc 1 109 0
 845 0102 2130      		cpi r18,lo8(1)
 846 0104 01F4      		brne .L160
 847               	/* epilogue start */
 848               	.LBE12:
 341:../../tmk_core/common/action.c **** 
 849               		.loc 1 341 0
 850 0106 2696      		adiw r28,6
 851 0108 0FB6      		in __tmp_reg__,__SREG__
 852 010a F894      		cli
 853 010c DEBF      		out __SP_H__,r29
 854 010e 0FBE      		out __SREG__,__tmp_reg__
 855 0110 CDBF      		out __SP_L__,r28
 856 0112 DF91      		pop r29
 857 0114 CF91      		pop r28
 858 0116 1F91      		pop r17
 859               	.LVL80:
 860 0118 0F91      		pop r16
 861               	.LVL81:
 862 011a FF90      		pop r15
 863 011c EF90      		pop r14
 864               	.LVL82:
 865 011e DF90      		pop r13
 866 0120 CF90      		pop r12
 867 0122 BF90      		pop r11
 868               	.LBB13:
 113:../../tmk_core/common/action.c ****                             }
 869               		.loc 1 113 0
 870 0124 0C94 0000 		jmp set_oneshot_mods
 871               	.LVL83:
 872               	.L86:
 119:../../tmk_core/common/action.c ****                                 clear_oneshot_mods();
 873               		.loc 1 119 0
 874 0128 2223      		tst r18
 875 012a 01F0      		breq .L158
 123:../../tmk_core/common/action.c ****                                 // Retain Oneshot mods
 876               		.loc 1 123 0
 877 012c 2130      		cpi r18,lo8(1)
 878 012e 01F4      		brne .+2
 879 0130 00C0      		rjmp .L63
 880               	.L158:
 127:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 881               		.loc 1 127 0
 882 0132 8E83      		std Y+6,r24
 883 0134 0E94 0000 		call clear_oneshot_mods
 884               	.LVL84:
 128:../../tmk_core/common/action.c ****                             }
 885               		.loc 1 128 0
 886 0138 8E81      		ldd r24,Y+6
 887 013a 00C0      		rjmp .L163
 888               	.LVL85:
 889               	.L85:
 134:../../tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 890               		.loc 1 134 0
 891 013c 0023      		tst r16
 892 013e 01F0      		breq .L91
 135:../../tmk_core/common/action.c ****                                 register_mods(mods);
 893               		.loc 1 135 0
 894 0140 2630      		cpi r18,lo8(6)
 895 0142 00F0      		brlo .+2
 896 0144 00C0      		rjmp .L63
 897 0146 00C0      		rjmp .L160
 898               	.L91:
 139:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 899               		.loc 1 139 0
 900 0148 2530      		cpi r18,lo8(5)
 901 014a 00F0      		brlo .+2
 902 014c 00C0      		rjmp .L63
 903 014e 00C0      		rjmp .L163
 904               	.L169:
 145:../../tmk_core/common/action.c ****                             if (tap_count > 0) {
 905               		.loc 1 145 0
 906 0150 0023      		tst r16
 907 0152 01F0      		breq .L92
 146:../../tmk_core/common/action.c ****                                 if (record->tap.interrupted) {
 908               		.loc 1 146 0
 909 0154 2223      		tst r18
 910 0156 01F0      		breq .L160
 147:../../tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: Cancel: add_mods\n");
 911               		.loc 1 147 0
 912 0158 F701      		movw r30,r14
 913 015a 9581      		ldd r25,Z+5
 914 015c 90FF      		sbrs r25,0
 915 015e 00C0      		rjmp .L161
 150:../../tmk_core/common/action.c ****                                     register_mods(mods);
 916               		.loc 1 150 0
 917 0160 9F70      		andi r25,lo8(15)
 918 0162 9583      		std Z+5,r25
 919               	.LVL86:
 920               	.L160:
 921               	/* epilogue start */
 922               	.LBE13:
 341:../../tmk_core/common/action.c **** 
 923               		.loc 1 341 0
 924 0164 2696      		adiw r28,6
 925 0166 0FB6      		in __tmp_reg__,__SREG__
 926 0168 F894      		cli
 927 016a DEBF      		out __SP_H__,r29
 928 016c 0FBE      		out __SREG__,__tmp_reg__
 929 016e CDBF      		out __SP_L__,r28
 930 0170 DF91      		pop r29
 931 0172 CF91      		pop r28
 932 0174 1F91      		pop r17
 933               	.LVL87:
 934 0176 0F91      		pop r16
 935               	.LVL88:
 936 0178 FF90      		pop r15
 937 017a EF90      		pop r14
 938               	.LVL89:
 939 017c DF90      		pop r13
 940 017e CF90      		pop r12
 941 0180 BF90      		pop r11
 942               	.LBB14:
 151:../../tmk_core/common/action.c ****                                 } else {
 943               		.loc 1 151 0
 944 0182 0C94 0000 		jmp register_mods
 945               	.LVL90:
 946               	.L92:
 161:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 947               		.loc 1 161 0
 948 0186 2223      		tst r18
 949 0188 01F4      		brne .+2
 950 018a 00C0      		rjmp .L163
 951 018c 00C0      		rjmp .L162
 952               	.LVL91:
 953               	.L70:
 954               	.LBE14:
 177:../../tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 955               		.loc 1 177 0
 956 018e 2B2D      		mov r18,r11
 957 0190 2695      		lsr r18
 958 0192 2695      		lsr r18
 959 0194 2370      		andi r18,lo8(3)
 960 0196 30E0      		ldi r19,0
 961 0198 2115      		cp r18,__zero_reg__
 962 019a 3105      		cpc r19,__zero_reg__
 963 019c 01F0      		breq .L96
 964 019e 2130      		cpi r18,1
 965 01a0 3105      		cpc r19,__zero_reg__
 966 01a2 01F0      		breq .L97
 967 01a4 00C0      		rjmp .L63
 968               	.L96:
 179:../../tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 969               		.loc 1 179 0
 970 01a6 0023      		tst r16
 971 01a8 01F0      		breq .L98
 972               	.LVL92:
 180:../../tmk_core/common/action.c ****                     } else {
 973               		.loc 1 180 0
 974 01aa 812F      		mov r24,r17
 975 01ac 9B2D      		mov r25,r11
 976 01ae 9370      		andi r25,lo8(3)
 977 01b0 00C0      		rjmp .L164
 978               	.LVL93:
 979               	.L98:
 182:../../tmk_core/common/action.c ****                     }
 980               		.loc 1 182 0
 981 01b2 80E0      		ldi r24,0
 982 01b4 90E0      		ldi r25,0
 983               	.LVL94:
 984               	.L164:
 985               	/* epilogue start */
 341:../../tmk_core/common/action.c **** 
 986               		.loc 1 341 0
 987 01b6 2696      		adiw r28,6
 988 01b8 0FB6      		in __tmp_reg__,__SREG__
 989 01ba F894      		cli
 990 01bc DEBF      		out __SP_H__,r29
 991 01be 0FBE      		out __SREG__,__tmp_reg__
 992 01c0 CDBF      		out __SP_L__,r28
 993 01c2 DF91      		pop r29
 994 01c4 CF91      		pop r28
 995 01c6 1F91      		pop r17
 996               	.LVL95:
 997 01c8 0F91      		pop r16
 998               	.LVL96:
 999 01ca FF90      		pop r15
 1000 01cc EF90      		pop r14
 1001               	.LVL97:
 1002 01ce DF90      		pop r13
 1003 01d0 CF90      		pop r12
 1004 01d2 BF90      		pop r11
 182:../../tmk_core/common/action.c ****                     }
 1005               		.loc 1 182 0
 1006 01d4 0C94 0000 		jmp host_system_send
 1007               	.LVL98:
 1008               	.L97:
 186:../../tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 1009               		.loc 1 186 0
 1010 01d8 0023      		tst r16
 1011 01da 01F0      		breq .L99
 1012               	.LVL99:
 187:../../tmk_core/common/action.c ****                     } else {
 1013               		.loc 1 187 0
 1014 01dc 812F      		mov r24,r17
 1015 01de 9B2D      		mov r25,r11
 1016 01e0 9370      		andi r25,lo8(3)
 1017 01e2 00C0      		rjmp .L165
 1018               	.LVL100:
 1019               	.L99:
 189:../../tmk_core/common/action.c ****                     }
 1020               		.loc 1 189 0
 1021 01e4 80E0      		ldi r24,0
 1022 01e6 90E0      		ldi r25,0
 1023               	.LVL101:
 1024               	.L165:
 1025               	/* epilogue start */
 341:../../tmk_core/common/action.c **** 
 1026               		.loc 1 341 0
 1027 01e8 2696      		adiw r28,6
 1028 01ea 0FB6      		in __tmp_reg__,__SREG__
 1029 01ec F894      		cli
 1030 01ee DEBF      		out __SP_H__,r29
 1031 01f0 0FBE      		out __SREG__,__tmp_reg__
 1032 01f2 CDBF      		out __SP_L__,r28
 1033 01f4 DF91      		pop r29
 1034 01f6 CF91      		pop r28
 1035 01f8 1F91      		pop r17
 1036               	.LVL102:
 1037 01fa 0F91      		pop r16
 1038               	.LVL103:
 1039 01fc FF90      		pop r15
 1040 01fe EF90      		pop r14
 1041               	.LVL104:
 1042 0200 DF90      		pop r13
 1043 0202 CF90      		pop r12
 1044 0204 BF90      		pop r11
 189:../../tmk_core/common/action.c ****                     }
 1045               		.loc 1 189 0
 1046 0206 0C94 0000 		jmp host_consumer_send
 1047               	.LVL105:
 1048               	.L71:
 199:../../tmk_core/common/action.c ****                 mousekey_send();
 1049               		.loc 1 199 0
 1050 020a 812F      		mov r24,r17
 198:../../tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 1051               		.loc 1 198 0
 1052 020c 0023      		tst r16
 1053 020e 01F0      		breq .L100
 199:../../tmk_core/common/action.c ****                 mousekey_send();
 1054               		.loc 1 199 0
 1055 0210 0E94 0000 		call mousekey_on
 1056               	.LVL106:
 1057 0214 00C0      		rjmp .L167
 1058               	.L100:
 202:../../tmk_core/common/action.c ****                 mousekey_send();
 1059               		.loc 1 202 0
 1060 0216 0E94 0000 		call mousekey_off
 1061               	.LVL107:
 1062               	.L167:
 1063               	/* epilogue start */
 341:../../tmk_core/common/action.c **** 
 1064               		.loc 1 341 0
 1065 021a 2696      		adiw r28,6
 1066 021c 0FB6      		in __tmp_reg__,__SREG__
 1067 021e F894      		cli
 1068 0220 DEBF      		out __SP_H__,r29
 1069 0222 0FBE      		out __SREG__,__tmp_reg__
 1070 0224 CDBF      		out __SP_L__,r28
 1071 0226 DF91      		pop r29
 1072 0228 CF91      		pop r28
 1073 022a 1F91      		pop r17
 1074               	.LVL108:
 1075 022c 0F91      		pop r16
 1076               	.LVL109:
 1077 022e FF90      		pop r15
 1078 0230 EF90      		pop r14
 1079               	.LVL110:
 1080 0232 DF90      		pop r13
 1081 0234 CF90      		pop r12
 1082 0236 BF90      		pop r11
 203:../../tmk_core/common/action.c ****             }
 1083               		.loc 1 203 0
 1084 0238 0C94 0000 		jmp mousekey_send
 1085               	.LVL111:
 1086               	.L72:
 209:../../tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1087               		.loc 1 209 0
 1088 023c 8B2D      		mov r24,r11
 1089 023e 8370      		andi r24,lo8(3)
 1090 0240 01F0      		breq .+2
 1091 0242 00C0      		rjmp .L101
 211:../../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1092               		.loc 1 211 0
 1093 0244 0111      		cpse r16,__zero_reg__
 1094 0246 00C0      		rjmp .L63
 1095               	.LVL112:
 1096               	.LBB15:
 212:../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1097               		.loc 1 212 0
 1098 0248 812F      		mov r24,r17
 1099 024a 8295      		swap r24
 1100 024c 8695      		lsr r24
 1101 024e 8770      		andi r24,lo8(7)
 1102 0250 880F      		lsl r24
 1103 0252 880F      		lsl r24
 213:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1104               		.loc 1 213 0
 1105 0254 912F      		mov r25,r17
 1106 0256 9F70      		andi r25,lo8(15)
 1107 0258 C92E      		mov r12,r25
 1108 025a D12C      		mov r13,__zero_reg__
 1109 025c E12C      		mov r14,__zero_reg__
 1110 025e F12C      		mov r15,__zero_reg__
 1111               	.LVL113:
 1112 0260 082E      		mov r0,r24
 1113 0262 00C0      		rjmp 2f
 1114               		1:
 1115 0264 CC0C      		lsl r12
 1116 0266 DD1C      		rol r13
 1117 0268 EE1C      		rol r14
 1118 026a FF1C      		rol r15
 1119               		2:
 1120 026c 0A94      		dec r0
 1121 026e 02F4      		brpl 1b
 1122               	.LVL114:
 214:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1123               		.loc 1 214 0
 1124 0270 14FF      		sbrs r17,4
 1125 0272 00C0      		rjmp .L129
 214:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1126               		.loc 1 214 0 is_stmt 0 discriminator 1
 1127 0274 4FE0      		ldi r20,lo8(15)
 1128 0276 50E0      		ldi r21,0
 1129 0278 60E0      		ldi r22,0
 1130 027a 70E0      		ldi r23,0
 1131 027c 00C0      		rjmp 2f
 1132               		1:
 1133 027e 440F      		lsl r20
 1134 0280 551F      		rol r21
 1135 0282 661F      		rol r22
 1136 0284 771F      		rol r23
 1137               		2:
 1138 0286 8A95      		dec r24
 1139 0288 02F4      		brpl 1b
 1140 028a CB01      		movw r24,r22
 1141 028c BA01      		movw r22,r20
 1142 028e 6095      		com r22
 1143 0290 7095      		com r23
 1144 0292 8095      		com r24
 1145 0294 9095      		com r25
 1146 0296 00C0      		rjmp .L102
 1147               	.L129:
 214:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1148               		.loc 1 214 0
 1149 0298 60E0      		ldi r22,0
 1150 029a 70E0      		ldi r23,0
 1151 029c CB01      		movw r24,r22
 1152               	.L102:
 1153               	.LVL115:
 215:../../tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1154               		.loc 1 215 0 is_stmt 1 discriminator 4
 1155 029e 2B2D      		mov r18,r11
 1156 02a0 2695      		lsr r18
 1157 02a2 2695      		lsr r18
 1158 02a4 2370      		andi r18,lo8(3)
 1159 02a6 422F      		mov r20,r18
 1160 02a8 50E0      		ldi r21,0
 1161 02aa 4230      		cpi r20,2
 1162 02ac 5105      		cpc r21,__zero_reg__
 1163 02ae 01F0      		breq .L104
 1164 02b0 4330      		cpi r20,3
 1165 02b2 5105      		cpc r21,__zero_reg__
 1166 02b4 01F0      		breq .L105
 1167 02b6 6C29      		or r22,r12
 1168 02b8 7D29      		or r23,r13
 1169 02ba 8E29      		or r24,r14
 1170 02bc 9F29      		or r25,r15
 1171               	.LVL116:
 1172 02be 4130      		cpi r20,1
 1173 02c0 5105      		cpc r21,__zero_reg__
 1174 02c2 01F0      		breq .L168
 1175               	/* epilogue start */
 1176               	.LBE15:
 341:../../tmk_core/common/action.c **** 
 1177               		.loc 1 341 0 discriminator 4
 1178 02c4 2696      		adiw r28,6
 1179 02c6 0FB6      		in __tmp_reg__,__SREG__
 1180 02c8 F894      		cli
 1181 02ca DEBF      		out __SP_H__,r29
 1182 02cc 0FBE      		out __SREG__,__tmp_reg__
 1183 02ce CDBF      		out __SP_L__,r28
 1184 02d0 DF91      		pop r29
 1185 02d2 CF91      		pop r28
 1186 02d4 1F91      		pop r17
 1187               	.LVL117:
 1188 02d6 0F91      		pop r16
 1189               	.LVL118:
 1190 02d8 FF90      		pop r15
 1191 02da EF90      		pop r14
 1192 02dc DF90      		pop r13
 1193 02de CF90      		pop r12
 1194               	.LVL119:
 1195 02e0 BF90      		pop r11
 1196               	.LBB16:
 216:../../tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 1197               		.loc 1 216 0 discriminator 4
 1198 02e2 0C94 0000 		jmp default_layer_and
 1199               	.LVL120:
 1200               	.L104:
 218:../../tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1201               		.loc 1 218 0
 1202 02e6 6C29      		or r22,r12
 1203 02e8 7D29      		or r23,r13
 1204 02ea 8E29      		or r24,r14
 1205 02ec 9F29      		or r25,r15
 1206               	.LVL121:
 1207               	/* epilogue start */
 1208               	.LBE16:
 341:../../tmk_core/common/action.c **** 
 1209               		.loc 1 341 0
 1210 02ee 2696      		adiw r28,6
 1211 02f0 0FB6      		in __tmp_reg__,__SREG__
 1212 02f2 F894      		cli
 1213 02f4 DEBF      		out __SP_H__,r29
 1214 02f6 0FBE      		out __SREG__,__tmp_reg__
 1215 02f8 CDBF      		out __SP_L__,r28
 1216 02fa DF91      		pop r29
 1217 02fc CF91      		pop r28
 1218 02fe 1F91      		pop r17
 1219               	.LVL122:
 1220 0300 0F91      		pop r16
 1221               	.LVL123:
 1222 0302 FF90      		pop r15
 1223 0304 EF90      		pop r14
 1224 0306 DF90      		pop r13
 1225 0308 CF90      		pop r12
 1226               	.LVL124:
 1227 030a BF90      		pop r11
 1228               	.LBB17:
 218:../../tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1229               		.loc 1 218 0
 1230 030c 0C94 0000 		jmp default_layer_xor
 1231               	.LVL125:
 1232               	.L105:
 219:../../tmk_core/common/action.c ****                     }
 1233               		.loc 1 219 0
 1234 0310 0E94 0000 		call default_layer_and
 1235               	.LVL126:
 1236 0314 C701      		movw r24,r14
 1237 0316 B601      		movw r22,r12
 1238               	.L168:
 1239               	/* epilogue start */
 1240               	.LBE17:
 341:../../tmk_core/common/action.c **** 
 1241               		.loc 1 341 0
 1242 0318 2696      		adiw r28,6
 1243 031a 0FB6      		in __tmp_reg__,__SREG__
 1244 031c F894      		cli
 1245 031e DEBF      		out __SP_H__,r29
 1246 0320 0FBE      		out __SREG__,__tmp_reg__
 1247 0322 CDBF      		out __SP_L__,r28
 1248 0324 DF91      		pop r29
 1249 0326 CF91      		pop r28
 1250 0328 1F91      		pop r17
 1251               	.LVL127:
 1252 032a 0F91      		pop r16
 1253               	.LVL128:
 1254 032c FF90      		pop r15
 1255 032e EF90      		pop r14
 1256 0330 DF90      		pop r13
 1257 0332 CF90      		pop r12
 1258               	.LVL129:
 1259 0334 BF90      		pop r11
 1260               	.LBB18:
 219:../../tmk_core/common/action.c ****                     }
 1261               		.loc 1 219 0
 1262 0336 0C94 0000 		jmp default_layer_or
 1263               	.LVL130:
 1264               	.L101:
 1265               	.LBE18:
 224:../../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1266               		.loc 1 224 0
 1267 033a 0023      		tst r16
 1268 033c 01F0      		breq .L107
 224:../../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1269               		.loc 1 224 0 is_stmt 0 discriminator 1
 1270 033e 8B2D      		mov r24,r11
 1271 0340 8170      		andi r24,lo8(1)
 1272 0342 00C0      		rjmp .L108
 1273               	.L107:
 224:../../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1274               		.loc 1 224 0 discriminator 2
 1275 0344 8695      		lsr r24
 1276               	.L108:
 224:../../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1277               		.loc 1 224 0 discriminator 4
 1278 0346 8823      		tst r24
 1279 0348 01F4      		brne .+2
 1280 034a 00C0      		rjmp .L63
 1281               	.LVL131:
 1282               	.LBB19:
 226:../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1283               		.loc 1 226 0 is_stmt 1
 1284 034c 812F      		mov r24,r17
 1285 034e 8295      		swap r24
 1286 0350 8695      		lsr r24
 1287 0352 8770      		andi r24,lo8(7)
 1288 0354 880F      		lsl r24
 1289 0356 880F      		lsl r24
 227:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1290               		.loc 1 227 0
 1291 0358 912F      		mov r25,r17
 1292 035a 9F70      		andi r25,lo8(15)
 1293 035c C92E      		mov r12,r25
 1294 035e D12C      		mov r13,__zero_reg__
 1295 0360 E12C      		mov r14,__zero_reg__
 1296 0362 F12C      		mov r15,__zero_reg__
 1297               	.LVL132:
 1298 0364 082E      		mov r0,r24
 1299 0366 00C0      		rjmp 2f
 1300               		1:
 1301 0368 CC0C      		lsl r12
 1302 036a DD1C      		rol r13
 1303 036c EE1C      		rol r14
 1304 036e FF1C      		rol r15
 1305               		2:
 1306 0370 0A94      		dec r0
 1307 0372 02F4      		brpl 1b
 1308               	.LVL133:
 228:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1309               		.loc 1 228 0
 1310 0374 14FF      		sbrs r17,4
 1311 0376 00C0      		rjmp .L130
 228:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1312               		.loc 1 228 0 is_stmt 0 discriminator 1
 1313 0378 4FE0      		ldi r20,lo8(15)
 1314 037a 50E0      		ldi r21,0
 1315 037c 60E0      		ldi r22,0
 1316 037e 70E0      		ldi r23,0
 1317 0380 00C0      		rjmp 2f
 1318               		1:
 1319 0382 440F      		lsl r20
 1320 0384 551F      		rol r21
 1321 0386 661F      		rol r22
 1322 0388 771F      		rol r23
 1323               		2:
 1324 038a 8A95      		dec r24
 1325 038c 02F4      		brpl 1b
 1326 038e CB01      		movw r24,r22
 1327 0390 BA01      		movw r22,r20
 1328 0392 6095      		com r22
 1329 0394 7095      		com r23
 1330 0396 8095      		com r24
 1331 0398 9095      		com r25
 1332 039a 00C0      		rjmp .L109
 1333               	.L130:
 228:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1334               		.loc 1 228 0
 1335 039c 60E0      		ldi r22,0
 1336 039e 70E0      		ldi r23,0
 1337 03a0 CB01      		movw r24,r22
 1338               	.L109:
 1339               	.LVL134:
 229:../../tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1340               		.loc 1 229 0 is_stmt 1 discriminator 4
 1341 03a2 2B2D      		mov r18,r11
 1342 03a4 2695      		lsr r18
 1343 03a6 2695      		lsr r18
 1344 03a8 2370      		andi r18,lo8(3)
 1345 03aa 422F      		mov r20,r18
 1346 03ac 50E0      		ldi r21,0
 1347 03ae 4230      		cpi r20,2
 1348 03b0 5105      		cpc r21,__zero_reg__
 1349 03b2 01F0      		breq .L111
 1350 03b4 4330      		cpi r20,3
 1351 03b6 5105      		cpc r21,__zero_reg__
 1352 03b8 01F0      		breq .L112
 1353 03ba 6C29      		or r22,r12
 1354 03bc 7D29      		or r23,r13
 1355 03be 8E29      		or r24,r14
 1356 03c0 9F29      		or r25,r15
 1357               	.LVL135:
 1358 03c2 4130      		cpi r20,1
 1359 03c4 5105      		cpc r21,__zero_reg__
 1360 03c6 01F0      		breq .L166
 1361               	/* epilogue start */
 1362               	.LBE19:
 341:../../tmk_core/common/action.c **** 
 1363               		.loc 1 341 0 discriminator 4
 1364 03c8 2696      		adiw r28,6
 1365 03ca 0FB6      		in __tmp_reg__,__SREG__
 1366 03cc F894      		cli
 1367 03ce DEBF      		out __SP_H__,r29
 1368 03d0 0FBE      		out __SREG__,__tmp_reg__
 1369 03d2 CDBF      		out __SP_L__,r28
 1370 03d4 DF91      		pop r29
 1371 03d6 CF91      		pop r28
 1372 03d8 1F91      		pop r17
 1373               	.LVL136:
 1374 03da 0F91      		pop r16
 1375               	.LVL137:
 1376 03dc FF90      		pop r15
 1377 03de EF90      		pop r14
 1378 03e0 DF90      		pop r13
 1379 03e2 CF90      		pop r12
 1380               	.LVL138:
 1381 03e4 BF90      		pop r11
 1382               	.LBB20:
 230:../../tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1383               		.loc 1 230 0 discriminator 4
 1384 03e6 0C94 0000 		jmp layer_and
 1385               	.LVL139:
 1386               	.L111:
 232:../../tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1387               		.loc 1 232 0
 1388 03ea 6C29      		or r22,r12
 1389 03ec 7D29      		or r23,r13
 1390 03ee 8E29      		or r24,r14
 1391 03f0 9F29      		or r25,r15
 1392               	.LVL140:
 1393               	/* epilogue start */
 1394               	.LBE20:
 341:../../tmk_core/common/action.c **** 
 1395               		.loc 1 341 0
 1396 03f2 2696      		adiw r28,6
 1397 03f4 0FB6      		in __tmp_reg__,__SREG__
 1398 03f6 F894      		cli
 1399 03f8 DEBF      		out __SP_H__,r29
 1400 03fa 0FBE      		out __SREG__,__tmp_reg__
 1401 03fc CDBF      		out __SP_L__,r28
 1402 03fe DF91      		pop r29
 1403 0400 CF91      		pop r28
 1404 0402 1F91      		pop r17
 1405               	.LVL141:
 1406 0404 0F91      		pop r16
 1407               	.LVL142:
 1408 0406 FF90      		pop r15
 1409 0408 EF90      		pop r14
 1410 040a DF90      		pop r13
 1411 040c CF90      		pop r12
 1412               	.LVL143:
 1413 040e BF90      		pop r11
 1414               	.LBB21:
 232:../../tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1415               		.loc 1 232 0
 1416 0410 0C94 0000 		jmp layer_xor
 1417               	.LVL144:
 1418               	.L112:
 233:../../tmk_core/common/action.c ****                     }
 1419               		.loc 1 233 0
 1420 0414 0E94 0000 		call layer_and
 1421               	.LVL145:
 1422 0418 C701      		movw r24,r14
 1423 041a B601      		movw r22,r12
 1424               	.L166:
 1425               	/* epilogue start */
 1426               	.LBE21:
 341:../../tmk_core/common/action.c **** 
 1427               		.loc 1 341 0
 1428 041c 2696      		adiw r28,6
 1429 041e 0FB6      		in __tmp_reg__,__SREG__
 1430 0420 F894      		cli
 1431 0422 DEBF      		out __SP_H__,r29
 1432 0424 0FBE      		out __SREG__,__tmp_reg__
 1433 0426 CDBF      		out __SP_L__,r28
 1434 0428 DF91      		pop r29
 1435 042a CF91      		pop r28
 1436 042c 1F91      		pop r17
 1437               	.LVL146:
 1438 042e 0F91      		pop r16
 1439               	.LVL147:
 1440 0430 FF90      		pop r15
 1441 0432 EF90      		pop r14
 1442 0434 DF90      		pop r13
 1443 0436 CF90      		pop r12
 1444               	.LVL148:
 1445 0438 BF90      		pop r11
 1446               	.LBB22:
 233:../../tmk_core/common/action.c ****                     }
 1447               		.loc 1 233 0
 1448 043a 0C94 0000 		jmp layer_or
 1449               	.LVL149:
 1450               	.L73:
 1451               	.LBE22:
 241:../../tmk_core/common/action.c ****                 case 0xe0 ... 0xef:
 1452               		.loc 1 241 0
 1453 043e 103F      		cpi r17,lo8(-16)
 1454 0440 01F0      		breq .L115
 1455 0442 00F4      		brsh .L116
 1456 0444 103E      		cpi r17,lo8(-32)
 1457 0446 00F4      		brsh .L156
 1458 0448 00C0      		rjmp .L114
 1459               	.L116:
 1460 044a 123F      		cpi r17,lo8(-14)
 1461 044c 01F4      		brne .+2
 1462 044e 00C0      		rjmp .L118
 1463 0450 00F0      		brlo .L119
 1464 0452 133F      		cpi r17,lo8(-13)
 1465 0454 01F4      		brne .+2
 1466 0456 00C0      		rjmp .L120
 1467 0458 00C0      		rjmp .L114
 1468               	.L156:
 1469 045a 1F70      		andi r17,lo8(15)
 1470               	.LVL150:
 1471 045c 8B2D      		mov r24,r11
 1472 045e 8F71      		andi r24,lo8(31)
 244:../../tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1473               		.loc 1 244 0
 1474 0460 0023      		tst r16
 1475 0462 01F0      		breq .L121
 245:../../tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 1476               		.loc 1 245 0
 1477 0464 0E94 0000 		call layer_on
 1478               	.LVL151:
 246:../../tmk_core/common/action.c ****                     } else {
 1479               		.loc 1 246 0
 1480 0468 812F      		mov r24,r17
 1481 046a 00C0      		rjmp .L160
 1482               	.L121:
 248:../../tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 1483               		.loc 1 248 0
 1484 046c 0E94 0000 		call layer_off
 1485               	.LVL152:
 249:../../tmk_core/common/action.c ****                     }
 1486               		.loc 1 249 0
 1487 0470 812F      		mov r24,r17
 1488               	.LVL153:
 1489               	.L163:
 1490               	/* epilogue start */
 341:../../tmk_core/common/action.c **** 
 1491               		.loc 1 341 0
 1492 0472 2696      		adiw r28,6
 1493 0474 0FB6      		in __tmp_reg__,__SREG__
 1494 0476 F894      		cli
 1495 0478 DEBF      		out __SP_H__,r29
 1496 047a 0FBE      		out __SREG__,__tmp_reg__
 1497 047c CDBF      		out __SP_L__,r28
 1498 047e DF91      		pop r29
 1499 0480 CF91      		pop r28
 1500 0482 1F91      		pop r17
 1501               	.LVL154:
 1502 0484 0F91      		pop r16
 1503               	.LVL155:
 1504 0486 FF90      		pop r15
 1505 0488 EF90      		pop r14
 1506               	.LVL156:
 1507 048a DF90      		pop r13
 1508 048c CF90      		pop r12
 1509 048e BF90      		pop r11
 249:../../tmk_core/common/action.c ****                     }
 1510               		.loc 1 249 0
 1511 0490 0C94 0000 		jmp unregister_mods
 1512               	.LVL157:
 1513               	.L115:
 254:../../tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1514               		.loc 1 254 0
 1515 0494 0023      		tst r16
 1516 0496 01F0      		breq .L122
 255:../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1517               		.loc 1 255 0
 1518 0498 2530      		cpi r18,lo8(5)
 1519 049a 00F0      		brlo .+2
 1520 049c 00C0      		rjmp .L63
 1521               	.L123:
 256:../../tmk_core/common/action.c ****                         }
 1522               		.loc 1 256 0
 1523 049e 8B2D      		mov r24,r11
 1524 04a0 8F71      		andi r24,lo8(31)
 1525               	/* epilogue start */
 341:../../tmk_core/common/action.c **** 
 1526               		.loc 1 341 0
 1527 04a2 2696      		adiw r28,6
 1528 04a4 0FB6      		in __tmp_reg__,__SREG__
 1529 04a6 F894      		cli
 1530 04a8 DEBF      		out __SP_H__,r29
 1531 04aa 0FBE      		out __SREG__,__tmp_reg__
 1532 04ac CDBF      		out __SP_L__,r28
 1533 04ae DF91      		pop r29
 1534 04b0 CF91      		pop r28
 1535 04b2 1F91      		pop r17
 1536               	.LVL158:
 1537 04b4 0F91      		pop r16
 1538               	.LVL159:
 1539 04b6 FF90      		pop r15
 1540 04b8 EF90      		pop r14
 1541               	.LVL160:
 1542 04ba DF90      		pop r13
 1543 04bc CF90      		pop r12
 1544 04be BF90      		pop r11
 256:../../tmk_core/common/action.c ****                         }
 1545               		.loc 1 256 0
 1546 04c0 0C94 0000 		jmp layer_invert
 1547               	.LVL161:
 1548               	.L122:
 259:../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1549               		.loc 1 259 0
 1550 04c4 2630      		cpi r18,lo8(6)
 1551 04c6 00F0      		brlo .+2
 1552 04c8 00C0      		rjmp .L63
 1553 04ca 00C0      		rjmp .L123
 1554               	.L119:
 265:../../tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1555               		.loc 1 265 0
 1556 04cc 0023      		tst r16
 1557 04ce 01F0      		breq .L124
 1558               	.L125:
 265:../../tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1559               		.loc 1 265 0 is_stmt 0 discriminator 1
 1560 04d0 8B2D      		mov r24,r11
 1561 04d2 8F71      		andi r24,lo8(31)
 1562               	/* epilogue start */
 341:../../tmk_core/common/action.c **** 
 1563               		.loc 1 341 0 is_stmt 1 discriminator 1
 1564 04d4 2696      		adiw r28,6
 1565 04d6 0FB6      		in __tmp_reg__,__SREG__
 1566 04d8 F894      		cli
 1567 04da DEBF      		out __SP_H__,r29
 1568 04dc 0FBE      		out __SREG__,__tmp_reg__
 1569 04de CDBF      		out __SP_L__,r28
 1570 04e0 DF91      		pop r29
 1571 04e2 CF91      		pop r28
 1572 04e4 1F91      		pop r17
 1573               	.LVL162:
 1574 04e6 0F91      		pop r16
 1575               	.LVL163:
 1576 04e8 FF90      		pop r15
 1577 04ea EF90      		pop r14
 1578               	.LVL164:
 1579 04ec DF90      		pop r13
 1580 04ee CF90      		pop r12
 1581 04f0 BF90      		pop r11
 265:../../tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1582               		.loc 1 265 0 discriminator 1
 1583 04f2 0C94 0000 		jmp layer_on
 1584               	.LVL165:
 1585               	.L118:
 269:../../tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 1586               		.loc 1 269 0
 1587 04f6 0023      		tst r16
 1588 04f8 01F0      		breq .L125
 1589               	.L124:
 266:../../tmk_core/common/action.c ****                     break;
 1590               		.loc 1 266 0
 1591 04fa 8B2D      		mov r24,r11
 1592 04fc 8F71      		andi r24,lo8(31)
 1593               	/* epilogue start */
 341:../../tmk_core/common/action.c **** 
 1594               		.loc 1 341 0
 1595 04fe 2696      		adiw r28,6
 1596 0500 0FB6      		in __tmp_reg__,__SREG__
 1597 0502 F894      		cli
 1598 0504 DEBF      		out __SP_H__,r29
 1599 0506 0FBE      		out __SREG__,__tmp_reg__
 1600 0508 CDBF      		out __SP_L__,r28
 1601 050a DF91      		pop r29
 1602 050c CF91      		pop r28
 1603 050e 1F91      		pop r17
 1604               	.LVL166:
 1605 0510 0F91      		pop r16
 1606               	.LVL167:
 1607 0512 FF90      		pop r15
 1608 0514 EF90      		pop r14
 1609               	.LVL168:
 1610 0516 DF90      		pop r13
 1611 0518 CF90      		pop r12
 1612 051a BF90      		pop r11
 266:../../tmk_core/common/action.c ****                     break;
 1613               		.loc 1 266 0
 1614 051c 0C94 0000 		jmp layer_off
 1615               	.LVL169:
 1616               	.L120:
 273:../../tmk_core/common/action.c ****                                     layer_clear();
 1617               		.loc 1 273 0
 1618 0520 0023      		tst r16
 1619 0522 01F0      		breq .L126
 273:../../tmk_core/common/action.c ****                                     layer_clear();
 1620               		.loc 1 273 0 is_stmt 0 discriminator 1
 1621 0524 8B2D      		mov r24,r11
 1622 0526 8F71      		andi r24,lo8(31)
 1623               	/* epilogue start */
 341:../../tmk_core/common/action.c **** 
 1624               		.loc 1 341 0 is_stmt 1 discriminator 1
 1625 0528 2696      		adiw r28,6
 1626 052a 0FB6      		in __tmp_reg__,__SREG__
 1627 052c F894      		cli
 1628 052e DEBF      		out __SP_H__,r29
 1629 0530 0FBE      		out __SREG__,__tmp_reg__
 1630 0532 CDBF      		out __SP_L__,r28
 1631 0534 DF91      		pop r29
 1632 0536 CF91      		pop r28
 1633 0538 1F91      		pop r17
 1634               	.LVL170:
 1635 053a 0F91      		pop r16
 1636               	.LVL171:
 1637 053c FF90      		pop r15
 1638 053e EF90      		pop r14
 1639               	.LVL172:
 1640 0540 DF90      		pop r13
 1641 0542 CF90      		pop r12
 1642 0544 BF90      		pop r11
 273:../../tmk_core/common/action.c ****                                     layer_clear();
 1643               		.loc 1 273 0 discriminator 1
 1644 0546 0C94 0000 		jmp layer_move
 1645               	.LVL173:
 1646               	.L126:
 1647               	/* epilogue start */
 341:../../tmk_core/common/action.c **** 
 1648               		.loc 1 341 0
 1649 054a 2696      		adiw r28,6
 1650 054c 0FB6      		in __tmp_reg__,__SREG__
 1651 054e F894      		cli
 1652 0550 DEBF      		out __SP_H__,r29
 1653 0552 0FBE      		out __SREG__,__tmp_reg__
 1654 0554 CDBF      		out __SP_L__,r28
 1655 0556 DF91      		pop r29
 1656 0558 CF91      		pop r28
 1657 055a 1F91      		pop r17
 1658               	.LVL174:
 1659 055c 0F91      		pop r16
 1660               	.LVL175:
 1661 055e FF90      		pop r15
 1662 0560 EF90      		pop r14
 1663               	.LVL176:
 1664 0562 DF90      		pop r13
 1665 0564 CF90      		pop r12
 1666 0566 BF90      		pop r11
 274:../../tmk_core/common/action.c ****                     break;
 1667               		.loc 1 274 0
 1668 0568 0C94 0000 		jmp layer_clear
 1669               	.LVL177:
 1670               	.L114:
 278:../../tmk_core/common/action.c ****                         if (tap_count > 0) {
 1671               		.loc 1 278 0
 1672 056c 0023      		tst r16
 1673 056e 01F0      		breq .L127
 279:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 1674               		.loc 1 279 0
 1675 0570 2223      		tst r18
 1676 0572 01F4      		brne .+2
 1677 0574 00C0      		rjmp .L125
 1678               	.L161:
 281:../../tmk_core/common/action.c ****                         } else {
 1679               		.loc 1 281 0
 1680 0576 812F      		mov r24,r17
 1681               	/* epilogue start */
 341:../../tmk_core/common/action.c **** 
 1682               		.loc 1 341 0
 1683 0578 2696      		adiw r28,6
 1684 057a 0FB6      		in __tmp_reg__,__SREG__
 1685 057c F894      		cli
 1686 057e DEBF      		out __SP_H__,r29
 1687 0580 0FBE      		out __SREG__,__tmp_reg__
 1688 0582 CDBF      		out __SP_L__,r28
 1689 0584 DF91      		pop r29
 1690 0586 CF91      		pop r28
 1691 0588 1F91      		pop r17
 1692               	.LVL178:
 1693 058a 0F91      		pop r16
 1694               	.LVL179:
 1695 058c FF90      		pop r15
 1696 058e EF90      		pop r14
 1697               	.LVL180:
 1698 0590 DF90      		pop r13
 1699 0592 CF90      		pop r12
 1700 0594 BF90      		pop r11
 281:../../tmk_core/common/action.c ****                         } else {
 1701               		.loc 1 281 0
 1702 0596 0C94 0000 		jmp register_code
 1703               	.LVL181:
 1704               	.L127:
 287:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 1705               		.loc 1 287 0
 1706 059a 2223      		tst r18
 1707 059c 01F4      		brne .+2
 1708 059e 00C0      		rjmp .L124
 1709               	.L162:
 289:../../tmk_core/common/action.c ****                         } else {
 1710               		.loc 1 289 0
 1711 05a0 812F      		mov r24,r17
 1712               	/* epilogue start */
 341:../../tmk_core/common/action.c **** 
 1713               		.loc 1 341 0
 1714 05a2 2696      		adiw r28,6
 1715 05a4 0FB6      		in __tmp_reg__,__SREG__
 1716 05a6 F894      		cli
 1717 05a8 DEBF      		out __SP_H__,r29
 1718 05aa 0FBE      		out __SREG__,__tmp_reg__
 1719 05ac CDBF      		out __SP_L__,r28
 1720 05ae DF91      		pop r29
 1721 05b0 CF91      		pop r28
 1722 05b2 1F91      		pop r17
 1723               	.LVL182:
 1724 05b4 0F91      		pop r16
 1725               	.LVL183:
 1726 05b6 FF90      		pop r15
 1727 05b8 EF90      		pop r14
 1728               	.LVL184:
 1729 05ba DF90      		pop r13
 1730 05bc CF90      		pop r12
 1731 05be BF90      		pop r11
 289:../../tmk_core/common/action.c ****                         } else {
 1732               		.loc 1 289 0
 1733 05c0 0C94 0000 		jmp unregister_code
 1734               	.LVL185:
 1735               	.L74:
 303:../../tmk_core/common/action.c ****             break;
 1736               		.loc 1 303 0
 1737 05c4 4B2D      		mov r20,r11
 1738 05c6 4F70      		andi r20,lo8(15)
 1739               	.LVL186:
 1740 05c8 612F      		mov r22,r17
 1741 05ca C701      		movw r24,r14
 1742 05cc 0E94 0000 		call action_get_macro
 1743               	.LVL187:
 1744               	/* epilogue start */
 341:../../tmk_core/common/action.c **** 
 1745               		.loc 1 341 0
 1746 05d0 2696      		adiw r28,6
 1747 05d2 0FB6      		in __tmp_reg__,__SREG__
 1748 05d4 F894      		cli
 1749 05d6 DEBF      		out __SP_H__,r29
 1750 05d8 0FBE      		out __SREG__,__tmp_reg__
 1751 05da CDBF      		out __SP_L__,r28
 1752 05dc DF91      		pop r29
 1753 05de CF91      		pop r28
 1754 05e0 1F91      		pop r17
 1755               	.LVL188:
 1756 05e2 0F91      		pop r16
 1757               	.LVL189:
 1758 05e4 FF90      		pop r15
 1759 05e6 EF90      		pop r14
 1760               	.LVL190:
 1761 05e8 DF90      		pop r13
 1762 05ea CF90      		pop r12
 1763 05ec BF90      		pop r11
 303:../../tmk_core/common/action.c ****             break;
 1764               		.loc 1 303 0
 1765 05ee 0C94 0000 		jmp action_macro_play
 1766               	.LVL191:
 1767               	.L75:
 335:../../tmk_core/common/action.c ****             break;
 1768               		.loc 1 335 0
 1769 05f2 4B2D      		mov r20,r11
 1770 05f4 4F70      		andi r20,lo8(15)
 1771               	.LVL192:
 1772 05f6 612F      		mov r22,r17
 1773 05f8 C701      		movw r24,r14
 1774               	/* epilogue start */
 341:../../tmk_core/common/action.c **** 
 1775               		.loc 1 341 0
 1776 05fa 2696      		adiw r28,6
 1777 05fc 0FB6      		in __tmp_reg__,__SREG__
 1778 05fe F894      		cli
 1779 0600 DEBF      		out __SP_H__,r29
 1780 0602 0FBE      		out __SREG__,__tmp_reg__
 1781 0604 CDBF      		out __SP_L__,r28
 1782 0606 DF91      		pop r29
 1783 0608 CF91      		pop r28
 1784 060a 1F91      		pop r17
 1785               	.LVL193:
 1786 060c 0F91      		pop r16
 1787               	.LVL194:
 1788 060e FF90      		pop r15
 1789 0610 EF90      		pop r14
 1790               	.LVL195:
 1791 0612 DF90      		pop r13
 1792 0614 CF90      		pop r12
 1793 0616 BF90      		pop r11
 335:../../tmk_core/common/action.c ****             break;
 1794               		.loc 1 335 0
 1795 0618 0C94 0000 		jmp action_function
 1796               	.LVL196:
 1797               	.L63:
 1798               	/* epilogue start */
 341:../../tmk_core/common/action.c **** 
 1799               		.loc 1 341 0
 1800 061c 2696      		adiw r28,6
 1801 061e 0FB6      		in __tmp_reg__,__SREG__
 1802 0620 F894      		cli
 1803 0622 DEBF      		out __SP_H__,r29
 1804 0624 0FBE      		out __SREG__,__tmp_reg__
 1805 0626 CDBF      		out __SP_L__,r28
 1806 0628 DF91      		pop r29
 1807 062a CF91      		pop r28
 1808 062c 1F91      		pop r17
 1809               	.LVL197:
 1810 062e 0F91      		pop r16
 1811               	.LVL198:
 1812 0630 FF90      		pop r15
 1813 0632 EF90      		pop r14
 1814 0634 DF90      		pop r13
 1815 0636 CF90      		pop r12
 1816 0638 BF90      		pop r11
 1817 063a 0895      		ret
 1818               		.cfi_endproc
 1819               	.LFE104:
 1821               		.section	.text.clear_keyboard_but_mods,"ax",@progbits
 1822               	.global	clear_keyboard_but_mods
 1824               	clear_keyboard_but_mods:
 1825               	.LFB110:
 493:../../tmk_core/common/action.c ****     }
 494:../../tmk_core/common/action.c **** }
 495:../../tmk_core/common/action.c **** 
 496:../../tmk_core/common/action.c **** void clear_keyboard(void)
 497:../../tmk_core/common/action.c **** {
 498:../../tmk_core/common/action.c ****     clear_mods();
 499:../../tmk_core/common/action.c ****     clear_keyboard_but_mods();
 500:../../tmk_core/common/action.c **** }
 501:../../tmk_core/common/action.c **** 
 502:../../tmk_core/common/action.c **** void clear_keyboard_but_mods(void)
 503:../../tmk_core/common/action.c **** {
 1826               		.loc 1 503 0
 1827               		.cfi_startproc
 1828               	/* prologue: function */
 1829               	/* frame size = 0 */
 1830               	/* stack size = 0 */
 1831               	.L__stack_usage = 0
 504:../../tmk_core/common/action.c ****     clear_weak_mods();
 1832               		.loc 1 504 0
 1833 0000 0E94 0000 		call clear_weak_mods
 1834               	.LVL199:
 505:../../tmk_core/common/action.c ****     clear_keys();
 1835               		.loc 1 505 0
 1836 0004 0E94 0000 		call clear_keys
 1837               	.LVL200:
 506:../../tmk_core/common/action.c ****     send_keyboard_report();
 1838               		.loc 1 506 0
 1839 0008 0E94 0000 		call send_keyboard_report
 1840               	.LVL201:
 507:../../tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 508:../../tmk_core/common/action.c ****     mousekey_clear();
 1841               		.loc 1 508 0
 1842 000c 0E94 0000 		call mousekey_clear
 1843               	.LVL202:
 509:../../tmk_core/common/action.c ****     mousekey_send();
 1844               		.loc 1 509 0
 1845 0010 0E94 0000 		call mousekey_send
 1846               	.LVL203:
 510:../../tmk_core/common/action.c **** #endif
 511:../../tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 512:../../tmk_core/common/action.c ****     host_system_send(0);
 1847               		.loc 1 512 0
 1848 0014 80E0      		ldi r24,0
 1849 0016 90E0      		ldi r25,0
 1850 0018 0E94 0000 		call host_system_send
 1851               	.LVL204:
 513:../../tmk_core/common/action.c ****     host_consumer_send(0);
 1852               		.loc 1 513 0
 1853 001c 80E0      		ldi r24,0
 1854 001e 90E0      		ldi r25,0
 1855 0020 0C94 0000 		jmp host_consumer_send
 1856               	.LVL205:
 1857               		.cfi_endproc
 1858               	.LFE110:
 1860               		.section	.text.clear_keyboard,"ax",@progbits
 1861               	.global	clear_keyboard
 1863               	clear_keyboard:
 1864               	.LFB109:
 497:../../tmk_core/common/action.c ****     clear_mods();
 1865               		.loc 1 497 0
 1866               		.cfi_startproc
 1867               	/* prologue: function */
 1868               	/* frame size = 0 */
 1869               	/* stack size = 0 */
 1870               	.L__stack_usage = 0
 498:../../tmk_core/common/action.c ****     clear_keyboard_but_mods();
 1871               		.loc 1 498 0
 1872 0000 0E94 0000 		call clear_mods
 1873               	.LVL206:
 499:../../tmk_core/common/action.c **** }
 1874               		.loc 1 499 0
 1875 0004 0C94 0000 		jmp clear_keyboard_but_mods
 1876               	.LVL207:
 1877               		.cfi_endproc
 1878               	.LFE109:
 1880               		.section	.text.is_tap_key,"ax",@progbits
 1881               	.global	is_tap_key
 1883               	is_tap_key:
 1884               	.LFB111:
 514:../../tmk_core/common/action.c **** #endif
 515:../../tmk_core/common/action.c **** }
 516:../../tmk_core/common/action.c **** 
 517:../../tmk_core/common/action.c **** bool is_tap_key(keypos_t key)
 518:../../tmk_core/common/action.c **** {
 1885               		.loc 1 518 0
 1886               		.cfi_startproc
 1887               	.LVL208:
 1888               	/* prologue: function */
 1889               	/* frame size = 0 */
 1890               	/* stack size = 0 */
 1891               	.L__stack_usage = 0
 519:../../tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 1892               		.loc 1 519 0
 1893 0000 0E94 0000 		call layer_switch_get_action
 1894               	.LVL209:
 520:../../tmk_core/common/action.c **** 
 521:../../tmk_core/common/action.c ****     switch (action.kind.id) {
 1895               		.loc 1 521 0
 1896 0004 292F      		mov r18,r25
 1897 0006 2295      		swap r18
 1898 0008 2F70      		andi r18,lo8(15)
 1899 000a 30E0      		ldi r19,0
 1900 000c 2C30      		cpi r18,12
 1901 000e 3105      		cpc r19,__zero_reg__
 1902 0010 04F4      		brge .L174
 1903 0012 2A30      		cpi r18,10
 1904 0014 3105      		cpc r19,__zero_reg__
 1905 0016 04F4      		brge .L175
 1906 0018 2250      		subi r18,2
 1907 001a 3109      		sbc r19,__zero_reg__
 1908 001c 2230      		cpi r18,2
 1909 001e 3105      		cpc r19,__zero_reg__
 1910 0020 00F4      		brsh .L178
 1911 0022 00C0      		rjmp .L175
 1912               	.L174:
 1913 0024 2C30      		cpi r18,12
 1914 0026 3105      		cpc r19,__zero_reg__
 1915 0028 01F0      		breq .L176
 1916 002a 2F30      		cpi r18,15
 1917 002c 3105      		cpc r19,__zero_reg__
 1918 002e 01F0      		breq .L176
 1919 0030 00C0      		rjmp .L178
 1920               	.L175:
 1921               	.LVL210:
 522:../../tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 523:../../tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 524:../../tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 525:../../tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 526:../../tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1922               		.loc 1 526 0
 1923 0032 803E      		cpi r24,lo8(-32)
 1924 0034 00F0      		brlo .L179
 1925 0036 803F      		cpi r24,lo8(-16)
 1926 0038 01F4      		brne .L178
 1927 003a 00C0      		rjmp .L179
 1928               	.LVL211:
 1929               	.L176:
 527:../../tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 528:../../tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 529:../../tmk_core/common/action.c ****                     return true;
 530:../../tmk_core/common/action.c ****             }
 531:../../tmk_core/common/action.c ****             return false;
 532:../../tmk_core/common/action.c ****         case ACT_MACRO:
 533:../../tmk_core/common/action.c ****         case ACT_FUNCTION:
 534:../../tmk_core/common/action.c ****             if (action.func.opt & FUNC_TAP) { return true; }
 1930               		.loc 1 534 0
 1931 003c 93FB      		bst r25,3
 1932 003e 8827      		clr r24
 1933 0040 80F9      		bld r24,0
 1934 0042 0895      		ret
 1935               	.LVL212:
 1936               	.L178:
 535:../../tmk_core/common/action.c ****             return false;
 536:../../tmk_core/common/action.c ****     }
 537:../../tmk_core/common/action.c ****     return false;
 1937               		.loc 1 537 0
 1938 0044 80E0      		ldi r24,0
 1939               	.LVL213:
 1940 0046 0895      		ret
 1941               	.LVL214:
 1942               	.L179:
 529:../../tmk_core/common/action.c ****             }
 1943               		.loc 1 529 0
 1944 0048 81E0      		ldi r24,lo8(1)
 1945               	.LVL215:
 538:../../tmk_core/common/action.c **** }
 1946               		.loc 1 538 0
 1947 004a 0895      		ret
 1948               		.cfi_endproc
 1949               	.LFE111:
 1951               		.section	.text.debug_event,"ax",@progbits
 1952               	.global	debug_event
 1954               	debug_event:
 1955               	.LFB112:
 539:../../tmk_core/common/action.c **** 
 540:../../tmk_core/common/action.c **** 
 541:../../tmk_core/common/action.c **** /*
 542:../../tmk_core/common/action.c ****  * debug print
 543:../../tmk_core/common/action.c ****  */
 544:../../tmk_core/common/action.c **** void debug_event(keyevent_t event)
 545:../../tmk_core/common/action.c **** {
 1956               		.loc 1 545 0
 1957               		.cfi_startproc
 1958 0000 CF93      		push r28
 1959               	.LCFI16:
 1960               		.cfi_def_cfa_offset 3
 1961               		.cfi_offset 28, -2
 1962 0002 DF93      		push r29
 1963               	.LCFI17:
 1964               		.cfi_def_cfa_offset 4
 1965               		.cfi_offset 29, -3
 1966 0004 00D0      		rcall .
 1967 0006 00D0      		rcall .
 1968 0008 1F92      		push __zero_reg__
 1969               	.LCFI18:
 1970               		.cfi_def_cfa_offset 9
 1971 000a CDB7      		in r28,__SP_L__
 1972 000c DEB7      		in r29,__SP_H__
 1973               	.LCFI19:
 1974               		.cfi_def_cfa_register 28
 1975               	/* prologue: function */
 1976               	/* frame size = 5 */
 1977               	/* stack size = 7 */
 1978               	.L__stack_usage = 7
 1979               	/* epilogue start */
 546:../../tmk_core/common/action.c ****     dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.ti
 547:../../tmk_core/common/action.c **** }
 1980               		.loc 1 547 0
 1981 000e 0F90      		pop __tmp_reg__
 1982 0010 0F90      		pop __tmp_reg__
 1983 0012 0F90      		pop __tmp_reg__
 1984 0014 0F90      		pop __tmp_reg__
 1985 0016 0F90      		pop __tmp_reg__
 1986 0018 DF91      		pop r29
 1987 001a CF91      		pop r28
 1988 001c 0895      		ret
 1989               		.cfi_endproc
 1990               	.LFE112:
 1992               		.section	.text.debug_record,"ax",@progbits
 1993               	.global	debug_record
 1995               	debug_record:
 1996               	.LFB113:
 548:../../tmk_core/common/action.c **** 
 549:../../tmk_core/common/action.c **** void debug_record(keyrecord_t record)
 550:../../tmk_core/common/action.c **** {
 1997               		.loc 1 550 0
 1998               		.cfi_startproc
 1999 0000 CF93      		push r28
 2000               	.LCFI20:
 2001               		.cfi_def_cfa_offset 3
 2002               		.cfi_offset 28, -2
 2003 0002 DF93      		push r29
 2004               	.LCFI21:
 2005               		.cfi_def_cfa_offset 4
 2006               		.cfi_offset 29, -3
 2007 0004 00D0      		rcall .
 2008 0006 00D0      		rcall .
 2009 0008 00D0      		rcall .
 2010               	.LCFI22:
 2011               		.cfi_def_cfa_offset 10
 2012 000a CDB7      		in r28,__SP_L__
 2013 000c DEB7      		in r29,__SP_H__
 2014               	.LCFI23:
 2015               		.cfi_def_cfa_register 28
 2016               	/* prologue: function */
 2017               	/* frame size = 6 */
 2018               	/* stack size = 8 */
 2019               	.L__stack_usage = 8
 2020               	/* epilogue start */
 551:../../tmk_core/common/action.c ****     debug_event(record.event);
 552:../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 553:../../tmk_core/common/action.c ****     dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
 554:../../tmk_core/common/action.c **** #endif
 555:../../tmk_core/common/action.c **** }
 2021               		.loc 1 555 0
 2022 000e 2696      		adiw r28,6
 2023 0010 0FB6      		in __tmp_reg__,__SREG__
 2024 0012 F894      		cli
 2025 0014 DEBF      		out __SP_H__,r29
 2026 0016 0FBE      		out __SREG__,__tmp_reg__
 2027 0018 CDBF      		out __SP_L__,r28
 2028 001a DF91      		pop r29
 2029 001c CF91      		pop r28
 2030 001e 0895      		ret
 2031               		.cfi_endproc
 2032               	.LFE113:
 2034               		.section	.text.debug_action,"ax",@progbits
 2035               	.global	debug_action
 2037               	debug_action:
 2038               	.LFB114:
 556:../../tmk_core/common/action.c **** 
 557:../../tmk_core/common/action.c **** void debug_action(action_t action)
 558:../../tmk_core/common/action.c **** {
 2039               		.loc 1 558 0
 2040               		.cfi_startproc
 2041               	.LVL216:
 2042               	/* prologue: function */
 2043               	/* frame size = 0 */
 2044               	/* stack size = 0 */
 2045               	.L__stack_usage = 0
 2046 0000 0895      		ret
 2047               		.cfi_endproc
 2048               	.LFE114:
 2050               		.text
 2051               	.Letext0:
 2052               		.file 3 "/usr/avr/include/stdint.h"
 2053               		.file 4 "../../tmk_core/common/keycode.h"
 2054               		.file 5 "../../tmk_core/common/action_code.h"
 2055               		.file 6 "../../tmk_core/common/action_macro.h"
 2056               		.file 7 "../../tmk_core/common/action.h"
 2057               		.file 8 "../../tmk_core/common/action_tapping.h"
 2058               		.file 9 "../../tmk_core/common/action_util.h"
 2059               		.file 10 "../../tmk_core/common/host.h"
 2060               		.file 11 "../../tmk_core/common/action_layer.h"
 2061               		.file 12 "../../tmk_core/common/command.h"
 2062               		.file 13 "../../tmk_core/common/mousekey.h"
 2063               		.file 14 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action.c
     /tmp/ccvOUFcg.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccvOUFcg.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccvOUFcg.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccvOUFcg.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccvOUFcg.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccvOUFcg.s:13     .text.action_exec:0000000000000000 action_exec
     /tmp/ccvOUFcg.s:93     .text.register_code:0000000000000000 register_code
     /tmp/ccvOUFcg.s:409    .text.unregister_code:0000000000000000 unregister_code
     /tmp/ccvOUFcg.s:544    .text.register_mods:0000000000000000 register_mods
     /tmp/ccvOUFcg.s:570    .text.unregister_mods:0000000000000000 unregister_mods
     /tmp/ccvOUFcg.s:596    .text.process_action:0000000000000000 process_action
     /tmp/ccvOUFcg.s:1824   .text.clear_keyboard_but_mods:0000000000000000 clear_keyboard_but_mods
     /tmp/ccvOUFcg.s:1863   .text.clear_keyboard:0000000000000000 clear_keyboard
     /tmp/ccvOUFcg.s:1883   .text.is_tap_key:0000000000000000 is_tap_key
     /tmp/ccvOUFcg.s:1954   .text.debug_event:0000000000000000 debug_event
     /tmp/ccvOUFcg.s:1995   .text.debug_record:0000000000000000 debug_record
     /tmp/ccvOUFcg.s:2037   .text.debug_action:0000000000000000 debug_action

UNDEFINED SYMBOLS
action_tapping_process
host_keyboard_leds
add_key
send_keyboard_report
del_key
command_proc
add_mods
host_system_send
host_consumer_send
del_mods
layer_switch_get_action
layer_debug
default_layer_debug
__tablejump2__
add_weak_mods
del_weak_mods
set_oneshot_mods
clear_oneshot_mods
mousekey_on
mousekey_off
mousekey_send
default_layer_and
default_layer_xor
default_layer_or
layer_and
layer_xor
layer_or
layer_on
layer_off
layer_invert
layer_move
layer_clear
action_get_macro
action_macro_play
action_function
clear_weak_mods
clear_keys
mousekey_clear
clear_mods
