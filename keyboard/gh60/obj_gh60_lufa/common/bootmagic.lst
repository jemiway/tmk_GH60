   1               		.file	"bootmagic.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.scan_keycode,"ax",@progbits
  12               	scan_keycode:
  13               	.LFB104:
  14               		.file 1 "../../tmk_core/common/bootmagic.c"
   1:../../tmk_core/common/bootmagic.c **** #include <stdint.h>
   2:../../tmk_core/common/bootmagic.c **** #include <stdbool.h>
   3:../../tmk_core/common/bootmagic.c **** #include <util/delay.h>
   4:../../tmk_core/common/bootmagic.c **** #include "matrix.h"
   5:../../tmk_core/common/bootmagic.c **** #include "bootloader.h"
   6:../../tmk_core/common/bootmagic.c **** #include "debug.h"
   7:../../tmk_core/common/bootmagic.c **** #include "keymap.h"
   8:../../tmk_core/common/bootmagic.c **** #include "host.h"
   9:../../tmk_core/common/bootmagic.c **** #include "action_layer.h"
  10:../../tmk_core/common/bootmagic.c **** #include "eeconfig.h"
  11:../../tmk_core/common/bootmagic.c **** #include "bootmagic.h"
  12:../../tmk_core/common/bootmagic.c **** 
  13:../../tmk_core/common/bootmagic.c **** 
  14:../../tmk_core/common/bootmagic.c **** void bootmagic(void)
  15:../../tmk_core/common/bootmagic.c **** {
  16:../../tmk_core/common/bootmagic.c ****     /* check signature */
  17:../../tmk_core/common/bootmagic.c ****     if (!eeconfig_is_enabled()) {
  18:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
  19:../../tmk_core/common/bootmagic.c ****     }
  20:../../tmk_core/common/bootmagic.c **** 
  21:../../tmk_core/common/bootmagic.c ****     /* do scans in case of bounce */
  22:../../tmk_core/common/bootmagic.c ****     print("boogmagic scan: ... ");
  23:../../tmk_core/common/bootmagic.c ****     uint8_t scan = 100;
  24:../../tmk_core/common/bootmagic.c ****     while (scan--) { matrix_scan(); _delay_ms(10); }
  25:../../tmk_core/common/bootmagic.c ****     print("done.\n");
  26:../../tmk_core/common/bootmagic.c **** 
  27:../../tmk_core/common/bootmagic.c ****     /* bootmagic skip */
  28:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SKIP)) {
  29:../../tmk_core/common/bootmagic.c ****         return;
  30:../../tmk_core/common/bootmagic.c ****     }
  31:../../tmk_core/common/bootmagic.c **** 
  32:../../tmk_core/common/bootmagic.c ****     /* eeconfig clear */
  33:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
  34:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
  35:../../tmk_core/common/bootmagic.c ****     }
  36:../../tmk_core/common/bootmagic.c **** 
  37:../../tmk_core/common/bootmagic.c ****     /* bootloader */
  38:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_BOOTLOADER)) {
  39:../../tmk_core/common/bootmagic.c ****         bootloader_jump();
  40:../../tmk_core/common/bootmagic.c ****     }
  41:../../tmk_core/common/bootmagic.c **** 
  42:../../tmk_core/common/bootmagic.c ****     /* debug enable */
  43:../../tmk_core/common/bootmagic.c ****     debug_config.raw = eeconfig_read_debug();
  44:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
  45:../../tmk_core/common/bootmagic.c ****         if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
  46:../../tmk_core/common/bootmagic.c ****             debug_config.matrix = !debug_config.matrix;
  47:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
  48:../../tmk_core/common/bootmagic.c ****             debug_config.keyboard = !debug_config.keyboard;
  49:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
  50:../../tmk_core/common/bootmagic.c ****             debug_config.mouse = !debug_config.mouse;
  51:../../tmk_core/common/bootmagic.c ****         } else {
  52:../../tmk_core/common/bootmagic.c ****             debug_config.enable = !debug_config.enable;
  53:../../tmk_core/common/bootmagic.c ****         }
  54:../../tmk_core/common/bootmagic.c ****     }
  55:../../tmk_core/common/bootmagic.c ****     eeconfig_write_debug(debug_config.raw);
  56:../../tmk_core/common/bootmagic.c **** 
  57:../../tmk_core/common/bootmagic.c ****     /* keymap config */
  58:../../tmk_core/common/bootmagic.c ****     keymap_config.raw = eeconfig_read_keymap();
  59:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
  60:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
  61:../../tmk_core/common/bootmagic.c ****     }
  62:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
  63:../../tmk_core/common/bootmagic.c ****         keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
  64:../../tmk_core/common/bootmagic.c ****     }
  65:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
  66:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
  67:../../tmk_core/common/bootmagic.c ****     }
  68:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
  69:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
  70:../../tmk_core/common/bootmagic.c ****     }
  71:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_NO_GUI)) {
  72:../../tmk_core/common/bootmagic.c ****         keymap_config.no_gui = !keymap_config.no_gui;
  73:../../tmk_core/common/bootmagic.c ****     }
  74:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
  75:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
  76:../../tmk_core/common/bootmagic.c ****     }
  77:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
  78:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
  79:../../tmk_core/common/bootmagic.c ****     }
  80:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_HOST_NKRO)) {
  81:../../tmk_core/common/bootmagic.c ****         keymap_config.nkro = !keymap_config.nkro;
  82:../../tmk_core/common/bootmagic.c ****     }
  83:../../tmk_core/common/bootmagic.c ****     eeconfig_write_keymap(keymap_config.raw);
  84:../../tmk_core/common/bootmagic.c **** 
  85:../../tmk_core/common/bootmagic.c **** #ifdef NKRO_ENABLE
  86:../../tmk_core/common/bootmagic.c ****     keyboard_nkro = keymap_config.nkro;
  87:../../tmk_core/common/bootmagic.c **** #endif
  88:../../tmk_core/common/bootmagic.c **** 
  89:../../tmk_core/common/bootmagic.c ****     /* default layer */
  90:../../tmk_core/common/bootmagic.c ****     uint8_t default_layer = 0;
  91:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
  92:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
  93:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
  94:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
  95:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
  96:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
  97:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
  98:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
  99:../../tmk_core/common/bootmagic.c ****     if (default_layer) {
 100:../../tmk_core/common/bootmagic.c ****         eeconfig_write_default_layer(default_layer);
 101:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 102:../../tmk_core/common/bootmagic.c ****     } else {
 103:../../tmk_core/common/bootmagic.c ****         default_layer = eeconfig_read_default_layer();
 104:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 105:../../tmk_core/common/bootmagic.c ****     }
 106:../../tmk_core/common/bootmagic.c **** }
 107:../../tmk_core/common/bootmagic.c **** 
 108:../../tmk_core/common/bootmagic.c **** static bool scan_keycode(uint8_t keycode)
 109:../../tmk_core/common/bootmagic.c **** {
  15               		.loc 1 109 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 CF92      		push r12
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 12, -2
  22 0002 DF92      		push r13
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 13, -3
  26 0004 EF92      		push r14
  27               	.LCFI2:
  28               		.cfi_def_cfa_offset 5
  29               		.cfi_offset 14, -4
  30 0006 FF92      		push r15
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 6
  33               		.cfi_offset 15, -5
  34 0008 0F93      		push r16
  35               	.LCFI4:
  36               		.cfi_def_cfa_offset 7
  37               		.cfi_offset 16, -6
  38 000a 1F93      		push r17
  39               	.LCFI5:
  40               		.cfi_def_cfa_offset 8
  41               		.cfi_offset 17, -7
  42 000c CF93      		push r28
  43               	.LCFI6:
  44               		.cfi_def_cfa_offset 9
  45               		.cfi_offset 28, -8
  46 000e DF93      		push r29
  47               	.LCFI7:
  48               		.cfi_def_cfa_offset 10
  49               		.cfi_offset 29, -9
  50               	/* prologue: function */
  51               	/* frame size = 0 */
  52               	/* stack size = 8 */
  53               	.L__stack_usage = 8
  54 0010 D82F      		mov r29,r24
  55               	.LVL1:
  56               	.LBB6:
 110:../../tmk_core/common/bootmagic.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
  57               		.loc 1 110 0
  58 0012 C0E0      		ldi r28,0
  59               	.LBB7:
  60               	.LBB8:
 111:../../tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
 112:../../tmk_core/common/bootmagic.c ****         for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 113:../../tmk_core/common/bootmagic.c ****             if (matrix_row & ((matrix_row_t)1<<c)) {
  61               		.loc 1 113 0
  62 0014 EE24      		clr r14
  63 0016 E394      		inc r14
  64 0018 F12C      		mov r15,__zero_reg__
  65               	.LVL2:
  66               	.L7:
  67               	.LBE8:
 111:../../tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
  68               		.loc 1 111 0
  69 001a 8C2F      		mov r24,r28
  70 001c 0E94 0000 		call matrix_get_row
  71               	.LVL3:
  72 0020 6C01      		movw r12,r24
  73               	.LVL4:
  74 0022 00E0      		ldi r16,0
  75 0024 10E0      		ldi r17,0
  76               	.LVL5:
  77               	.L3:
  78               	.LBB9:
  79               		.loc 1 113 0
  80 0026 9701      		movw r18,r14
  81 0028 002E      		mov r0,r16
  82 002a 00C0      		rjmp 2f
  83               		1:
  84 002c 220F      		lsl r18
  85 002e 331F      		rol r19
  86               		2:
  87 0030 0A94      		dec r0
  88 0032 02F4      		brpl 1b
  89 0034 2C21      		and r18,r12
  90 0036 3D21      		and r19,r13
  91 0038 232B      		or r18,r19
  92 003a 01F4      		brne .L2
  93               	.L6:
  94               	.LVL6:
  95 003c 0F5F      		subi r16,-1
  96 003e 1F4F      		sbci r17,-1
  97               	.LVL7:
 112:../../tmk_core/common/bootmagic.c ****             if (matrix_row & ((matrix_row_t)1<<c)) {
  98               		.loc 1 112 0
  99 0040 0E30      		cpi r16,14
 100 0042 1105      		cpc r17,__zero_reg__
 101 0044 01F4      		brne .L3
 102 0046 00C0      		rjmp .L13
 103               	.L2:
 114:../../tmk_core/common/bootmagic.c ****                 if (keycode == keymap_key_to_keycode(0, (keypos_t){ .row = r, .col = c })) {
 104               		.loc 1 114 0
 105 0048 602F      		mov r22,r16
 106 004a 7C2F      		mov r23,r28
 107 004c 80E0      		ldi r24,0
 108 004e 0E94 0000 		call keymap_key_to_keycode
 109               	.LVL8:
 110 0052 D813      		cpse r29,r24
 111 0054 00C0      		rjmp .L6
 115:../../tmk_core/common/bootmagic.c ****                     return true;
 112               		.loc 1 115 0
 113 0056 81E0      		ldi r24,lo8(1)
 114 0058 00C0      		rjmp .L5
 115               	.L13:
 116               	.LBE9:
 117               	.LBE7:
 110:../../tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
 118               		.loc 1 110 0 discriminator 2
 119 005a CF5F      		subi r28,lo8(-(1))
 120               	.LVL9:
 121 005c C530      		cpi r28,lo8(5)
 122 005e 01F4      		brne .L7
 123               	.LBE6:
 116:../../tmk_core/common/bootmagic.c ****                 }
 117:../../tmk_core/common/bootmagic.c ****             }
 118:../../tmk_core/common/bootmagic.c ****         }
 119:../../tmk_core/common/bootmagic.c ****     }
 120:../../tmk_core/common/bootmagic.c ****     return false;
 124               		.loc 1 120 0
 125 0060 80E0      		ldi r24,0
 126               	.LVL10:
 127               	.L5:
 128               	/* epilogue start */
 121:../../tmk_core/common/bootmagic.c **** }
 129               		.loc 1 121 0
 130 0062 DF91      		pop r29
 131               	.LVL11:
 132 0064 CF91      		pop r28
 133               	.LVL12:
 134 0066 1F91      		pop r17
 135 0068 0F91      		pop r16
 136 006a FF90      		pop r15
 137 006c EF90      		pop r14
 138 006e DF90      		pop r13
 139 0070 CF90      		pop r12
 140               	.LVL13:
 141 0072 0895      		ret
 142               		.cfi_endproc
 143               	.LFE104:
 145               		.section	.text.bootmagic_scan_keycode,"ax",@progbits
 146               	.global	bootmagic_scan_keycode
 148               	bootmagic_scan_keycode:
 149               	.LFB105:
 122:../../tmk_core/common/bootmagic.c **** 
 123:../../tmk_core/common/bootmagic.c **** bool bootmagic_scan_keycode(uint8_t keycode)
 124:../../tmk_core/common/bootmagic.c **** {
 150               		.loc 1 124 0
 151               		.cfi_startproc
 152               	.LVL14:
 153 0000 CF93      		push r28
 154               	.LCFI8:
 155               		.cfi_def_cfa_offset 3
 156               		.cfi_offset 28, -2
 157               	/* prologue: function */
 158               	/* frame size = 0 */
 159               	/* stack size = 1 */
 160               	.L__stack_usage = 1
 161 0002 C82F      		mov r28,r24
 125:../../tmk_core/common/bootmagic.c ****     if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;
 162               		.loc 1 125 0
 163 0004 8CE2      		ldi r24,lo8(44)
 164               	.LVL15:
 165 0006 0E94 0000 		call scan_keycode
 166               	.LVL16:
 167 000a 8823      		tst r24
 168 000c 01F0      		breq .L15
 126:../../tmk_core/common/bootmagic.c **** 
 127:../../tmk_core/common/bootmagic.c ****     return scan_keycode(keycode);
 169               		.loc 1 127 0
 170 000e 8C2F      		mov r24,r28
 171               	/* epilogue start */
 128:../../tmk_core/common/bootmagic.c **** }
 172               		.loc 1 128 0
 173 0010 CF91      		pop r28
 174               	.LVL17:
 127:../../tmk_core/common/bootmagic.c **** }
 175               		.loc 1 127 0
 176 0012 0C94 0000 		jmp scan_keycode
 177               	.LVL18:
 178               	.L15:
 179               		.loc 1 128 0
 180 0016 80E0      		ldi r24,0
 181               	/* epilogue start */
 182 0018 CF91      		pop r28
 183               	.LVL19:
 184 001a 0895      		ret
 185               		.cfi_endproc
 186               	.LFE105:
 188               		.section	.text.bootmagic,"ax",@progbits
 189               	.global	bootmagic
 191               	bootmagic:
 192               	.LFB103:
  15:../../tmk_core/common/bootmagic.c ****     /* check signature */
 193               		.loc 1 15 0
 194               		.cfi_startproc
 195 0000 CF93      		push r28
 196               	.LCFI9:
 197               		.cfi_def_cfa_offset 3
 198               		.cfi_offset 28, -2
 199               	/* prologue: function */
 200               	/* frame size = 0 */
 201               	/* stack size = 1 */
 202               	.L__stack_usage = 1
  17:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
 203               		.loc 1 17 0
 204 0002 0E94 0000 		call eeconfig_is_enabled
 205               	.LVL20:
 206 0006 8111      		cpse r24,__zero_reg__
 207 0008 00C0      		rjmp .L17
  18:../../tmk_core/common/bootmagic.c ****     }
 208               		.loc 1 18 0
 209 000a 0E94 0000 		call eeconfig_init
 210               	.LVL21:
 211               	.L17:
  22:../../tmk_core/common/bootmagic.c ****     uint8_t scan = 100;
 212               		.loc 1 22 0
 213 000e 80E0      		ldi r24,lo8(__c.4718)
 214 0010 90E0      		ldi r25,hi8(__c.4718)
 215 0012 0E94 0000 		call xputs
 216               	.LVL22:
  24:../../tmk_core/common/bootmagic.c ****     print("done.\n");
 217               		.loc 1 24 0
 218 0016 C5E6      		ldi r28,lo8(101)
 219               	.LVL23:
 220               	.L18:
 221 0018 C150      		subi r28,lo8(-(-1))
 222               	.LVL24:
  24:../../tmk_core/common/bootmagic.c ****     print("done.\n");
 223               		.loc 1 24 0 is_stmt 0 discriminator 1
 224 001a 01F0      		breq .L98
 225               	.LVL25:
  24:../../tmk_core/common/bootmagic.c ****     print("done.\n");
 226               		.loc 1 24 0 discriminator 2
 227 001c 0E94 0000 		call matrix_scan
 228               	.LVL26:
 229               	.LBB10:
 230               	.LBB11:
 231               		.file 2 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/avr/include/util/delay.h **** #endif
  41:/usr/avr/include/util/delay.h **** 
  42:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/avr/include/util/delay.h **** #include <math.h>
  45:/usr/avr/include/util/delay.h **** 
  46:/usr/avr/include/util/delay.h **** /** \file */
  47:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/avr/include/util/delay.h ****     \code
  49:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/avr/include/util/delay.h ****     \endcode
  53:/usr/avr/include/util/delay.h **** 
  54:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/avr/include/util/delay.h ****     used.
  58:/usr/avr/include/util/delay.h **** 
  59:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/avr/include/util/delay.h **** 
  68:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/avr/include/util/delay.h **** 
  77:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/avr/include/util/delay.h **** 
  81:/usr/avr/include/util/delay.h **** */
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/avr/include/util/delay.h **** #endif
  87:/usr/avr/include/util/delay.h **** 
  88:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/avr/include/util/delay.h **** #endif
  93:/usr/avr/include/util/delay.h **** 
  94:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/avr/include/util/delay.h **** #endif
  97:/usr/avr/include/util/delay.h **** 
  98:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/avr/include/util/delay.h **** #endif
 103:/usr/avr/include/util/delay.h **** 
 104:/usr/avr/include/util/delay.h **** /**
 105:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/avr/include/util/delay.h **** 
 107:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/avr/include/util/delay.h **** 
 109:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/avr/include/util/delay.h **** 
 112:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/avr/include/util/delay.h **** 
 114:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/avr/include/util/delay.h **** 
 120:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/avr/include/util/delay.h **** 
 125:/usr/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/avr/include/util/delay.h **** 
 132:/usr/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/avr/include/util/delay.h **** 
 140:/usr/avr/include/util/delay.h ****  */
 141:/usr/avr/include/util/delay.h **** void
 142:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/avr/include/util/delay.h **** {
 144:/usr/avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/avr/include/util/delay.h **** 
 153:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/avr/include/util/delay.h **** 
 156:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/avr/include/util/delay.h **** 
 159:/usr/avr/include/util/delay.h **** 	#else
 160:/usr/avr/include/util/delay.h **** 		//round up by default
 161:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/avr/include/util/delay.h **** 	#endif
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 232               		.loc 2 164 0 is_stmt 1 discriminator 2
 233 0020 8FE3      		ldi r24,lo8(-25537)
 234 0022 9CE9      		ldi r25,hi8(-25537)
 235 0024 0197      		1: sbiw r24,1
 236 0026 01F4      		brne 1b
 237 0028 00C0      		rjmp .
 238 002a 0000      		nop
 239 002c 00C0      		rjmp .L18
 240               	.LVL27:
 241               	.L98:
 242               	.LBE11:
 243               	.LBE10:
  25:../../tmk_core/common/bootmagic.c **** 
 244               		.loc 1 25 0
 245 002e 80E0      		ldi r24,lo8(__c.4724)
 246 0030 90E0      		ldi r25,hi8(__c.4724)
 247 0032 0E94 0000 		call xputs
 248               	.LVL28:
  28:../../tmk_core/common/bootmagic.c ****         return;
 249               		.loc 1 28 0
 250 0036 89E2      		ldi r24,lo8(41)
 251 0038 0E94 0000 		call bootmagic_scan_keycode
 252               	.LVL29:
 253 003c 8111      		cpse r24,__zero_reg__
 254 003e 00C0      		rjmp .L16
  33:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
 255               		.loc 1 33 0
 256 0040 8AE2      		ldi r24,lo8(42)
 257 0042 0E94 0000 		call bootmagic_scan_keycode
 258               	.LVL30:
 259 0046 8111      		cpse r24,__zero_reg__
  34:../../tmk_core/common/bootmagic.c ****     }
 260               		.loc 1 34 0
 261 0048 0E94 0000 		call eeconfig_init
 262               	.LVL31:
 263               	.L21:
  38:../../tmk_core/common/bootmagic.c ****         bootloader_jump();
 264               		.loc 1 38 0
 265 004c 85E0      		ldi r24,lo8(5)
 266 004e 0E94 0000 		call bootmagic_scan_keycode
 267               	.LVL32:
 268 0052 8111      		cpse r24,__zero_reg__
  39:../../tmk_core/common/bootmagic.c ****     }
 269               		.loc 1 39 0
 270 0054 0E94 0000 		call bootloader_jump
 271               	.LVL33:
 272               	.L22:
  43:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
 273               		.loc 1 43 0
 274 0058 0E94 0000 		call eeconfig_read_debug
 275               	.LVL34:
 276 005c 8093 0000 		sts debug_config,r24
  44:../../tmk_core/common/bootmagic.c ****         if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
 277               		.loc 1 44 0
 278 0060 87E0      		ldi r24,lo8(7)
 279 0062 0E94 0000 		call bootmagic_scan_keycode
 280               	.LVL35:
 281 0066 8823      		tst r24
 282 0068 01F0      		breq .L23
  45:../../tmk_core/common/bootmagic.c ****             debug_config.matrix = !debug_config.matrix;
 283               		.loc 1 45 0
 284 006a 8BE1      		ldi r24,lo8(27)
 285 006c 0E94 0000 		call bootmagic_scan_keycode
 286               	.LVL36:
 287 0070 8823      		tst r24
 288 0072 01F0      		breq .L24
  46:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
 289               		.loc 1 46 0
 290 0074 8091 0000 		lds r24,debug_config
 291 0078 81FB      		bst r24,1
 292 007a 2227      		clr r18
 293 007c 20F9      		bld r18,0
 294 007e 91E0      		ldi r25,lo8(1)
 295 0080 9227      		eor r25,r18
 296 0082 90FB      		bst r25,0
 297 0084 81F9      		bld r24,1
 298 0086 00C0      		rjmp .L95
 299               	.L24:
  47:../../tmk_core/common/bootmagic.c ****             debug_config.keyboard = !debug_config.keyboard;
 300               		.loc 1 47 0
 301 0088 8EE0      		ldi r24,lo8(14)
 302 008a 0E94 0000 		call bootmagic_scan_keycode
 303               	.LVL37:
 304 008e 8823      		tst r24
 305 0090 01F0      		breq .L25
  48:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
 306               		.loc 1 48 0
 307 0092 8091 0000 		lds r24,debug_config
 308 0096 82FB      		bst r24,2
 309 0098 2227      		clr r18
 310 009a 20F9      		bld r18,0
 311 009c 91E0      		ldi r25,lo8(1)
 312 009e 9227      		eor r25,r18
 313 00a0 90FB      		bst r25,0
 314 00a2 82F9      		bld r24,2
 315               	.L95:
 316 00a4 8093 0000 		sts debug_config,r24
 317 00a8 00C0      		rjmp .L23
 318               	.L25:
  49:../../tmk_core/common/bootmagic.c ****             debug_config.mouse = !debug_config.mouse;
 319               		.loc 1 49 0
 320 00aa 80E1      		ldi r24,lo8(16)
 321 00ac 0E94 0000 		call bootmagic_scan_keycode
 322               	.LVL38:
 323 00b0 9091 0000 		lds r25,debug_config
 324 00b4 8823      		tst r24
 325 00b6 01F0      		breq .L26
  50:../../tmk_core/common/bootmagic.c ****         } else {
 326               		.loc 1 50 0
 327 00b8 93FB      		bst r25,3
 328 00ba 2227      		clr r18
 329 00bc 20F9      		bld r18,0
 330 00be 81E0      		ldi r24,lo8(1)
 331 00c0 8227      		eor r24,r18
 332 00c2 80FB      		bst r24,0
 333 00c4 93F9      		bld r25,3
 334 00c6 00C0      		rjmp .L96
 335               	.L26:
  52:../../tmk_core/common/bootmagic.c ****         }
 336               		.loc 1 52 0
 337 00c8 892F      		mov r24,r25
 338 00ca 8095      		com r24
 339 00cc 80FB      		bst r24,0
 340 00ce 90F9      		bld r25,0
 341               	.L96:
 342 00d0 9093 0000 		sts debug_config,r25
 343               	.L23:
  55:../../tmk_core/common/bootmagic.c **** 
 344               		.loc 1 55 0
 345 00d4 8091 0000 		lds r24,debug_config
 346 00d8 0E94 0000 		call eeconfig_write_debug
 347               	.LVL39:
  58:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
 348               		.loc 1 58 0
 349 00dc 0E94 0000 		call eeconfig_read_keymap
 350               	.LVL40:
 351 00e0 8093 0000 		sts keymap_config,r24
  59:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
 352               		.loc 1 59 0
 353 00e4 80EE      		ldi r24,lo8(-32)
 354 00e6 0E94 0000 		call bootmagic_scan_keycode
 355               	.LVL41:
 356 00ea 8823      		tst r24
 357 00ec 01F0      		breq .L27
  60:../../tmk_core/common/bootmagic.c ****     }
 358               		.loc 1 60 0
 359 00ee 8091 0000 		lds r24,keymap_config
 360 00f2 982F      		mov r25,r24
 361 00f4 9095      		com r25
 362 00f6 90FB      		bst r25,0
 363 00f8 80F9      		bld r24,0
 364 00fa 8093 0000 		sts keymap_config,r24
 365               	.L27:
  62:../../tmk_core/common/bootmagic.c ****         keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
 366               		.loc 1 62 0
 367 00fe 89E3      		ldi r24,lo8(57)
 368 0100 0E94 0000 		call bootmagic_scan_keycode
 369               	.LVL42:
 370 0104 8823      		tst r24
 371 0106 01F0      		breq .L28
  63:../../tmk_core/common/bootmagic.c ****     }
 372               		.loc 1 63 0
 373 0108 8091 0000 		lds r24,keymap_config
 374 010c 81FB      		bst r24,1
 375 010e 2227      		clr r18
 376 0110 20F9      		bld r18,0
 377 0112 91E0      		ldi r25,lo8(1)
 378 0114 9227      		eor r25,r18
 379 0116 90FB      		bst r25,0
 380 0118 81F9      		bld r24,1
 381 011a 8093 0000 		sts keymap_config,r24
 382               	.L28:
  65:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
 383               		.loc 1 65 0
 384 011e 82EE      		ldi r24,lo8(-30)
 385 0120 0E94 0000 		call bootmagic_scan_keycode
 386               	.LVL43:
 387 0124 8823      		tst r24
 388 0126 01F0      		breq .L29
  66:../../tmk_core/common/bootmagic.c ****     }
 389               		.loc 1 66 0
 390 0128 8091 0000 		lds r24,keymap_config
 391 012c 82FB      		bst r24,2
 392 012e 2227      		clr r18
 393 0130 20F9      		bld r18,0
 394 0132 91E0      		ldi r25,lo8(1)
 395 0134 9227      		eor r25,r18
 396 0136 90FB      		bst r25,0
 397 0138 82F9      		bld r24,2
 398 013a 8093 0000 		sts keymap_config,r24
 399               	.L29:
  68:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
 400               		.loc 1 68 0
 401 013e 86EE      		ldi r24,lo8(-26)
 402 0140 0E94 0000 		call bootmagic_scan_keycode
 403               	.LVL44:
 404 0144 8823      		tst r24
 405 0146 01F0      		breq .L30
  69:../../tmk_core/common/bootmagic.c ****     }
 406               		.loc 1 69 0
 407 0148 8091 0000 		lds r24,keymap_config
 408 014c 83FB      		bst r24,3
 409 014e 2227      		clr r18
 410 0150 20F9      		bld r18,0
 411 0152 91E0      		ldi r25,lo8(1)
 412 0154 9227      		eor r25,r18
 413 0156 90FB      		bst r25,0
 414 0158 83F9      		bld r24,3
 415 015a 8093 0000 		sts keymap_config,r24
 416               	.L30:
  71:../../tmk_core/common/bootmagic.c ****         keymap_config.no_gui = !keymap_config.no_gui;
 417               		.loc 1 71 0
 418 015e 83EE      		ldi r24,lo8(-29)
 419 0160 0E94 0000 		call bootmagic_scan_keycode
 420               	.LVL45:
 421 0164 8823      		tst r24
 422 0166 01F0      		breq .L31
  72:../../tmk_core/common/bootmagic.c ****     }
 423               		.loc 1 72 0
 424 0168 8091 0000 		lds r24,keymap_config
 425 016c 84FB      		bst r24,4
 426 016e 2227      		clr r18
 427 0170 20F9      		bld r18,0
 428 0172 91E0      		ldi r25,lo8(1)
 429 0174 9227      		eor r25,r18
 430 0176 90FB      		bst r25,0
 431 0178 84F9      		bld r24,4
 432 017a 8093 0000 		sts keymap_config,r24
 433               	.L31:
  74:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
 434               		.loc 1 74 0
 435 017e 85E3      		ldi r24,lo8(53)
 436 0180 0E94 0000 		call bootmagic_scan_keycode
 437               	.LVL46:
 438 0184 8823      		tst r24
 439 0186 01F0      		breq .L32
  75:../../tmk_core/common/bootmagic.c ****     }
 440               		.loc 1 75 0
 441 0188 8091 0000 		lds r24,keymap_config
 442 018c 85FB      		bst r24,5
 443 018e 2227      		clr r18
 444 0190 20F9      		bld r18,0
 445 0192 91E0      		ldi r25,lo8(1)
 446 0194 9227      		eor r25,r18
 447 0196 90FB      		bst r25,0
 448 0198 85F9      		bld r24,5
 449 019a 8093 0000 		sts keymap_config,r24
 450               	.L32:
  77:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
 451               		.loc 1 77 0
 452 019e 81E3      		ldi r24,lo8(49)
 453 01a0 0E94 0000 		call bootmagic_scan_keycode
 454               	.LVL47:
 455 01a4 8823      		tst r24
 456 01a6 01F0      		breq .L33
  78:../../tmk_core/common/bootmagic.c ****     }
 457               		.loc 1 78 0
 458 01a8 8091 0000 		lds r24,keymap_config
 459 01ac 86FB      		bst r24,6
 460 01ae 2227      		clr r18
 461 01b0 20F9      		bld r18,0
 462 01b2 91E0      		ldi r25,lo8(1)
 463 01b4 9227      		eor r25,r18
 464 01b6 90FB      		bst r25,0
 465 01b8 86F9      		bld r24,6
 466 01ba 8093 0000 		sts keymap_config,r24
 467               	.L33:
  80:../../tmk_core/common/bootmagic.c ****         keymap_config.nkro = !keymap_config.nkro;
 468               		.loc 1 80 0
 469 01be 81E1      		ldi r24,lo8(17)
 470 01c0 0E94 0000 		call bootmagic_scan_keycode
 471               	.LVL48:
 472 01c4 8823      		tst r24
 473 01c6 01F0      		breq .L34
  81:../../tmk_core/common/bootmagic.c ****     }
 474               		.loc 1 81 0
 475 01c8 8091 0000 		lds r24,keymap_config
 476 01cc 87FB      		bst r24,7
 477 01ce 2227      		clr r18
 478 01d0 20F9      		bld r18,0
 479 01d2 91E0      		ldi r25,lo8(1)
 480 01d4 9227      		eor r25,r18
 481 01d6 90FB      		bst r25,0
 482 01d8 87F9      		bld r24,7
 483 01da 8093 0000 		sts keymap_config,r24
 484               	.L34:
  83:../../tmk_core/common/bootmagic.c **** 
 485               		.loc 1 83 0
 486 01de 8091 0000 		lds r24,keymap_config
 487 01e2 0E94 0000 		call eeconfig_write_keymap
 488               	.LVL49:
  86:../../tmk_core/common/bootmagic.c **** #endif
 489               		.loc 1 86 0
 490 01e6 8091 0000 		lds r24,keymap_config
 491 01ea 87FB      		bst r24,7
 492 01ec 8827      		clr r24
 493 01ee 80F9      		bld r24,0
 494 01f0 8093 0000 		sts keyboard_nkro,r24
 495               	.LVL50:
  91:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
 496               		.loc 1 91 0
 497 01f4 87E2      		ldi r24,lo8(39)
 498 01f6 0E94 0000 		call bootmagic_scan_keycode
 499               	.LVL51:
 500 01fa C82F      		mov r28,r24
 501               	.LVL52:
  92:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 502               		.loc 1 92 0
 503 01fc 8EE1      		ldi r24,lo8(30)
 504               	.LVL53:
 505 01fe 0E94 0000 		call bootmagic_scan_keycode
 506               	.LVL54:
 507 0202 8111      		cpse r24,__zero_reg__
  92:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 508               		.loc 1 92 0 is_stmt 0 discriminator 1
 509 0204 C260      		ori r28,lo8(2)
 510               	.LVL55:
 511               	.L35:
  93:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 512               		.loc 1 93 0 is_stmt 1
 513 0206 8FE1      		ldi r24,lo8(31)
 514 0208 0E94 0000 		call bootmagic_scan_keycode
 515               	.LVL56:
 516 020c 8111      		cpse r24,__zero_reg__
  93:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 517               		.loc 1 93 0 is_stmt 0 discriminator 1
 518 020e C460      		ori r28,lo8(4)
 519               	.LVL57:
 520               	.L36:
  94:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 521               		.loc 1 94 0 is_stmt 1
 522 0210 80E2      		ldi r24,lo8(32)
 523 0212 0E94 0000 		call bootmagic_scan_keycode
 524               	.LVL58:
 525 0216 8111      		cpse r24,__zero_reg__
  94:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 526               		.loc 1 94 0 is_stmt 0 discriminator 1
 527 0218 C860      		ori r28,lo8(8)
 528               	.LVL59:
 529               	.L37:
  95:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 530               		.loc 1 95 0 is_stmt 1
 531 021a 81E2      		ldi r24,lo8(33)
 532 021c 0E94 0000 		call bootmagic_scan_keycode
 533               	.LVL60:
 534 0220 8111      		cpse r24,__zero_reg__
  95:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 535               		.loc 1 95 0 is_stmt 0 discriminator 1
 536 0222 C061      		ori r28,lo8(16)
 537               	.LVL61:
 538               	.L38:
  96:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 539               		.loc 1 96 0 is_stmt 1
 540 0224 82E2      		ldi r24,lo8(34)
 541 0226 0E94 0000 		call bootmagic_scan_keycode
 542               	.LVL62:
 543 022a 8111      		cpse r24,__zero_reg__
  96:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 544               		.loc 1 96 0 is_stmt 0 discriminator 1
 545 022c C062      		ori r28,lo8(32)
 546               	.LVL63:
 547               	.L39:
  97:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 548               		.loc 1 97 0 is_stmt 1
 549 022e 83E2      		ldi r24,lo8(35)
 550 0230 0E94 0000 		call bootmagic_scan_keycode
 551               	.LVL64:
 552 0234 8111      		cpse r24,__zero_reg__
  97:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 553               		.loc 1 97 0 is_stmt 0 discriminator 1
 554 0236 C064      		ori r28,lo8(64)
 555               	.LVL65:
 556               	.L40:
  98:../../tmk_core/common/bootmagic.c ****     if (default_layer) {
 557               		.loc 1 98 0 is_stmt 1
 558 0238 84E2      		ldi r24,lo8(36)
 559 023a 0E94 0000 		call bootmagic_scan_keycode
 560               	.LVL66:
 561 023e 8823      		tst r24
 562 0240 01F0      		breq .L41
  98:../../tmk_core/common/bootmagic.c ****     if (default_layer) {
 563               		.loc 1 98 0 is_stmt 0 discriminator 1
 564 0242 C068      		ori r28,lo8(-128)
 565               	.LVL67:
 566 0244 00C0      		rjmp .L42
 567               	.L41:
  99:../../tmk_core/common/bootmagic.c ****         eeconfig_write_default_layer(default_layer);
 568               		.loc 1 99 0 is_stmt 1
 569 0246 CC23      		tst r28
 570 0248 01F0      		breq .L43
 571               	.L42:
 100:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 572               		.loc 1 100 0
 573 024a 8C2F      		mov r24,r28
 574 024c 0E94 0000 		call eeconfig_write_default_layer
 575               	.LVL68:
 101:../../tmk_core/common/bootmagic.c ****     } else {
 576               		.loc 1 101 0
 577 0250 6C2F      		mov r22,r28
 578 0252 00C0      		rjmp .L97
 579               	.L43:
 103:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 580               		.loc 1 103 0
 581 0254 0E94 0000 		call eeconfig_read_default_layer
 582               	.LVL69:
 104:../../tmk_core/common/bootmagic.c ****     }
 583               		.loc 1 104 0
 584 0258 682F      		mov r22,r24
 585               	.LVL70:
 586               	.L97:
 587 025a 70E0      		ldi r23,0
 588 025c 80E0      		ldi r24,0
 589 025e 90E0      		ldi r25,0
 590               	/* epilogue start */
 106:../../tmk_core/common/bootmagic.c **** 
 591               		.loc 1 106 0
 592 0260 CF91      		pop r28
 104:../../tmk_core/common/bootmagic.c ****     }
 593               		.loc 1 104 0
 594 0262 0C94 0000 		jmp default_layer_set
 595               	.LVL71:
 596               	.L16:
 597               	/* epilogue start */
 106:../../tmk_core/common/bootmagic.c **** 
 598               		.loc 1 106 0
 599 0266 CF91      		pop r28
 600               	.LVL72:
 601 0268 0895      		ret
 602               		.cfi_endproc
 603               	.LFE103:
 605               		.section	.progmem.data.__c.4724,"a",@progbits
 608               	__c.4724:
 609 0000 646F 6E65 		.string	"done.\n"
 609      2E0A 00
 610               		.section	.progmem.data.__c.4718,"a",@progbits
 613               	__c.4718:
 614 0000 626F 6F67 		.string	"boogmagic scan: ... "
 614      6D61 6769 
 614      6320 7363 
 614      616E 3A20 
 614      2E2E 2E20 
 615               		.comm	keymap_config,1,1
 616               		.text
 617               	.Letext0:
 618               		.file 3 "/usr/avr/include/stdint.h"
 619               		.file 4 "../../tmk_core/common/matrix.h"
 620               		.file 5 "../../tmk_core/common/debug.h"
 621               		.file 6 "../../tmk_core/common/keyboard.h"
 622               		.file 7 "../../tmk_core/common/keymap.h"
 623               		.file 8 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 624               		.file 9 "../../tmk_core/common/host.h"
 625               		.file 10 "../../tmk_core/common/eeconfig.h"
 626               		.file 11 "../../tmk_core/common/bootloader.h"
 627               		.file 12 "../../tmk_core/common/avr/xprintf.h"
 628               		.file 13 "../../tmk_core/common/keycode.h"
 629               		.file 14 "../../tmk_core/common/action_layer.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 bootmagic.c
     /tmp/cc57WIKI.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc57WIKI.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc57WIKI.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc57WIKI.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc57WIKI.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc57WIKI.s:12     .text.scan_keycode:0000000000000000 scan_keycode
     /tmp/cc57WIKI.s:148    .text.bootmagic_scan_keycode:0000000000000000 bootmagic_scan_keycode
     /tmp/cc57WIKI.s:191    .text.bootmagic:0000000000000000 bootmagic
     /tmp/cc57WIKI.s:613    .progmem.data.__c.4718:0000000000000000 __c.4718
     /tmp/cc57WIKI.s:608    .progmem.data.__c.4724:0000000000000000 __c.4724
                            *COM*:0000000000000001 keymap_config

UNDEFINED SYMBOLS
matrix_get_row
keymap_key_to_keycode
eeconfig_is_enabled
eeconfig_init
xputs
matrix_scan
bootloader_jump
eeconfig_read_debug
debug_config
eeconfig_write_debug
eeconfig_read_keymap
eeconfig_write_keymap
keyboard_nkro
eeconfig_write_default_layer
eeconfig_read_default_layer
default_layer_set
__do_clear_bss
