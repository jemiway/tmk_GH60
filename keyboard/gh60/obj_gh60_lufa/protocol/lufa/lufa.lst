   1               		.file	"lufa.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.keyboard_leds,"ax",@progbits
  12               	keyboard_leds:
  13               	.LFB113:
  14               		.file 1 "../../tmk_core/protocol/lufa/lufa.c"
   1:../../tmk_core/protocol/lufa/lufa.c **** /* 
   2:../../tmk_core/protocol/lufa/lufa.c ****  * Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/protocol/lufa/lufa.c ****  * This file is based on:
   4:../../tmk_core/protocol/lufa/lufa.c ****  *     LUFA-120219/Demos/Device/Lowlevel/KeyboardMouse
   5:../../tmk_core/protocol/lufa/lufa.c ****  *     LUFA-120219/Demos/Device/Lowlevel/GenericHID
   6:../../tmk_core/protocol/lufa/lufa.c ****  */
   7:../../tmk_core/protocol/lufa/lufa.c **** 
   8:../../tmk_core/protocol/lufa/lufa.c **** /*
   9:../../tmk_core/protocol/lufa/lufa.c ****              LUFA Library
  10:../../tmk_core/protocol/lufa/lufa.c ****      Copyright (C) Dean Camera, 2012.
  11:../../tmk_core/protocol/lufa/lufa.c **** 
  12:../../tmk_core/protocol/lufa/lufa.c ****   dean [at] fourwalledcubicle [dot] com
  13:../../tmk_core/protocol/lufa/lufa.c ****            www.lufa-lib.org
  14:../../tmk_core/protocol/lufa/lufa.c **** */
  15:../../tmk_core/protocol/lufa/lufa.c **** 
  16:../../tmk_core/protocol/lufa/lufa.c **** /*
  17:../../tmk_core/protocol/lufa/lufa.c ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  18:../../tmk_core/protocol/lufa/lufa.c ****   Copyright 2010  Denver Gingerich (denver [at] ossguy [dot] com)
  19:../../tmk_core/protocol/lufa/lufa.c **** 
  20:../../tmk_core/protocol/lufa/lufa.c ****   Permission to use, copy, modify, distribute, and sell this
  21:../../tmk_core/protocol/lufa/lufa.c ****   software and its documentation for any purpose is hereby granted
  22:../../tmk_core/protocol/lufa/lufa.c ****   without fee, provided that the above copyright notice appear in
  23:../../tmk_core/protocol/lufa/lufa.c ****   all copies and that both that the copyright notice and this
  24:../../tmk_core/protocol/lufa/lufa.c ****   permission notice and warranty disclaimer appear in supporting
  25:../../tmk_core/protocol/lufa/lufa.c ****   documentation, and that the name of the author not be used in
  26:../../tmk_core/protocol/lufa/lufa.c ****   advertising or publicity pertaining to distribution of the
  27:../../tmk_core/protocol/lufa/lufa.c ****   software without specific, written prior permission.
  28:../../tmk_core/protocol/lufa/lufa.c **** 
  29:../../tmk_core/protocol/lufa/lufa.c ****   The author disclaim all warranties with regard to this
  30:../../tmk_core/protocol/lufa/lufa.c ****   software, including all implied warranties of merchantability
  31:../../tmk_core/protocol/lufa/lufa.c ****   and fitness.  In no event shall the author be liable for any
  32:../../tmk_core/protocol/lufa/lufa.c ****   special, indirect or consequential damages or any damages
  33:../../tmk_core/protocol/lufa/lufa.c ****   whatsoever resulting from loss of use, data or profits, whether
  34:../../tmk_core/protocol/lufa/lufa.c ****   in an action of contract, negligence or other tortious action,
  35:../../tmk_core/protocol/lufa/lufa.c ****   arising out of or in connection with the use or performance of
  36:../../tmk_core/protocol/lufa/lufa.c ****   this software.
  37:../../tmk_core/protocol/lufa/lufa.c **** */
  38:../../tmk_core/protocol/lufa/lufa.c **** 
  39:../../tmk_core/protocol/lufa/lufa.c **** #include "report.h"
  40:../../tmk_core/protocol/lufa/lufa.c **** #include "host.h"
  41:../../tmk_core/protocol/lufa/lufa.c **** #include "host_driver.h"
  42:../../tmk_core/protocol/lufa/lufa.c **** #include "keyboard.h"
  43:../../tmk_core/protocol/lufa/lufa.c **** #include "action.h"
  44:../../tmk_core/protocol/lufa/lufa.c **** #include "led.h"
  45:../../tmk_core/protocol/lufa/lufa.c **** #include "sendchar.h"
  46:../../tmk_core/protocol/lufa/lufa.c **** #include "debug.h"
  47:../../tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
  48:../../tmk_core/protocol/lufa/lufa.c **** #include "sleep_led.h"
  49:../../tmk_core/protocol/lufa/lufa.c **** #endif
  50:../../tmk_core/protocol/lufa/lufa.c **** #include "suspend.h"
  51:../../tmk_core/protocol/lufa/lufa.c **** 
  52:../../tmk_core/protocol/lufa/lufa.c **** #include "descriptor.h"
  53:../../tmk_core/protocol/lufa/lufa.c **** #include "lufa.h"
  54:../../tmk_core/protocol/lufa/lufa.c **** 
  55:../../tmk_core/protocol/lufa/lufa.c **** uint8_t keyboard_idle = 0;
  56:../../tmk_core/protocol/lufa/lufa.c **** /* 0: Boot Protocol, 1: Report Protocol(default) */
  57:../../tmk_core/protocol/lufa/lufa.c **** uint8_t keyboard_protocol = 1;
  58:../../tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_led_stats = 0;
  59:../../tmk_core/protocol/lufa/lufa.c **** 
  60:../../tmk_core/protocol/lufa/lufa.c **** static report_keyboard_t keyboard_report_sent;
  61:../../tmk_core/protocol/lufa/lufa.c **** 
  62:../../tmk_core/protocol/lufa/lufa.c **** 
  63:../../tmk_core/protocol/lufa/lufa.c **** /* Host driver */
  64:../../tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_leds(void);
  65:../../tmk_core/protocol/lufa/lufa.c **** static void send_keyboard(report_keyboard_t *report);
  66:../../tmk_core/protocol/lufa/lufa.c **** static void send_mouse(report_mouse_t *report);
  67:../../tmk_core/protocol/lufa/lufa.c **** static void send_system(uint16_t data);
  68:../../tmk_core/protocol/lufa/lufa.c **** static void send_consumer(uint16_t data);
  69:../../tmk_core/protocol/lufa/lufa.c **** host_driver_t lufa_driver = {
  70:../../tmk_core/protocol/lufa/lufa.c ****     keyboard_leds,
  71:../../tmk_core/protocol/lufa/lufa.c ****     send_keyboard,
  72:../../tmk_core/protocol/lufa/lufa.c ****     send_mouse,
  73:../../tmk_core/protocol/lufa/lufa.c ****     send_system,
  74:../../tmk_core/protocol/lufa/lufa.c ****     send_consumer
  75:../../tmk_core/protocol/lufa/lufa.c **** };
  76:../../tmk_core/protocol/lufa/lufa.c **** 
  77:../../tmk_core/protocol/lufa/lufa.c **** 
  78:../../tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
  79:../../tmk_core/protocol/lufa/lufa.c ****  * Console
  80:../../tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
  81:../../tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
  82:../../tmk_core/protocol/lufa/lufa.c **** static void Console_Task(void)
  83:../../tmk_core/protocol/lufa/lufa.c **** {
  84:../../tmk_core/protocol/lufa/lufa.c ****     /* Device must be connected and configured for the task to run */
  85:../../tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
  86:../../tmk_core/protocol/lufa/lufa.c ****         return;
  87:../../tmk_core/protocol/lufa/lufa.c **** 
  88:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
  89:../../tmk_core/protocol/lufa/lufa.c **** 
  90:../../tmk_core/protocol/lufa/lufa.c **** #if 0
  91:../../tmk_core/protocol/lufa/lufa.c ****     // TODO: impl receivechar()/recvchar()
  92:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_OUT_EPNUM);
  93:../../tmk_core/protocol/lufa/lufa.c **** 
  94:../../tmk_core/protocol/lufa/lufa.c ****     /* Check to see if a packet has been sent from the host */
  95:../../tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsOUTReceived())
  96:../../tmk_core/protocol/lufa/lufa.c ****     {
  97:../../tmk_core/protocol/lufa/lufa.c ****         /* Check to see if the packet contains data */
  98:../../tmk_core/protocol/lufa/lufa.c ****         if (Endpoint_IsReadWriteAllowed())
  99:../../tmk_core/protocol/lufa/lufa.c ****         {
 100:../../tmk_core/protocol/lufa/lufa.c ****             /* Create a temporary buffer to hold the read in report from the host */
 101:../../tmk_core/protocol/lufa/lufa.c ****             uint8_t ConsoleData[CONSOLE_EPSIZE];
 102:../../tmk_core/protocol/lufa/lufa.c ****  
 103:../../tmk_core/protocol/lufa/lufa.c ****             /* Read Console Report Data */
 104:../../tmk_core/protocol/lufa/lufa.c ****             Endpoint_Read_Stream_LE(&ConsoleData, sizeof(ConsoleData), NULL);
 105:../../tmk_core/protocol/lufa/lufa.c ****  
 106:../../tmk_core/protocol/lufa/lufa.c ****             /* Process Console Report Data */
 107:../../tmk_core/protocol/lufa/lufa.c ****             //ProcessConsoleHIDReport(ConsoleData);
 108:../../tmk_core/protocol/lufa/lufa.c ****         }
 109:../../tmk_core/protocol/lufa/lufa.c **** 
 110:../../tmk_core/protocol/lufa/lufa.c ****         /* Finalize the stream transfer to send the last packet */
 111:../../tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearOUT();
 112:../../tmk_core/protocol/lufa/lufa.c ****     }
 113:../../tmk_core/protocol/lufa/lufa.c **** #endif
 114:../../tmk_core/protocol/lufa/lufa.c **** 
 115:../../tmk_core/protocol/lufa/lufa.c ****     /* IN packet */
 116:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
 117:../../tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 118:../../tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 119:../../tmk_core/protocol/lufa/lufa.c ****         return;
 120:../../tmk_core/protocol/lufa/lufa.c ****     }
 121:../../tmk_core/protocol/lufa/lufa.c **** 
 122:../../tmk_core/protocol/lufa/lufa.c ****     // fill empty bank
 123:../../tmk_core/protocol/lufa/lufa.c ****     while (Endpoint_IsReadWriteAllowed())
 124:../../tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_8(0);
 125:../../tmk_core/protocol/lufa/lufa.c **** 
 126:../../tmk_core/protocol/lufa/lufa.c ****     // flash senchar packet
 127:../../tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsINReady()) {
 128:../../tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 129:../../tmk_core/protocol/lufa/lufa.c ****     }
 130:../../tmk_core/protocol/lufa/lufa.c **** 
 131:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 132:../../tmk_core/protocol/lufa/lufa.c **** }
 133:../../tmk_core/protocol/lufa/lufa.c **** #else
 134:../../tmk_core/protocol/lufa/lufa.c **** static void Console_Task(void)
 135:../../tmk_core/protocol/lufa/lufa.c **** {
 136:../../tmk_core/protocol/lufa/lufa.c **** }
 137:../../tmk_core/protocol/lufa/lufa.c **** #endif
 138:../../tmk_core/protocol/lufa/lufa.c **** 
 139:../../tmk_core/protocol/lufa/lufa.c **** 
 140:../../tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 141:../../tmk_core/protocol/lufa/lufa.c ****  * USB Events
 142:../../tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 143:../../tmk_core/protocol/lufa/lufa.c **** /*
 144:../../tmk_core/protocol/lufa/lufa.c ****  * Event Order of Plug in:
 145:../../tmk_core/protocol/lufa/lufa.c ****  * 0) EVENT_USB_Device_Connect
 146:../../tmk_core/protocol/lufa/lufa.c ****  * 1) EVENT_USB_Device_Suspend
 147:../../tmk_core/protocol/lufa/lufa.c ****  * 2) EVENT_USB_Device_Reset
 148:../../tmk_core/protocol/lufa/lufa.c ****  * 3) EVENT_USB_Device_Wake
 149:../../tmk_core/protocol/lufa/lufa.c **** */
 150:../../tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Connect(void)
 151:../../tmk_core/protocol/lufa/lufa.c **** {
 152:../../tmk_core/protocol/lufa/lufa.c ****     print("[C]");
 153:../../tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 154:../../tmk_core/protocol/lufa/lufa.c ****     if (!USB_IsInitialized) {
 155:../../tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 156:../../tmk_core/protocol/lufa/lufa.c ****         USB_Init();
 157:../../tmk_core/protocol/lufa/lufa.c ****         USB_Device_EnableSOFEvents();
 158:../../tmk_core/protocol/lufa/lufa.c ****     }
 159:../../tmk_core/protocol/lufa/lufa.c **** }
 160:../../tmk_core/protocol/lufa/lufa.c **** 
 161:../../tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Disconnect(void)
 162:../../tmk_core/protocol/lufa/lufa.c **** {
 163:../../tmk_core/protocol/lufa/lufa.c ****     print("[D]");
 164:../../tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 165:../../tmk_core/protocol/lufa/lufa.c ****     USB_IsInitialized = false;
 166:../../tmk_core/protocol/lufa/lufa.c **** /* TODO: This doesn't work. After several plug in/outs can not be enumerated. 
 167:../../tmk_core/protocol/lufa/lufa.c ****     if (USB_IsInitialized) {
 168:../../tmk_core/protocol/lufa/lufa.c ****         USB_Disable();  // Disable all interrupts
 169:../../tmk_core/protocol/lufa/lufa.c **** 	USB_Controller_Enable();
 170:../../tmk_core/protocol/lufa/lufa.c ****         USB_INT_Enable(USB_INT_VBUSTI);
 171:../../tmk_core/protocol/lufa/lufa.c ****     }
 172:../../tmk_core/protocol/lufa/lufa.c **** */
 173:../../tmk_core/protocol/lufa/lufa.c **** }
 174:../../tmk_core/protocol/lufa/lufa.c **** 
 175:../../tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Reset(void)
 176:../../tmk_core/protocol/lufa/lufa.c **** {
 177:../../tmk_core/protocol/lufa/lufa.c ****     print("[R]");
 178:../../tmk_core/protocol/lufa/lufa.c **** }
 179:../../tmk_core/protocol/lufa/lufa.c **** 
 180:../../tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Suspend()
 181:../../tmk_core/protocol/lufa/lufa.c **** {
 182:../../tmk_core/protocol/lufa/lufa.c ****     print("[S]");
 183:../../tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 184:../../tmk_core/protocol/lufa/lufa.c ****     sleep_led_enable();
 185:../../tmk_core/protocol/lufa/lufa.c **** #endif
 186:../../tmk_core/protocol/lufa/lufa.c **** }
 187:../../tmk_core/protocol/lufa/lufa.c **** 
 188:../../tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_WakeUp()
 189:../../tmk_core/protocol/lufa/lufa.c **** {
 190:../../tmk_core/protocol/lufa/lufa.c ****     print("[W]");
 191:../../tmk_core/protocol/lufa/lufa.c ****     suspend_wakeup_init();
 192:../../tmk_core/protocol/lufa/lufa.c **** 
 193:../../tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 194:../../tmk_core/protocol/lufa/lufa.c ****     sleep_led_disable();
 195:../../tmk_core/protocol/lufa/lufa.c ****     // NOTE: converters may not accept this
 196:../../tmk_core/protocol/lufa/lufa.c ****     led_set(host_keyboard_leds());
 197:../../tmk_core/protocol/lufa/lufa.c **** #endif
 198:../../tmk_core/protocol/lufa/lufa.c **** }
 199:../../tmk_core/protocol/lufa/lufa.c **** 
 200:../../tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 201:../../tmk_core/protocol/lufa/lufa.c **** static bool console_flush = false;
 202:../../tmk_core/protocol/lufa/lufa.c **** #define CONSOLE_FLUSH_SET(b)   do { \
 203:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t sreg = SREG; cli(); console_flush = b; SREG = sreg; \
 204:../../tmk_core/protocol/lufa/lufa.c **** } while (0)
 205:../../tmk_core/protocol/lufa/lufa.c **** 
 206:../../tmk_core/protocol/lufa/lufa.c **** // called every 1ms
 207:../../tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_StartOfFrame(void)
 208:../../tmk_core/protocol/lufa/lufa.c **** {
 209:../../tmk_core/protocol/lufa/lufa.c ****     static uint8_t count;
 210:../../tmk_core/protocol/lufa/lufa.c ****     if (++count % 50) return;
 211:../../tmk_core/protocol/lufa/lufa.c ****     count = 0;
 212:../../tmk_core/protocol/lufa/lufa.c **** 
 213:../../tmk_core/protocol/lufa/lufa.c ****     if (!console_flush) return;
 214:../../tmk_core/protocol/lufa/lufa.c ****     Console_Task();
 215:../../tmk_core/protocol/lufa/lufa.c ****     console_flush = false;
 216:../../tmk_core/protocol/lufa/lufa.c **** }
 217:../../tmk_core/protocol/lufa/lufa.c **** #endif
 218:../../tmk_core/protocol/lufa/lufa.c **** 
 219:../../tmk_core/protocol/lufa/lufa.c **** /** Event handler for the USB_ConfigurationChanged event.
 220:../../tmk_core/protocol/lufa/lufa.c ****  * This is fired when the host sets the current configuration of the USB device after enumeration.
 221:../../tmk_core/protocol/lufa/lufa.c ****  *
 222:../../tmk_core/protocol/lufa/lufa.c ****  * ATMega32u2 supports dual bank(ping-pong mode) only on endpoint 3 and 4,
 223:../../tmk_core/protocol/lufa/lufa.c ****  * it is safe to use singl bank for all endpoints.
 224:../../tmk_core/protocol/lufa/lufa.c ****  */
 225:../../tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_ConfigurationChanged(void)
 226:../../tmk_core/protocol/lufa/lufa.c **** {
 227:../../tmk_core/protocol/lufa/lufa.c ****     bool ConfigSuccess = true;
 228:../../tmk_core/protocol/lufa/lufa.c **** 
 229:../../tmk_core/protocol/lufa/lufa.c ****     /* Setup Keyboard HID Report Endpoints */
 230:../../tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(KEYBOARD_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 231:../../tmk_core/protocol/lufa/lufa.c ****                                      KEYBOARD_EPSIZE, ENDPOINT_BANK_SINGLE);
 232:../../tmk_core/protocol/lufa/lufa.c **** 
 233:../../tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 234:../../tmk_core/protocol/lufa/lufa.c ****     /* Setup Mouse HID Report Endpoint */
 235:../../tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(MOUSE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 236:../../tmk_core/protocol/lufa/lufa.c ****                                      MOUSE_EPSIZE, ENDPOINT_BANK_SINGLE);
 237:../../tmk_core/protocol/lufa/lufa.c **** #endif
 238:../../tmk_core/protocol/lufa/lufa.c **** 
 239:../../tmk_core/protocol/lufa/lufa.c **** #ifdef EXTRAKEY_ENABLE
 240:../../tmk_core/protocol/lufa/lufa.c ****     /* Setup Extra HID Report Endpoint */
 241:../../tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(EXTRAKEY_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 242:../../tmk_core/protocol/lufa/lufa.c ****                                      EXTRAKEY_EPSIZE, ENDPOINT_BANK_SINGLE);
 243:../../tmk_core/protocol/lufa/lufa.c **** #endif
 244:../../tmk_core/protocol/lufa/lufa.c **** 
 245:../../tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 246:../../tmk_core/protocol/lufa/lufa.c ****     /* Setup Console HID Report Endpoints */
 247:../../tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(CONSOLE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 248:../../tmk_core/protocol/lufa/lufa.c ****                                      CONSOLE_EPSIZE, ENDPOINT_BANK_SINGLE);
 249:../../tmk_core/protocol/lufa/lufa.c **** #if 0
 250:../../tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(CONSOLE_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT,
 251:../../tmk_core/protocol/lufa/lufa.c ****                                      CONSOLE_EPSIZE, ENDPOINT_BANK_SINGLE);
 252:../../tmk_core/protocol/lufa/lufa.c **** #endif
 253:../../tmk_core/protocol/lufa/lufa.c **** #endif
 254:../../tmk_core/protocol/lufa/lufa.c **** 
 255:../../tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 256:../../tmk_core/protocol/lufa/lufa.c ****     /* Setup NKRO HID Report Endpoints */
 257:../../tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(NKRO_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 258:../../tmk_core/protocol/lufa/lufa.c ****                                      NKRO_EPSIZE, ENDPOINT_BANK_SINGLE);
 259:../../tmk_core/protocol/lufa/lufa.c **** #endif
 260:../../tmk_core/protocol/lufa/lufa.c **** }
 261:../../tmk_core/protocol/lufa/lufa.c **** 
 262:../../tmk_core/protocol/lufa/lufa.c **** /*
 263:../../tmk_core/protocol/lufa/lufa.c **** Appendix G: HID Request Support Requirements
 264:../../tmk_core/protocol/lufa/lufa.c **** 
 265:../../tmk_core/protocol/lufa/lufa.c **** The following table enumerates the requests that need to be supported by various types of HID class
 266:../../tmk_core/protocol/lufa/lufa.c **** 
 267:../../tmk_core/protocol/lufa/lufa.c **** Device type     GetReport   SetReport   GetIdle     SetIdle     GetProtocol SetProtocol
 268:../../tmk_core/protocol/lufa/lufa.c **** ------------------------------------------------------------------------------------------
 269:../../tmk_core/protocol/lufa/lufa.c **** Boot Mouse      Required    Optional    Optional    Optional    Required    Required
 270:../../tmk_core/protocol/lufa/lufa.c **** Non-Boot Mouse  Required    Optional    Optional    Optional    Optional    Optional
 271:../../tmk_core/protocol/lufa/lufa.c **** Boot Keyboard   Required    Optional    Required    Required    Required    Required
 272:../../tmk_core/protocol/lufa/lufa.c **** Non-Boot Keybrd Required    Optional    Required    Required    Optional    Optional
 273:../../tmk_core/protocol/lufa/lufa.c **** Other Device    Required    Optional    Optional    Optional    Optional    Optional
 274:../../tmk_core/protocol/lufa/lufa.c **** */
 275:../../tmk_core/protocol/lufa/lufa.c **** /** Event handler for the USB_ControlRequest event.
 276:../../tmk_core/protocol/lufa/lufa.c ****  *  This is fired before passing along unhandled control requests to the library for processing int
 277:../../tmk_core/protocol/lufa/lufa.c ****  */
 278:../../tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_ControlRequest(void)
 279:../../tmk_core/protocol/lufa/lufa.c **** {
 280:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t* ReportData = NULL;
 281:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 282:../../tmk_core/protocol/lufa/lufa.c **** 
 283:../../tmk_core/protocol/lufa/lufa.c ****     /* Handle HID Class specific requests */
 284:../../tmk_core/protocol/lufa/lufa.c ****     switch (USB_ControlRequest.bRequest)
 285:../../tmk_core/protocol/lufa/lufa.c ****     {
 286:../../tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetReport:
 287:../../tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 288:../../tmk_core/protocol/lufa/lufa.c ****             {
 289:../../tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 290:../../tmk_core/protocol/lufa/lufa.c **** 
 291:../../tmk_core/protocol/lufa/lufa.c ****                 // Interface
 292:../../tmk_core/protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 293:../../tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 294:../../tmk_core/protocol/lufa/lufa.c ****                     // TODO: test/check
 295:../../tmk_core/protocol/lufa/lufa.c ****                     ReportData = (uint8_t*)&keyboard_report_sent;
 296:../../tmk_core/protocol/lufa/lufa.c ****                     ReportSize = sizeof(keyboard_report_sent);
 297:../../tmk_core/protocol/lufa/lufa.c ****                     break;
 298:../../tmk_core/protocol/lufa/lufa.c ****                 }
 299:../../tmk_core/protocol/lufa/lufa.c **** 
 300:../../tmk_core/protocol/lufa/lufa.c ****                 /* Write the report data to the control endpoint */
 301:../../tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 302:../../tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearOUT();
 303:../../tmk_core/protocol/lufa/lufa.c ****             }
 304:../../tmk_core/protocol/lufa/lufa.c **** 
 305:../../tmk_core/protocol/lufa/lufa.c ****             break;
 306:../../tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetReport:
 307:../../tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 308:../../tmk_core/protocol/lufa/lufa.c ****             {
 309:../../tmk_core/protocol/lufa/lufa.c **** 
 310:../../tmk_core/protocol/lufa/lufa.c ****                 // Interface
 311:../../tmk_core/protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 312:../../tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 313:../../tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 314:../../tmk_core/protocol/lufa/lufa.c ****                 case NKRO_INTERFACE:
 315:../../tmk_core/protocol/lufa/lufa.c **** #endif
 316:../../tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 317:../../tmk_core/protocol/lufa/lufa.c **** 
 318:../../tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsOUTReceived())) {
 319:../../tmk_core/protocol/lufa/lufa.c ****                         if (USB_DeviceState == DEVICE_STATE_Unattached)
 320:../../tmk_core/protocol/lufa/lufa.c ****                           return;
 321:../../tmk_core/protocol/lufa/lufa.c ****                     }
 322:../../tmk_core/protocol/lufa/lufa.c ****                     keyboard_led_stats = Endpoint_Read_8();
 323:../../tmk_core/protocol/lufa/lufa.c **** 
 324:../../tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearOUT();
 325:../../tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 326:../../tmk_core/protocol/lufa/lufa.c ****                     break;
 327:../../tmk_core/protocol/lufa/lufa.c ****                 }
 328:../../tmk_core/protocol/lufa/lufa.c **** 
 329:../../tmk_core/protocol/lufa/lufa.c ****             }
 330:../../tmk_core/protocol/lufa/lufa.c **** 
 331:../../tmk_core/protocol/lufa/lufa.c ****             break;
 332:../../tmk_core/protocol/lufa/lufa.c **** 
 333:../../tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetProtocol:
 334:../../tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 335:../../tmk_core/protocol/lufa/lufa.c ****             {
 336:../../tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 337:../../tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 338:../../tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsINReady()));
 339:../../tmk_core/protocol/lufa/lufa.c ****                     Endpoint_Write_8(keyboard_protocol);
 340:../../tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearIN();
 341:../../tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 342:../../tmk_core/protocol/lufa/lufa.c ****                 }
 343:../../tmk_core/protocol/lufa/lufa.c ****             }
 344:../../tmk_core/protocol/lufa/lufa.c **** 
 345:../../tmk_core/protocol/lufa/lufa.c ****             break;
 346:../../tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetProtocol:
 347:../../tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 348:../../tmk_core/protocol/lufa/lufa.c ****             {
 349:../../tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 350:../../tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 351:../../tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 352:../../tmk_core/protocol/lufa/lufa.c **** 
 353:../../tmk_core/protocol/lufa/lufa.c ****                     keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
 354:../../tmk_core/protocol/lufa/lufa.c ****                     clear_keyboard();
 355:../../tmk_core/protocol/lufa/lufa.c ****                 }
 356:../../tmk_core/protocol/lufa/lufa.c ****             }
 357:../../tmk_core/protocol/lufa/lufa.c **** 
 358:../../tmk_core/protocol/lufa/lufa.c ****             break;
 359:../../tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetIdle:
 360:../../tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 361:../../tmk_core/protocol/lufa/lufa.c ****             {
 362:../../tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 363:../../tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 364:../../tmk_core/protocol/lufa/lufa.c **** 
 365:../../tmk_core/protocol/lufa/lufa.c ****                 keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
 366:../../tmk_core/protocol/lufa/lufa.c ****             }
 367:../../tmk_core/protocol/lufa/lufa.c **** 
 368:../../tmk_core/protocol/lufa/lufa.c ****             break;
 369:../../tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetIdle:
 370:../../tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 371:../../tmk_core/protocol/lufa/lufa.c ****             {
 372:../../tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 373:../../tmk_core/protocol/lufa/lufa.c ****                 while (!(Endpoint_IsINReady()));
 374:../../tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_8(keyboard_idle);
 375:../../tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearIN();
 376:../../tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 377:../../tmk_core/protocol/lufa/lufa.c ****             }
 378:../../tmk_core/protocol/lufa/lufa.c **** 
 379:../../tmk_core/protocol/lufa/lufa.c ****             break;
 380:../../tmk_core/protocol/lufa/lufa.c ****     }
 381:../../tmk_core/protocol/lufa/lufa.c **** }
 382:../../tmk_core/protocol/lufa/lufa.c **** 
 383:../../tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 384:../../tmk_core/protocol/lufa/lufa.c ****  * Host driver 
 385:../../tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 386:../../tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_leds(void)
 387:../../tmk_core/protocol/lufa/lufa.c **** {
  15               		.loc 1 387 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
 388:../../tmk_core/protocol/lufa/lufa.c ****     return keyboard_led_stats;
 389:../../tmk_core/protocol/lufa/lufa.c **** }
  21               		.loc 1 389 0
  22 0000 8091 0000 		lds r24,keyboard_led_stats
  23 0004 0895      		ret
  24               		.cfi_endproc
  25               	.LFE113:
  27               		.section	.text.sendchar,"ax",@progbits
  28               	.global	sendchar
  30               	sendchar:
  31               	.LFB118:
 390:../../tmk_core/protocol/lufa/lufa.c **** 
 391:../../tmk_core/protocol/lufa/lufa.c **** static void send_keyboard(report_keyboard_t *report)
 392:../../tmk_core/protocol/lufa/lufa.c **** {
 393:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 394:../../tmk_core/protocol/lufa/lufa.c **** 
 395:../../tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 396:../../tmk_core/protocol/lufa/lufa.c ****         return;
 397:../../tmk_core/protocol/lufa/lufa.c **** 
 398:../../tmk_core/protocol/lufa/lufa.c ****     /* Select the Keyboard Report Endpoint */
 399:../../tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 400:../../tmk_core/protocol/lufa/lufa.c ****     if (keyboard_protocol && keyboard_nkro) {
 401:../../tmk_core/protocol/lufa/lufa.c ****         /* Report protocol - NKRO */
 402:../../tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(NKRO_IN_EPNUM);
 403:../../tmk_core/protocol/lufa/lufa.c **** 
 404:../../tmk_core/protocol/lufa/lufa.c ****         /* Check if write ready for a polling interval around 1ms */
 405:../../tmk_core/protocol/lufa/lufa.c ****         while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
 406:../../tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 407:../../tmk_core/protocol/lufa/lufa.c **** 
 408:../../tmk_core/protocol/lufa/lufa.c ****         /* Write Keyboard Report Data */
 409:../../tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
 410:../../tmk_core/protocol/lufa/lufa.c ****     }
 411:../../tmk_core/protocol/lufa/lufa.c ****     else
 412:../../tmk_core/protocol/lufa/lufa.c **** #endif
 413:../../tmk_core/protocol/lufa/lufa.c ****     {
 414:../../tmk_core/protocol/lufa/lufa.c ****         /* Boot protocol */
 415:../../tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);
 416:../../tmk_core/protocol/lufa/lufa.c **** 
 417:../../tmk_core/protocol/lufa/lufa.c ****         /* Check if write ready for a polling interval around 10ms */
 418:../../tmk_core/protocol/lufa/lufa.c ****         while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 419:../../tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 420:../../tmk_core/protocol/lufa/lufa.c **** 
 421:../../tmk_core/protocol/lufa/lufa.c ****         /* Write Keyboard Report Data */
 422:../../tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
 423:../../tmk_core/protocol/lufa/lufa.c ****     }
 424:../../tmk_core/protocol/lufa/lufa.c **** 
 425:../../tmk_core/protocol/lufa/lufa.c ****     /* Finalize the stream transfer to send the last packet */
 426:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 427:../../tmk_core/protocol/lufa/lufa.c **** 
 428:../../tmk_core/protocol/lufa/lufa.c ****     keyboard_report_sent = *report;
 429:../../tmk_core/protocol/lufa/lufa.c **** }
 430:../../tmk_core/protocol/lufa/lufa.c **** 
 431:../../tmk_core/protocol/lufa/lufa.c **** static void send_mouse(report_mouse_t *report)
 432:../../tmk_core/protocol/lufa/lufa.c **** {
 433:../../tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 434:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 435:../../tmk_core/protocol/lufa/lufa.c **** 
 436:../../tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 437:../../tmk_core/protocol/lufa/lufa.c ****         return;
 438:../../tmk_core/protocol/lufa/lufa.c **** 
 439:../../tmk_core/protocol/lufa/lufa.c ****     /* Select the Mouse Report Endpoint */
 440:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);
 441:../../tmk_core/protocol/lufa/lufa.c **** 
 442:../../tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 443:../../tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 444:../../tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 445:../../tmk_core/protocol/lufa/lufa.c **** 
 446:../../tmk_core/protocol/lufa/lufa.c ****     /* Write Mouse Report Data */
 447:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
 448:../../tmk_core/protocol/lufa/lufa.c **** 
 449:../../tmk_core/protocol/lufa/lufa.c ****     /* Finalize the stream transfer to send the last packet */
 450:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 451:../../tmk_core/protocol/lufa/lufa.c **** #endif
 452:../../tmk_core/protocol/lufa/lufa.c **** }
 453:../../tmk_core/protocol/lufa/lufa.c **** 
 454:../../tmk_core/protocol/lufa/lufa.c **** static void send_system(uint16_t data)
 455:../../tmk_core/protocol/lufa/lufa.c **** {
 456:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 457:../../tmk_core/protocol/lufa/lufa.c **** 
 458:../../tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 459:../../tmk_core/protocol/lufa/lufa.c ****         return;
 460:../../tmk_core/protocol/lufa/lufa.c **** 
 461:../../tmk_core/protocol/lufa/lufa.c ****     report_extra_t r = {
 462:../../tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 463:../../tmk_core/protocol/lufa/lufa.c ****         .usage = data
 464:../../tmk_core/protocol/lufa/lufa.c ****     };
 465:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);
 466:../../tmk_core/protocol/lufa/lufa.c **** 
 467:../../tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 468:../../tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 469:../../tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 470:../../tmk_core/protocol/lufa/lufa.c **** 
 471:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 472:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 473:../../tmk_core/protocol/lufa/lufa.c **** }
 474:../../tmk_core/protocol/lufa/lufa.c **** 
 475:../../tmk_core/protocol/lufa/lufa.c **** static void send_consumer(uint16_t data)
 476:../../tmk_core/protocol/lufa/lufa.c **** {
 477:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 478:../../tmk_core/protocol/lufa/lufa.c **** 
 479:../../tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 480:../../tmk_core/protocol/lufa/lufa.c ****         return;
 481:../../tmk_core/protocol/lufa/lufa.c **** 
 482:../../tmk_core/protocol/lufa/lufa.c ****     report_extra_t r = {
 483:../../tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_CONSUMER,
 484:../../tmk_core/protocol/lufa/lufa.c ****         .usage = data
 485:../../tmk_core/protocol/lufa/lufa.c ****     };
 486:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);
 487:../../tmk_core/protocol/lufa/lufa.c **** 
 488:../../tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 489:../../tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 490:../../tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 491:../../tmk_core/protocol/lufa/lufa.c **** 
 492:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 493:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 494:../../tmk_core/protocol/lufa/lufa.c **** }
 495:../../tmk_core/protocol/lufa/lufa.c **** 
 496:../../tmk_core/protocol/lufa/lufa.c **** 
 497:../../tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 498:../../tmk_core/protocol/lufa/lufa.c ****  * sendchar
 499:../../tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 500:../../tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 501:../../tmk_core/protocol/lufa/lufa.c **** #define SEND_TIMEOUT 5
 502:../../tmk_core/protocol/lufa/lufa.c **** int8_t sendchar(uint8_t c)
 503:../../tmk_core/protocol/lufa/lufa.c **** {
  32               		.loc 1 503 0
  33               		.cfi_startproc
  34               	.LVL0:
  35               	/* prologue: function */
  36               	/* frame size = 0 */
  37               	/* stack size = 0 */
  38               	.L__stack_usage = 0
  39               	.LBB173:
 504:../../tmk_core/protocol/lufa/lufa.c ****     // Not wait once timeouted.
 505:../../tmk_core/protocol/lufa/lufa.c ****     // Because sendchar() is called so many times, waiting each call causes big lag.
 506:../../tmk_core/protocol/lufa/lufa.c ****     static bool timeouted = false;
 507:../../tmk_core/protocol/lufa/lufa.c **** 
 508:../../tmk_core/protocol/lufa/lufa.c ****     // prevents Console_Task() from running during sendchar() runs.
 509:../../tmk_core/protocol/lufa/lufa.c ****     // or char will be lost. These two function is mutually exclusive.
 510:../../tmk_core/protocol/lufa/lufa.c ****     CONSOLE_FLUSH_SET(false);
  40               		.loc 1 510 0
  41 0000 9FB7      		in r25,__SREG__
  42               	.LVL1:
  43               	/* #APP */
  44               	 ;  510 "../../tmk_core/protocol/lufa/lufa.c" 1
  45 0002 F894      		cli
  46               	 ;  0 "" 2
  47               	/* #NOAPP */
  48 0004 1092 0000 		sts console_flush,__zero_reg__
  49 0008 9FBF      		out __SREG__,r25
  50               	.LBE173:
 511:../../tmk_core/protocol/lufa/lufa.c **** 
 512:../../tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
  51               		.loc 1 512 0
  52 000a 9091 0000 		lds r25,USB_DeviceState
  53               	.LVL2:
  54 000e 9430      		cpi r25,lo8(4)
  55 0010 01F0      		breq .+2
  56 0012 00C0      		rjmp .L14
  57               	.LBB174:
  58               	.LBB175:
  59               		.file 2 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h"
   1:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
   2:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****              LUFA Library
   3:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****      Copyright (C) Dean Camera, 2014.
   4:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   5:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****            www.lufa-lib.org
   7:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
   8:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   9:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
  10:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Copyright 2014  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  12:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   all copies and that both that the copyright notice and this
  16:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   documentation, and that the name of the author not be used in
  18:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software without specific, written prior permission.
  20:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  21:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   The author disclaims all warranties with regard to this
  22:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software, including all implied warranties of merchantability
  23:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   special, indirect or consequential damages or any damages
  25:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   arising out of or in connection with the use or performance of
  28:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   this software.
  29:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
  30:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  31:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \file
  32:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief USB Endpoint definitions for the AVR8 microcontrollers.
  33:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \copydetails Group_EndpointManagement_AVR8
  34:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  35:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  38:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  39:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointRW
  40:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointRW_AVR8 Endpoint Data Reading and Writing (AVR8)
  41:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint data read/write definitions for the Atmel AVR8 architecture.
  42:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  43:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  44:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  45:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  46:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPrimitiveRW
  47:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPrimitiveRW_AVR8 Read/Write of Primitive Data Types (AVR8)
  48:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint primitive read/write definitions for the Atmel AVR8 architecture.
  49:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  50:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  from and to endpoints.
  52:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  53:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  54:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPacketManagement
  55:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPacketManagement_AVR8 Endpoint Packet Management (AVR8)
  56:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint packet management definitions for the Atmel AVR8 architecture.
  57:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  58:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  59:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  60:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  61:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointManagement
  62:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointManagement_AVR8 Endpoint Management (AVR8)
  63:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint management definitions for the Atmel AVR8 architecture.
  64:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  65:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  66:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  67:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  send/receive functions for various data types.
  68:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  69:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  @{
  70:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  71:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  72:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #ifndef __ENDPOINT_AVR8_H__
  73:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #define __ENDPOINT_AVR8_H__
  74:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  75:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Includes: */
  76:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../../../../Common/Common.h"
  77:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBTask.h"
  78:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBInterrupt.h"
  79:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  80:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  81:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if defined(__cplusplus)
  82:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			extern "C" {
  83:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  84:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  85:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Preprocessor Checks: */
  86:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  87:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  88:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  89:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  90:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Private Interface - For use in library only: */
  91:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#if !defined(__DOXYGEN__)
  92:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
  93:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
  94:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                                                       ATTR_ALWAYS_INLINE;
  95:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
  96:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
  97:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t  MaskVal    = 0;
  98:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
  99:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 100:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (CheckBytes < Bytes)
 101:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 102:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					MaskVal++;
 103:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 104:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 105:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 106:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (MaskVal << EPSIZE0);
 107:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 108:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 109:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Function Prototypes: */
 110:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			void Endpoint_ClearEndpoints(void);
 111:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 112:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG0XData,
 113:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG1XData);
 114:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 115:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#endif
 116:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 117:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 118:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */
 119:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 120:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 121:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  value in the device descriptor. Not available if the \c FIXED_CONTROL_ENDPOINT_SIZE token i
 122:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 123:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 124:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 125:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 126:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 127:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defi
 128:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					/** Total number of endpoints (including the default control endpoint at address 0) which may
 129:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 130:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 131:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 */
 132:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS        7
 133:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 134:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS        5
 135:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 136:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 137:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 138:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 139:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 140:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Enums: */
 141:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 142:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 143:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 144:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 145:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 146:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 147:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 148:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 149:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   transfer by the host or device.
 150:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 151:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 152:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   waiting for the endpoint to become ready.
 153:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 154:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 155:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   no USB endpoint traffic can occur until th
 156:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   has resumed.
 157:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 158:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 159:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   within the software timeout period set by 
 160:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 161:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 162:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			};
 163:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 164:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 165:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Configures the specified endpoint address with the given endpoint type, bank size and number
 166:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  banks. Once configured, the endpoint may be read from or written to, depending on its direct
 167:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 168:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address    Endpoint address to configure.
 169:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 170:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Type       Type of endpoint to configure, a \c EP_TYPE_* mask. Not all endpoint t
 171:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 172:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 173:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 174:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 175:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 176:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        that the endpoint can handle.
 177:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 178:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured.
 179:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 180:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \attention When the \c ORDERED_EP_CONFIG compile time option is used, Endpoints <b>must</b> 
 181:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *             ascending order, or bank corruption will occur.
 182:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 183:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Different endpoints may have different maximum packet sizes based on the endpoint's in
 184:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        refer to the chosen microcontroller model's datasheet to determine the maximum bank si
 185:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 186:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 187:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 188:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        it is automatically configured by the library internally.
 189:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 190:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 191:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 192:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        which failed to reconfigure correctly will be selected.
 193:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 194:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the configuration succeeded, \c false otherwise.
 195:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 196:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
 197:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 198:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 199:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 200:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
 201:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 202:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 203:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks)
 204:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 205:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
 206:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 207:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
 208:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				  return false;
 209:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 210:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number,
 211:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 212:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Endpoi
 213:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 214:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 215:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 216:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 217:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 218:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 219:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 220:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 221:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 222:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 223:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 224:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
 225:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCX;
 226:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_4_AVR)
 227:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 228:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 229:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCLX;
 230:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 231:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 232:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 233:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines the currently selected endpoint's direction.
 234:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 235:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
 236:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 237:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 238:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 239:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 240:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 241:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 242:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 243:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 244:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint so that it can be restored after another endpoint has been
 245:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  manipulated.
 246:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 247:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Index of the currently selected endpoint.
 248:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 249:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 250:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 251:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 252:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 253:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
  60               		.loc 2 253 0
  61 0014 9091 E900 		lds r25,233
  62 0018 9F70      		andi r25,lo8(15)
  63               	.LBB176:
  64               	.LBB177:
 240:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
  65               		.loc 2 240 0
  66 001a 3091 EC00 		lds r19,236
  67 001e 232F      		mov r18,r19
  68 0020 2170      		andi r18,lo8(1)
  69 0022 30FD      		sbrc r19,0
  70 0024 20E8      		ldi r18,lo8(-128)
  71               	.L4:
  72               	.LBE177:
  73               	.LBE176:
  74               		.loc 2 253 0
  75 0026 922B      		or r25,r18
  76               	.LVL3:
  77               	.LBE175:
  78               	.LBE174:
  79               	.LBB178:
  80               	.LBB179:
 254:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 255:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ENDPOINT_CONTROLEP;
 256:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 257:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 258:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 259:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Selects the given endpoint address.
 260:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 261:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  Any endpoint operations which do not require the endpoint address to be indicated will opera
 262:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint.
 263:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 264:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address Endpoint address to select.
 265:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 266:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
 267:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
 268:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 269:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 270:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = (Address & ENDPOINT_EPNUM_MASK);
  81               		.loc 2 270 0
  82 0028 24E0      		ldi r18,lo8(4)
  83 002a 2093 E900 		sts 233,r18
  84               	.LVL4:
  85               	.LBE179:
  86               	.LBE178:
  87               	.LBB180:
  88               	.LBB181:
 271:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 272:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 273:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 274:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 275:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  data In and Out pointers to the bank's contents.
 276:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 277:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
 278:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 279:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
 280:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
 281:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 282:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 283:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = 0;
 284:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 285:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 286:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 287:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and from a host.
 288:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 289:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 290:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 291:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 292:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void)
 293:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 294:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << EPEN);
 295:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 296:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 297:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 298:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  to and from a host.
 299:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 300:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 301:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void)
 302:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 303:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX &= ~(1 << EPEN);
 304:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 305:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 306:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 307:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 308:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
 309:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 310:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 311:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void)
 312:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 313:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
  89               		.loc 2 313 0
  90 002e 2091 EB00 		lds r18,235
  91               	.LBE181:
  92               	.LBE180:
 513:../../tmk_core/protocol/lufa/lufa.c ****         return -1;
 514:../../tmk_core/protocol/lufa/lufa.c **** 
 515:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
 516:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
 517:../../tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
  93               		.loc 1 517 0
  94 0032 20FF      		sbrs r18,0
  95 0034 00C0      		rjmp .L9
  96               	.LBB182:
  97               	.LBB183:
 314:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 315:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 316:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the number of busy banks in the currently selected endpoint, which have been queue
 317:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  transmission via the \ref Endpoint_ClearIN() command, or are awaiting acknowledgment via the
 318:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ref Endpoint_ClearOUT() command.
 319:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 320:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 321:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 322:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of busy banks in the selected endpoint.
 323:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 324:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
 325:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void)
 326:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 327:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UESTA0X & (0x03 << NBUSYBK0));
 328:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 329:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 330:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Aborts all pending IN transactions on the currently selected endpoint, once the bank
 331:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  has been queued for transmission to the host via \ref Endpoint_ClearIN(). This function
 332:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  will terminate all queued transactions, resetting the endpoint banks ready for a new
 333:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  packet.
 334:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 335:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 336:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 337:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_AbortPendingIN(void)
 338:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 339:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (Endpoint_GetBusyBanks() != 0)
 340:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 341:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX |= (1 << RXOUTI);
 342:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					while (UEINTX & (1 << RXOUTI));
 343:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 344:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 345:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 346:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 347:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 348:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 349:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 350:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction and the endpoint bank is full.
 351:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 352:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 353:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 354:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint may be read from or written to, d
 355:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *          on its direction.
 356:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 357:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 358:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 359:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 360:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 361:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 362:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 363:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is configured.
 364:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 365:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false oth
 366:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 367:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 368:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void)
 369:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 370:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
  98               		.loc 2 370 0
  99 0036 2091 EE00 		lds r18,238
 100               	.LBE183:
 101               	.LBE182:
 102               		.loc 1 517 0
 103 003a 27FF      		sbrs r18,7
 104 003c 00C0      		rjmp .L9
 518:../../tmk_core/protocol/lufa/lufa.c ****         goto ERROR_EXIT;
 519:../../tmk_core/protocol/lufa/lufa.c ****     }
 520:../../tmk_core/protocol/lufa/lufa.c **** 
 521:../../tmk_core/protocol/lufa/lufa.c ****     if (timeouted && !Endpoint_IsReadWriteAllowed()) {
 105               		.loc 1 521 0
 106 003e 2091 0000 		lds r18,timeouted.4766
 107 0042 2223      		tst r18
 108 0044 01F0      		breq .L6
 109               	.LBB184:
 110               	.LBB185:
 360:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 111               		.loc 2 360 0
 112 0046 2091 E800 		lds r18,232
 113               	.LBE185:
 114               	.LBE184:
 115               		.loc 1 521 0
 116 004a 25FF      		sbrs r18,5
 117 004c 00C0      		rjmp .L9
 118               	.L6:
 522:../../tmk_core/protocol/lufa/lufa.c ****         goto ERROR_EXIT;
 523:../../tmk_core/protocol/lufa/lufa.c ****     }
 524:../../tmk_core/protocol/lufa/lufa.c **** 
 525:../../tmk_core/protocol/lufa/lufa.c ****     timeouted = false;
 119               		.loc 1 525 0
 120 004e 1092 0000 		sts timeouted.4766,__zero_reg__
 121               	.LVL5:
 526:../../tmk_core/protocol/lufa/lufa.c **** 
 527:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = SEND_TIMEOUT;
 528:../../tmk_core/protocol/lufa/lufa.c ****     while (!Endpoint_IsReadWriteAllowed()) {
 122               		.loc 1 528 0
 123 0052 26E0      		ldi r18,lo8(6)
 124               	.LVL6:
 125               	.L7:
 126               	.LBB186:
 127               	.LBB187:
 360:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 128               		.loc 2 360 0
 129 0054 3091 E800 		lds r19,232
 130               	.LBE187:
 131               	.LBE186:
 132               		.loc 1 528 0
 133 0058 35FD      		sbrc r19,5
 134 005a 00C0      		rjmp .L28
 529:../../tmk_core/protocol/lufa/lufa.c ****         if (USB_DeviceState != DEVICE_STATE_Configured) {
 135               		.loc 1 529 0
 136 005c 3091 0000 		lds r19,USB_DeviceState
 137 0060 3430      		cpi r19,lo8(4)
 138 0062 01F4      		brne .L9
 139               	.LBB188:
 140               	.LBB189:
 371:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 372:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 373:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 374:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 375:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  masking the return value against <tt>(1 << <i>{Endpoint Number}</i>)</tt>.
 376:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 377:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 378:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 379:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 380:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 381:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 382:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEINT;
 383:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 384:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 385:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 386:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoints).
 387:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 388:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address  Address of the endpoint whose interrupt flag should be tested.
 389:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 390:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the specified endpoint has interrupted, \c false otherwise.
 391:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 392:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t Address) ATTR_WARN_UNUSED_RESUL
 393:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t Address)
 394:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 395:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((Endpoint_GetEndpointInterrupts() & (1 << (Address & ENDPOINT_EPNUM_MASK))) ? true : fa
 396:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 397:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 398:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected IN endpoint is ready for a new packet to be sent to the host.
 399:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 400:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 401:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 402:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwis
 403:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 404:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 405:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void)
 406:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 407:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 408:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 409:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 410:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected OUT endpoint has received new packet from the host.
 411:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 412:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 413:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 414:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwis
 415:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 416:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 417:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 418:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 419:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 420:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 421:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 422:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 423:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 424:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 425:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 426:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false other
 427:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 428:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 429:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 430:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 431:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 432:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 433:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 434:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 435:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint for the next packet.
 436:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 437:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 438:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 439:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This is not applicable for non CONTROL type endpoints.
 440:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 441:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 442:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void)
 443:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 444:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 445:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 446:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 447:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 448:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 449:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 450:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 451:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 452:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 453:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void)
 454:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 455:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 456:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 457:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 458:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << TXINI);
 459:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 460:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 461:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 462:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 463:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 464:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 465:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 466:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 467:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 468:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void)
 469:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 470:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 471:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 472:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 473:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << RXOUTI);
 474:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 475:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 476:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 477:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 478:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 479:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 480:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  aborted and the host can begin its own recovery sequence.
 481:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 482:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 483:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 484:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint.
 485:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 486:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 487:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 488:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 489:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void)
 490:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 491:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQ);
 492:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 493:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 494:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 495:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 496:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 497:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 498:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 499:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void)
 500:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 501:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQC);
 502:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 503:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 504:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is stalled, \c false otherwise.
 505:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 506:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 507:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 508:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
 509:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 510:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 511:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void)
 512:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 513:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 141               		.loc 2 513 0
 142 0064 3091 EB00 		lds r19,235
 143               	.LBE189:
 144               	.LBE188:
 530:../../tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 531:../../tmk_core/protocol/lufa/lufa.c ****         }
 532:../../tmk_core/protocol/lufa/lufa.c ****         if (Endpoint_IsStalled()) {
 145               		.loc 1 532 0
 146 0068 35FD      		sbrc r19,5
 147 006a 00C0      		rjmp .L9
 148               	.LVL7:
 149 006c 2150      		subi r18,lo8(-(-1))
 150               	.LVL8:
 533:../../tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 534:../../tmk_core/protocol/lufa/lufa.c ****         }
 535:../../tmk_core/protocol/lufa/lufa.c ****         if (!(timeout--)) {
 151               		.loc 1 535 0
 152 006e 01F4      		brne .L8
 536:../../tmk_core/protocol/lufa/lufa.c ****             timeouted = true;
 153               		.loc 1 536 0
 154 0070 81E0      		ldi r24,lo8(1)
 155               	.LVL9:
 156 0072 8093 0000 		sts timeouted.4766,r24
 537:../../tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 157               		.loc 1 537 0
 158 0076 00C0      		rjmp .L9
 159               	.LVL10:
 160               	.L8:
 161               	.LBB190:
 162               	.LBB191:
 163               		.file 3 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/avr/include/util/delay.h **** #endif
  41:/usr/avr/include/util/delay.h **** 
  42:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/avr/include/util/delay.h **** #include <math.h>
  45:/usr/avr/include/util/delay.h **** 
  46:/usr/avr/include/util/delay.h **** /** \file */
  47:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/avr/include/util/delay.h ****     \code
  49:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/avr/include/util/delay.h ****     \endcode
  53:/usr/avr/include/util/delay.h **** 
  54:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/avr/include/util/delay.h ****     used.
  58:/usr/avr/include/util/delay.h **** 
  59:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/avr/include/util/delay.h **** 
  68:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/avr/include/util/delay.h **** 
  77:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/avr/include/util/delay.h **** 
  81:/usr/avr/include/util/delay.h **** */
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/avr/include/util/delay.h **** #endif
  87:/usr/avr/include/util/delay.h **** 
  88:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/avr/include/util/delay.h **** #endif
  93:/usr/avr/include/util/delay.h **** 
  94:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/avr/include/util/delay.h **** #endif
  97:/usr/avr/include/util/delay.h **** 
  98:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/avr/include/util/delay.h **** #endif
 103:/usr/avr/include/util/delay.h **** 
 104:/usr/avr/include/util/delay.h **** /**
 105:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/avr/include/util/delay.h **** 
 107:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/avr/include/util/delay.h **** 
 109:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/avr/include/util/delay.h **** 
 112:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/avr/include/util/delay.h **** 
 114:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/avr/include/util/delay.h **** 
 120:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/avr/include/util/delay.h **** 
 125:/usr/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/avr/include/util/delay.h **** 
 132:/usr/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/avr/include/util/delay.h **** 
 140:/usr/avr/include/util/delay.h ****  */
 141:/usr/avr/include/util/delay.h **** void
 142:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/avr/include/util/delay.h **** {
 144:/usr/avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/avr/include/util/delay.h **** 
 153:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/avr/include/util/delay.h **** 
 156:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/avr/include/util/delay.h **** 
 159:/usr/avr/include/util/delay.h **** 	#else
 160:/usr/avr/include/util/delay.h **** 		//round up by default
 161:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/avr/include/util/delay.h **** 	#endif
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 164               		.loc 3 164 0
 165 0078 EFE9      		ldi r30,lo8(3999)
 166 007a FFE0      		ldi r31,hi8(3999)
 167 007c 3197      		1: sbiw r30,1
 168 007e 01F4      		brne 1b
 169 0080 00C0      		rjmp .
 170 0082 0000      		nop
 171 0084 00C0      		rjmp .L7
 172               	.LVL11:
 173               	.L28:
 174               	.LBE191:
 175               	.LBE190:
 176               	.LBB192:
 177               	.LBB193:
 514:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 515:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 516:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 517:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 518:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void)
 519:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 520:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << RSTDT);
 521:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 522:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 523:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sets the direction of the currently selected endpoint.
 524:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 525:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
 526:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 527:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 528:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 529:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 530:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
 531:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 532:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 533:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 534:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 535:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 536:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 537:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 538:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 539:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 540:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void)
 541:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 542:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEDATX;
 543:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 544:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 545:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes one byte to the currently selected endpoint's bank, for IN direction endpoints.
 546:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 547:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 548:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 549:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
 550:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 551:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
 552:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data)
 553:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 554:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = Data;
 178               		.loc 2 554 0
 179 0086 8093 F100 		sts 241,r24
 180               	.LBE193:
 181               	.LBE192:
 182               	.LBB194:
 183               	.LBB195:
 360:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 184               		.loc 2 360 0
 185 008a 8091 E800 		lds r24,232
 186               	.LVL12:
 187               	.LBE195:
 188               	.LBE194:
 538:../../tmk_core/protocol/lufa/lufa.c ****         }
 539:../../tmk_core/protocol/lufa/lufa.c ****         _delay_ms(1);
 540:../../tmk_core/protocol/lufa/lufa.c ****     }
 541:../../tmk_core/protocol/lufa/lufa.c **** 
 542:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_8(c);
 543:../../tmk_core/protocol/lufa/lufa.c **** 
 544:../../tmk_core/protocol/lufa/lufa.c ****     // send when bank is full
 545:../../tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) {
 189               		.loc 1 545 0
 190 008e 85FD      		sbrc r24,5
 191 0090 00C0      		rjmp .L11
 192               	.L12:
 193               	.LBB196:
 194               	.LBB197:
 407:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 195               		.loc 2 407 0 discriminator 1
 196 0092 8091 E800 		lds r24,232
 197               	.LBE197:
 198               	.LBE196:
 546:../../tmk_core/protocol/lufa/lufa.c ****         while (!(Endpoint_IsINReady()));
 199               		.loc 1 546 0 discriminator 1
 200 0096 80FF      		sbrs r24,0
 201 0098 00C0      		rjmp .L12
 202               	.LBB198:
 203               	.LBB199:
 456:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 204               		.loc 2 456 0
 205 009a 8091 E800 		lds r24,232
 206 009e 8E77      		andi r24,lo8(126)
 207 00a0 8093 E800 		sts 232,r24
 208               	.LVL13:
 209 00a4 00C0      		rjmp .L13
 210               	.LVL14:
 211               	.L11:
 212               	.LBE199:
 213               	.LBE198:
 214               	.LBB200:
 547:../../tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 548:../../tmk_core/protocol/lufa/lufa.c ****     } else {
 549:../../tmk_core/protocol/lufa/lufa.c ****         CONSOLE_FLUSH_SET(true);
 215               		.loc 1 549 0
 216 00a6 8FB7      		in r24,__SREG__
 217               	.LVL15:
 218               	/* #APP */
 219               	 ;  549 "../../tmk_core/protocol/lufa/lufa.c" 1
 220 00a8 F894      		cli
 221               	 ;  0 "" 2
 222               	/* #NOAPP */
 223 00aa 21E0      		ldi r18,lo8(1)
 224               	.LVL16:
 225 00ac 2093 0000 		sts console_flush,r18
 226               	.LVL17:
 227 00b0 8FBF      		out __SREG__,r24
 228               	.LVL18:
 229               	.L13:
 230               	.LBE200:
 231               	.LBB201:
 232               	.LBB202:
 270:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 233               		.loc 2 270 0
 234 00b2 9F70      		andi r25,lo8(15)
 235               	.LVL19:
 236 00b4 9093 E900 		sts 233,r25
 237               	.LBE202:
 238               	.LBE201:
 550:../../tmk_core/protocol/lufa/lufa.c ****     }
 551:../../tmk_core/protocol/lufa/lufa.c **** 
 552:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 553:../../tmk_core/protocol/lufa/lufa.c ****     return 0;
 239               		.loc 1 553 0
 240 00b8 80E0      		ldi r24,0
 241 00ba 0895      		ret
 242               	.LVL20:
 243               	.L9:
 244               	.LBB203:
 245               	.LBB204:
 270:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 246               		.loc 2 270 0
 247 00bc 9F70      		andi r25,lo8(15)
 248               	.LVL21:
 249 00be 9093 E900 		sts 233,r25
 250               	.LVL22:
 251               	.L14:
 252               	.LBE204:
 253               	.LBE203:
 513:../../tmk_core/protocol/lufa/lufa.c **** 
 254               		.loc 1 513 0
 255 00c2 8FEF      		ldi r24,lo8(-1)
 554:../../tmk_core/protocol/lufa/lufa.c **** ERROR_EXIT:
 555:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 556:../../tmk_core/protocol/lufa/lufa.c ****     return -1;
 557:../../tmk_core/protocol/lufa/lufa.c **** }
 256               		.loc 1 557 0
 257 00c4 0895      		ret
 258               		.cfi_endproc
 259               	.LFE118:
 261               		.section	.text.send_consumer,"ax",@progbits
 263               	send_consumer:
 264               	.LFB117:
 476:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 265               		.loc 1 476 0
 266               		.cfi_startproc
 267               	.LVL23:
 268 0000 CF93      		push r28
 269               	.LCFI0:
 270               		.cfi_def_cfa_offset 3
 271               		.cfi_offset 28, -2
 272 0002 DF93      		push r29
 273               	.LCFI1:
 274               		.cfi_def_cfa_offset 4
 275               		.cfi_offset 29, -3
 276 0004 00D0      		rcall .
 277 0006 1F92      		push __zero_reg__
 278               	.LCFI2:
 279               		.cfi_def_cfa_offset 7
 280 0008 CDB7      		in r28,__SP_L__
 281 000a DEB7      		in r29,__SP_H__
 282               	.LCFI3:
 283               		.cfi_def_cfa_register 28
 284               	/* prologue: function */
 285               	/* frame size = 3 */
 286               	/* stack size = 5 */
 287               	.L__stack_usage = 5
 288 000c 9C01      		movw r18,r24
 289               	.LVL24:
 479:../../tmk_core/protocol/lufa/lufa.c ****         return;
 290               		.loc 1 479 0
 291 000e 8091 0000 		lds r24,USB_DeviceState
 292               	.LVL25:
 293 0012 8430      		cpi r24,lo8(4)
 294 0014 01F4      		brne .L29
 482:../../tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_CONSUMER,
 295               		.loc 1 482 0
 296 0016 93E0      		ldi r25,lo8(3)
 297 0018 9983      		std Y+1,r25
 298 001a 3B83      		std Y+3,r19
 299 001c 2A83      		std Y+2,r18
 300               	.LVL26:
 301               	.LBB205:
 302               	.LBB206:
 270:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 303               		.loc 2 270 0
 304 001e 9093 E900 		sts 233,r25
 305               	.LVL27:
 306 0022 8FEF      		ldi r24,lo8(-1)
 307               	.LVL28:
 308               	.L31:
 309               	.LBE206:
 310               	.LBE205:
 311               	.LBB207:
 312               	.LBB208:
 360:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 313               		.loc 2 360 0
 314 0024 9091 E800 		lds r25,232
 315 0028 8150      		subi r24,lo8(-(-1))
 316               	.LVL29:
 317               	.LBE208:
 318               	.LBE207:
 489:../../tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 319               		.loc 1 489 0
 320 002a 95FD      		sbrc r25,5
 321 002c 00C0      		rjmp .L32
 322               	.LVL30:
 323               	.LBB209:
 324               	.LBB210:
 165:/usr/avr/include/util/delay.h **** 
 166:/usr/avr/include/util/delay.h **** #else
 167:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 168:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 169:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 170:/usr/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 171:/usr/avr/include/util/delay.h **** 	{
 172:/usr/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 173:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 174:/usr/avr/include/util/delay.h **** 		while(__ticks)
 175:/usr/avr/include/util/delay.h **** 		{
 176:/usr/avr/include/util/delay.h **** 			// wait 1/10 ms
 177:/usr/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 178:/usr/avr/include/util/delay.h **** 			__ticks --;
 179:/usr/avr/include/util/delay.h **** 		}
 180:/usr/avr/include/util/delay.h **** 		return;
 181:/usr/avr/include/util/delay.h **** 	}
 182:/usr/avr/include/util/delay.h **** 	else
 183:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 184:/usr/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 185:/usr/avr/include/util/delay.h **** #endif
 186:/usr/avr/include/util/delay.h **** }
 187:/usr/avr/include/util/delay.h **** 
 188:/usr/avr/include/util/delay.h **** /**
 189:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 190:/usr/avr/include/util/delay.h **** 
 191:/usr/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 192:/usr/avr/include/util/delay.h **** 
 193:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 194:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 195:/usr/avr/include/util/delay.h **** 
 196:/usr/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 197:/usr/avr/include/util/delay.h **** 
 198:/usr/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 199:/usr/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 200:/usr/avr/include/util/delay.h ****    will not be informed about this case.
 201:/usr/avr/include/util/delay.h **** 
 202:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 203:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 204:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 205:/usr/avr/include/util/delay.h ****    no delay i.e., 0us.
 206:/usr/avr/include/util/delay.h ****   
 207:/usr/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 208:/usr/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 209:/usr/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 210:/usr/avr/include/util/delay.h **** 
 211:/usr/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 212:/usr/avr/include/util/delay.h ****    to round down and round to closest integer.
 213:/usr/avr/include/util/delay.h ****  
 214:/usr/avr/include/util/delay.h ****    Note: The new implementation of _delay_us(double __us) with 
 215:/usr/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible.
 216:/usr/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 217:/usr/avr/include/util/delay.h ****    Also, the backward compatible
 218:/usr/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 219:/usr/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 220:/usr/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 221:/usr/avr/include/util/delay.h **** 
 222:/usr/avr/include/util/delay.h ****  */
 223:/usr/avr/include/util/delay.h **** void
 224:/usr/avr/include/util/delay.h **** _delay_us(double __us)
 225:/usr/avr/include/util/delay.h **** {
 226:/usr/avr/include/util/delay.h **** 	uint8_t __ticks;
 227:/usr/avr/include/util/delay.h **** 	double __tmp ; 
 228:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 229:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 230:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 231:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 232:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 233:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 234:/usr/avr/include/util/delay.h **** 
 235:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 236:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 237:/usr/avr/include/util/delay.h **** 
 238:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 239:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 240:/usr/avr/include/util/delay.h **** 
 241:/usr/avr/include/util/delay.h **** 	#else
 242:/usr/avr/include/util/delay.h **** 		//round up by default
 243:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 244:/usr/avr/include/util/delay.h **** 	#endif
 245:/usr/avr/include/util/delay.h **** 
 246:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 325               		.loc 3 246 0
 326 002e 95ED      		ldi r25,lo8(-43)
 327 0030 9A95      		1: dec r25
 328 0032 01F4      		brne 1b
 329 0034 0000      		nop
 330               	.LVL31:
 331               	.LBE210:
 332               	.LBE209:
 489:../../tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 333               		.loc 1 489 0
 334 0036 8111      		cpse r24,__zero_reg__
 335 0038 00C0      		rjmp .L31
 336               	.LVL32:
 337               	.L32:
 338               	.LBB211:
 339               	.LBB212:
 360:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 340               		.loc 2 360 0
 341 003a 8091 E800 		lds r24,232
 342               	.LBE212:
 343               	.LBE211:
 490:../../tmk_core/protocol/lufa/lufa.c **** 
 344               		.loc 1 490 0
 345 003e 85FF      		sbrs r24,5
 346 0040 00C0      		rjmp .L29
 492:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 347               		.loc 1 492 0
 348 0042 40E0      		ldi r20,0
 349 0044 50E0      		ldi r21,0
 350 0046 63E0      		ldi r22,lo8(3)
 351 0048 70E0      		ldi r23,0
 352 004a CE01      		movw r24,r28
 353 004c 0196      		adiw r24,1
 354 004e 0E94 0000 		call Endpoint_Write_Stream_LE
 355               	.LVL33:
 356               	.LBB213:
 357               	.LBB214:
 456:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 358               		.loc 2 456 0
 359 0052 8091 E800 		lds r24,232
 360 0056 8E77      		andi r24,lo8(126)
 361 0058 8093 E800 		sts 232,r24
 362               	.LVL34:
 363               	.L29:
 364               	/* epilogue start */
 365               	.LBE214:
 366               	.LBE213:
 494:../../tmk_core/protocol/lufa/lufa.c **** 
 367               		.loc 1 494 0
 368 005c 0F90      		pop __tmp_reg__
 369 005e 0F90      		pop __tmp_reg__
 370 0060 0F90      		pop __tmp_reg__
 371 0062 DF91      		pop r29
 372 0064 CF91      		pop r28
 373 0066 0895      		ret
 374               		.cfi_endproc
 375               	.LFE117:
 377               		.section	.text.send_system,"ax",@progbits
 379               	send_system:
 380               	.LFB116:
 455:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 381               		.loc 1 455 0
 382               		.cfi_startproc
 383               	.LVL35:
 384 0000 CF93      		push r28
 385               	.LCFI4:
 386               		.cfi_def_cfa_offset 3
 387               		.cfi_offset 28, -2
 388 0002 DF93      		push r29
 389               	.LCFI5:
 390               		.cfi_def_cfa_offset 4
 391               		.cfi_offset 29, -3
 392 0004 00D0      		rcall .
 393 0006 1F92      		push __zero_reg__
 394               	.LCFI6:
 395               		.cfi_def_cfa_offset 7
 396 0008 CDB7      		in r28,__SP_L__
 397 000a DEB7      		in r29,__SP_H__
 398               	.LCFI7:
 399               		.cfi_def_cfa_register 28
 400               	/* prologue: function */
 401               	/* frame size = 3 */
 402               	/* stack size = 5 */
 403               	.L__stack_usage = 5
 404               	.LVL36:
 458:../../tmk_core/protocol/lufa/lufa.c ****         return;
 405               		.loc 1 458 0
 406 000c 2091 0000 		lds r18,USB_DeviceState
 407 0010 2430      		cpi r18,lo8(4)
 408 0012 01F4      		brne .L41
 461:../../tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 409               		.loc 1 461 0
 410 0014 22E0      		ldi r18,lo8(2)
 411 0016 2983      		std Y+1,r18
 412 0018 9B83      		std Y+3,r25
 413 001a 8A83      		std Y+2,r24
 414               	.LVL37:
 415               	.LBB215:
 416               	.LBB216:
 270:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 417               		.loc 2 270 0
 418 001c 83E0      		ldi r24,lo8(3)
 419               	.LVL38:
 420 001e 8093 E900 		sts 233,r24
 421               	.LVL39:
 422 0022 8FEF      		ldi r24,lo8(-1)
 423               	.LVL40:
 424               	.L43:
 425               	.LBE216:
 426               	.LBE215:
 427               	.LBB217:
 428               	.LBB218:
 360:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 429               		.loc 2 360 0
 430 0024 9091 E800 		lds r25,232
 431 0028 8150      		subi r24,lo8(-(-1))
 432               	.LVL41:
 433               	.LBE218:
 434               	.LBE217:
 468:../../tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 435               		.loc 1 468 0
 436 002a 95FD      		sbrc r25,5
 437 002c 00C0      		rjmp .L44
 438               	.LVL42:
 439               	.LBB219:
 440               	.LBB220:
 441               		.loc 3 246 0
 442 002e 95ED      		ldi r25,lo8(-43)
 443 0030 9A95      		1: dec r25
 444 0032 01F4      		brne 1b
 445 0034 0000      		nop
 446               	.LVL43:
 447               	.LBE220:
 448               	.LBE219:
 468:../../tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 449               		.loc 1 468 0
 450 0036 8111      		cpse r24,__zero_reg__
 451 0038 00C0      		rjmp .L43
 452               	.LVL44:
 453               	.L44:
 454               	.LBB221:
 455               	.LBB222:
 360:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 456               		.loc 2 360 0
 457 003a 8091 E800 		lds r24,232
 458               	.LBE222:
 459               	.LBE221:
 469:../../tmk_core/protocol/lufa/lufa.c **** 
 460               		.loc 1 469 0
 461 003e 85FF      		sbrs r24,5
 462 0040 00C0      		rjmp .L41
 471:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 463               		.loc 1 471 0
 464 0042 40E0      		ldi r20,0
 465 0044 50E0      		ldi r21,0
 466 0046 63E0      		ldi r22,lo8(3)
 467 0048 70E0      		ldi r23,0
 468 004a CE01      		movw r24,r28
 469 004c 0196      		adiw r24,1
 470 004e 0E94 0000 		call Endpoint_Write_Stream_LE
 471               	.LVL45:
 472               	.LBB223:
 473               	.LBB224:
 456:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 474               		.loc 2 456 0
 475 0052 8091 E800 		lds r24,232
 476 0056 8E77      		andi r24,lo8(126)
 477 0058 8093 E800 		sts 232,r24
 478               	.LVL46:
 479               	.L41:
 480               	/* epilogue start */
 481               	.LBE224:
 482               	.LBE223:
 473:../../tmk_core/protocol/lufa/lufa.c **** 
 483               		.loc 1 473 0
 484 005c 0F90      		pop __tmp_reg__
 485 005e 0F90      		pop __tmp_reg__
 486 0060 0F90      		pop __tmp_reg__
 487 0062 DF91      		pop r29
 488 0064 CF91      		pop r28
 489 0066 0895      		ret
 490               		.cfi_endproc
 491               	.LFE116:
 493               		.section	.text.send_mouse,"ax",@progbits
 495               	send_mouse:
 496               	.LFB115:
 432:../../tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 497               		.loc 1 432 0
 498               		.cfi_startproc
 499               	.LVL47:
 500               	/* prologue: function */
 501               	/* frame size = 0 */
 502               	/* stack size = 0 */
 503               	.L__stack_usage = 0
 436:../../tmk_core/protocol/lufa/lufa.c ****         return;
 504               		.loc 1 436 0
 505 0000 2091 0000 		lds r18,USB_DeviceState
 506 0004 2430      		cpi r18,lo8(4)
 507 0006 01F4      		brne .L53
 508               	.LVL48:
 509               	.LBB225:
 510               	.LBB226:
 270:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 511               		.loc 2 270 0
 512 0008 22E0      		ldi r18,lo8(2)
 513 000a 2093 E900 		sts 233,r18
 514               	.LVL49:
 515 000e 2FEF      		ldi r18,lo8(-1)
 516               	.LVL50:
 517               	.L56:
 518               	.LBE226:
 519               	.LBE225:
 520               	.LBB227:
 521               	.LBB228:
 360:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 522               		.loc 2 360 0
 523 0010 3091 E800 		lds r19,232
 524 0014 2150      		subi r18,lo8(-(-1))
 525               	.LVL51:
 526               	.LBE228:
 527               	.LBE227:
 443:../../tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 528               		.loc 1 443 0
 529 0016 35FD      		sbrc r19,5
 530 0018 00C0      		rjmp .L57
 531               	.LVL52:
 532               	.LBB229:
 533               	.LBB230:
 534               		.loc 3 246 0
 535 001a 35ED      		ldi r19,lo8(-43)
 536 001c 3A95      		1: dec r19
 537 001e 01F4      		brne 1b
 538 0020 0000      		nop
 539               	.LVL53:
 540               	.LBE230:
 541               	.LBE229:
 443:../../tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 542               		.loc 1 443 0
 543 0022 2111      		cpse r18,__zero_reg__
 544 0024 00C0      		rjmp .L56
 545               	.LVL54:
 546               	.L57:
 547               	.LBB231:
 548               	.LBB232:
 360:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 549               		.loc 2 360 0
 550 0026 2091 E800 		lds r18,232
 551               	.LBE232:
 552               	.LBE231:
 444:../../tmk_core/protocol/lufa/lufa.c **** 
 553               		.loc 1 444 0
 554 002a 25FF      		sbrs r18,5
 555 002c 00C0      		rjmp .L53
 447:../../tmk_core/protocol/lufa/lufa.c **** 
 556               		.loc 1 447 0
 557 002e 40E0      		ldi r20,0
 558 0030 50E0      		ldi r21,0
 559 0032 65E0      		ldi r22,lo8(5)
 560 0034 70E0      		ldi r23,0
 561 0036 0E94 0000 		call Endpoint_Write_Stream_LE
 562               	.LVL55:
 563               	.LBB233:
 564               	.LBB234:
 456:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 565               		.loc 2 456 0
 566 003a 8091 E800 		lds r24,232
 567 003e 8E77      		andi r24,lo8(126)
 568 0040 8093 E800 		sts 232,r24
 569               	.LVL56:
 570               	.L53:
 571 0044 0895      		ret
 572               	.LBE234:
 573               	.LBE233:
 574               		.cfi_endproc
 575               	.LFE115:
 577               		.section	.text.send_keyboard,"ax",@progbits
 579               	send_keyboard:
 580               	.LFB114:
 392:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 581               		.loc 1 392 0
 582               		.cfi_startproc
 583               	.LVL57:
 584 0000 CF93      		push r28
 585               	.LCFI8:
 586               		.cfi_def_cfa_offset 3
 587               		.cfi_offset 28, -2
 588 0002 DF93      		push r29
 589               	.LCFI9:
 590               		.cfi_def_cfa_offset 4
 591               		.cfi_offset 29, -3
 592               	/* prologue: function */
 593               	/* frame size = 0 */
 594               	/* stack size = 2 */
 595               	.L__stack_usage = 2
 596               	.LVL58:
 395:../../tmk_core/protocol/lufa/lufa.c ****         return;
 597               		.loc 1 395 0
 598 0004 2091 0000 		lds r18,USB_DeviceState
 599 0008 2430      		cpi r18,lo8(4)
 600 000a 01F0      		breq .+2
 601 000c 00C0      		rjmp .L66
 602 000e EC01      		movw r28,r24
 400:../../tmk_core/protocol/lufa/lufa.c ****         /* Report protocol - NKRO */
 603               		.loc 1 400 0
 604 0010 8091 0000 		lds r24,keyboard_protocol
 605               	.LVL59:
 606 0014 8823      		tst r24
 607 0016 01F0      		breq .L69
 400:../../tmk_core/protocol/lufa/lufa.c ****         /* Report protocol - NKRO */
 608               		.loc 1 400 0 is_stmt 0 discriminator 1
 609 0018 8091 0000 		lds r24,keyboard_nkro
 610 001c 8823      		tst r24
 611 001e 01F0      		breq .L69
 612               	.LVL60:
 613               	.LBB235:
 614               	.LBB236:
 270:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 615               		.loc 2 270 0 is_stmt 1
 616 0020 85E0      		ldi r24,lo8(5)
 617 0022 8093 E900 		sts 233,r24
 618               	.LVL61:
 619 0026 8FEF      		ldi r24,lo8(-1)
 620               	.LVL62:
 621               	.L70:
 622               	.LBE236:
 623               	.LBE235:
 624               	.LBB237:
 625               	.LBB238:
 360:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 626               		.loc 2 360 0
 627 0028 9091 E800 		lds r25,232
 628 002c 8150      		subi r24,lo8(-(-1))
 629               	.LVL63:
 630               	.LBE238:
 631               	.LBE237:
 405:../../tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 632               		.loc 1 405 0
 633 002e 95FD      		sbrc r25,5
 634 0030 00C0      		rjmp .L71
 635               	.LVL64:
 636               	.LBB239:
 637               	.LBB240:
 638               		.loc 3 246 0
 639 0032 95E1      		ldi r25,lo8(21)
 640 0034 9A95      		1: dec r25
 641 0036 01F4      		brne 1b
 642 0038 0000      		nop
 643               	.LVL65:
 644               	.LBE240:
 645               	.LBE239:
 405:../../tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 646               		.loc 1 405 0
 647 003a 8111      		cpse r24,__zero_reg__
 648 003c 00C0      		rjmp .L70
 649               	.LVL66:
 650               	.L71:
 651               	.LBB241:
 652               	.LBB242:
 360:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 653               		.loc 2 360 0
 654 003e 8091 E800 		lds r24,232
 655               	.LBE242:
 656               	.LBE241:
 406:../../tmk_core/protocol/lufa/lufa.c **** 
 657               		.loc 1 406 0
 658 0042 85FF      		sbrs r24,5
 659 0044 00C0      		rjmp .L66
 409:../../tmk_core/protocol/lufa/lufa.c ****     }
 660               		.loc 1 409 0
 661 0046 40E0      		ldi r20,0
 662 0048 50E0      		ldi r21,0
 663 004a 60E1      		ldi r22,lo8(16)
 664 004c 70E0      		ldi r23,0
 665 004e 00C0      		rjmp .L96
 666               	.LVL67:
 667               	.L69:
 668               	.LBB243:
 669               	.LBB244:
 270:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 670               		.loc 2 270 0
 671 0050 81E0      		ldi r24,lo8(1)
 672 0052 8093 E900 		sts 233,r24
 673               	.LVL68:
 674 0056 8FEF      		ldi r24,lo8(-1)
 675               	.LVL69:
 676               	.L75:
 677               	.LBE244:
 678               	.LBE243:
 679               	.LBB245:
 680               	.LBB246:
 360:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 681               		.loc 2 360 0
 682 0058 9091 E800 		lds r25,232
 683 005c 8150      		subi r24,lo8(-(-1))
 684               	.LVL70:
 685               	.LBE246:
 686               	.LBE245:
 418:../../tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 687               		.loc 1 418 0
 688 005e 95FD      		sbrc r25,5
 689 0060 00C0      		rjmp .L76
 690               	.LVL71:
 691               	.LBB247:
 692               	.LBB248:
 693               		.loc 3 246 0
 694 0062 95ED      		ldi r25,lo8(-43)
 695 0064 9A95      		1: dec r25
 696 0066 01F4      		brne 1b
 697 0068 0000      		nop
 698               	.LVL72:
 699               	.LBE248:
 700               	.LBE247:
 418:../../tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 701               		.loc 1 418 0
 702 006a 8111      		cpse r24,__zero_reg__
 703 006c 00C0      		rjmp .L75
 704               	.LVL73:
 705               	.L76:
 706               	.LBB249:
 707               	.LBB250:
 360:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 708               		.loc 2 360 0
 709 006e 8091 E800 		lds r24,232
 710               	.LBE250:
 711               	.LBE249:
 419:../../tmk_core/protocol/lufa/lufa.c **** 
 712               		.loc 1 419 0
 713 0072 85FF      		sbrs r24,5
 714 0074 00C0      		rjmp .L66
 422:../../tmk_core/protocol/lufa/lufa.c ****     }
 715               		.loc 1 422 0
 716 0076 40E0      		ldi r20,0
 717 0078 50E0      		ldi r21,0
 718 007a 68E0      		ldi r22,lo8(8)
 719 007c 70E0      		ldi r23,0
 720               	.LVL74:
 721               	.L96:
 722 007e CE01      		movw r24,r28
 723 0080 0E94 0000 		call Endpoint_Write_Stream_LE
 724               	.LVL75:
 725               	.LBB251:
 726               	.LBB252:
 456:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 727               		.loc 2 456 0
 728 0084 8091 E800 		lds r24,232
 729 0088 8E77      		andi r24,lo8(126)
 730 008a 8093 E800 		sts 232,r24
 731               	.LBE252:
 732               	.LBE251:
 428:../../tmk_core/protocol/lufa/lufa.c **** }
 733               		.loc 1 428 0
 734 008e 80E1      		ldi r24,lo8(16)
 735 0090 FE01      		movw r30,r28
 736 0092 A0E0      		ldi r26,lo8(keyboard_report_sent)
 737 0094 B0E0      		ldi r27,hi8(keyboard_report_sent)
 738               		0:
 739 0096 0190      		ld r0,Z+
 740 0098 0D92      		st X+,r0
 741 009a 8A95      		dec r24
 742 009c 01F4      		brne 0b
 743               	.LVL76:
 744               	.L66:
 745               	/* epilogue start */
 429:../../tmk_core/protocol/lufa/lufa.c **** 
 746               		.loc 1 429 0
 747 009e DF91      		pop r29
 748 00a0 CF91      		pop r28
 749 00a2 0895      		ret
 750               		.cfi_endproc
 751               	.LFE114:
 753               		.section	.text.EVENT_USB_Device_Connect,"ax",@progbits
 754               	.global	EVENT_USB_Device_Connect
 756               	EVENT_USB_Device_Connect:
 757               	.LFB105:
 151:../../tmk_core/protocol/lufa/lufa.c ****     print("[C]");
 758               		.loc 1 151 0
 759               		.cfi_startproc
 760               	/* prologue: function */
 761               	/* frame size = 0 */
 762               	/* stack size = 0 */
 763               	.L__stack_usage = 0
 152:../../tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 764               		.loc 1 152 0
 765 0000 80E0      		ldi r24,lo8(__c.4672)
 766 0002 90E0      		ldi r25,hi8(__c.4672)
 767 0004 0E94 0000 		call xputs
 768               	.LVL77:
 154:../../tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 769               		.loc 1 154 0
 770 0008 8091 0000 		lds r24,USB_IsInitialized
 771 000c 8111      		cpse r24,__zero_reg__
 772 000e 00C0      		rjmp .L97
 155:../../tmk_core/protocol/lufa/lufa.c ****         USB_Init();
 773               		.loc 1 155 0
 774 0010 0E94 0000 		call USB_Disable
 775               	.LVL78:
 156:../../tmk_core/protocol/lufa/lufa.c ****         USB_Device_EnableSOFEvents();
 776               		.loc 1 156 0
 777 0014 0E94 0000 		call USB_Init
 778               	.LVL79:
 779               	.LBB253:
 780               	.LBB254:
 781               	.LBB255:
 782               		.file 4 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR
   1:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
   2:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****              LUFA Library
   3:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****      Copyright (C) Dean Camera, 2014.
   4:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   5:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****            www.lufa-lib.org
   7:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
   8:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   9:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
  10:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Copyright 2014  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  12:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   all copies and that both that the copyright notice and this
  16:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   documentation, and that the name of the author not be used in
  18:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software without specific, written prior permission.
  20:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  21:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   The author disclaims all warranties with regard to this
  22:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software, including all implied warranties of merchantability
  23:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   special, indirect or consequential damages or any damages
  25:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   arising out of or in connection with the use or performance of
  28:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   this software.
  29:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
  30:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  31:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /** \file
  32:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \brief USB Controller Interrupt definitions for the AVR8 microcontrollers.
  33:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  34:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  This file contains definitions required for the correct handling of low level USB service routi
  35:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  from the USB controller.
  36:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  37:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  38:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  39:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  */
  40:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  41:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #ifndef __USBINTERRUPT_AVR8_H__
  42:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #define __USBINTERRUPT_AVR8_H__
  43:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  44:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Includes: */
  45:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#include "../../../../Common/Common.h"
  46:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  47:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  48:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if defined(__cplusplus)
  49:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			extern "C" {
  50:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  51:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  52:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Preprocessor Checks: */
  53:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  54:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  55:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  56:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  57:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Private Interface - For use in library only: */
  58:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	#if !defined(__DOXYGEN__)
  59:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Enums: */
  60:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			enum USB_Interrupts_t
  61:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  62:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || def
  63:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBUSTI  = 0,
  64:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  65:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_BOTH) || defined(__DOXYGEN__))
  66:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_IDTI    = 1,
  67:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  68:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_DEVICE) || defined(__DOXYGEN__))
  69:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_WAKEUPI = 2,
  70:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SUSPI   = 3,
  71:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_EORSTI  = 4,
  72:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SOFI    = 5,
  73:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RXSTPI  = 6,
  74:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  75:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_HOST) || defined(__DOXYGEN__))
  76:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_HSOFI   = 7,
  77:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DCONNI  = 8,
  78:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DDISCI  = 9,
  79:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RSTI    = 10,
  80:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_BCERRI  = 11,
  81:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBERRI  = 12,
  82:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SRPI    = 13,
  83:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  84:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			};
  85:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  86:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Inline Functions: */
  87:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt) ATTR_ALWAYS_INLINE;
  88:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt)
  89:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  90:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				switch (Interrupt)
  91:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				{
  92:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
  93:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_VBUSTI:
  94:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << VBUSTE);
  95:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
  96:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
  97:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_BOTH)
  98:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_IDTI:
  99:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << IDTE);
 100:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 101:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
 102:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_DEVICE)
 103:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_WAKEUPI:
 104:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << WAKEUPE);
 105:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 106:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SUSPI:
 107:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SUSPE);
 108:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 109:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_EORSTI:
 110:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << EORSTE);
 111:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 112:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SOFI:
 113:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SOFE);
 783               		.loc 4 113 0
 784 0018 8091 E200 		lds r24,226
 785 001c 8460      		ori r24,lo8(4)
 786 001e 8093 E200 		sts 226,r24
 787               	.LVL80:
 788               	.L97:
 789 0022 0895      		ret
 790               	.LBE255:
 791               	.LBE254:
 792               	.LBE253:
 793               		.cfi_endproc
 794               	.LFE105:
 796               		.section	.text.EVENT_USB_Device_Disconnect,"ax",@progbits
 797               	.global	EVENT_USB_Device_Disconnect
 799               	EVENT_USB_Device_Disconnect:
 800               	.LFB106:
 162:../../tmk_core/protocol/lufa/lufa.c ****     print("[D]");
 801               		.loc 1 162 0
 802               		.cfi_startproc
 803               	/* prologue: function */
 804               	/* frame size = 0 */
 805               	/* stack size = 0 */
 806               	.L__stack_usage = 0
 163:../../tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 807               		.loc 1 163 0
 808 0000 80E0      		ldi r24,lo8(__c.4677)
 809 0002 90E0      		ldi r25,hi8(__c.4677)
 810 0004 0E94 0000 		call xputs
 811               	.LVL81:
 165:../../tmk_core/protocol/lufa/lufa.c **** /* TODO: This doesn't work. After several plug in/outs can not be enumerated. 
 812               		.loc 1 165 0
 813 0008 1092 0000 		sts USB_IsInitialized,__zero_reg__
 814 000c 0895      		ret
 815               		.cfi_endproc
 816               	.LFE106:
 818               		.section	.text.EVENT_USB_Device_Reset,"ax",@progbits
 819               	.global	EVENT_USB_Device_Reset
 821               	EVENT_USB_Device_Reset:
 822               	.LFB107:
 176:../../tmk_core/protocol/lufa/lufa.c ****     print("[R]");
 823               		.loc 1 176 0
 824               		.cfi_startproc
 825               	/* prologue: function */
 826               	/* frame size = 0 */
 827               	/* stack size = 0 */
 828               	.L__stack_usage = 0
 177:../../tmk_core/protocol/lufa/lufa.c **** }
 829               		.loc 1 177 0
 830 0000 80E0      		ldi r24,lo8(__c.4682)
 831 0002 90E0      		ldi r25,hi8(__c.4682)
 832 0004 0C94 0000 		jmp xputs
 833               	.LVL82:
 834               		.cfi_endproc
 835               	.LFE107:
 837               		.section	.text.EVENT_USB_Device_Suspend,"ax",@progbits
 838               	.global	EVENT_USB_Device_Suspend
 840               	EVENT_USB_Device_Suspend:
 841               	.LFB108:
 181:../../tmk_core/protocol/lufa/lufa.c ****     print("[S]");
 842               		.loc 1 181 0
 843               		.cfi_startproc
 844               	/* prologue: function */
 845               	/* frame size = 0 */
 846               	/* stack size = 0 */
 847               	.L__stack_usage = 0
 182:../../tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 848               		.loc 1 182 0
 849 0000 80E0      		ldi r24,lo8(__c.4686)
 850 0002 90E0      		ldi r25,hi8(__c.4686)
 851 0004 0C94 0000 		jmp xputs
 852               	.LVL83:
 853               		.cfi_endproc
 854               	.LFE108:
 856               		.section	.text.EVENT_USB_Device_WakeUp,"ax",@progbits
 857               	.global	EVENT_USB_Device_WakeUp
 859               	EVENT_USB_Device_WakeUp:
 860               	.LFB109:
 189:../../tmk_core/protocol/lufa/lufa.c ****     print("[W]");
 861               		.loc 1 189 0
 862               		.cfi_startproc
 863               	/* prologue: function */
 864               	/* frame size = 0 */
 865               	/* stack size = 0 */
 866               	.L__stack_usage = 0
 190:../../tmk_core/protocol/lufa/lufa.c ****     suspend_wakeup_init();
 867               		.loc 1 190 0
 868 0000 80E0      		ldi r24,lo8(__c.4690)
 869 0002 90E0      		ldi r25,hi8(__c.4690)
 870 0004 0E94 0000 		call xputs
 871               	.LVL84:
 191:../../tmk_core/protocol/lufa/lufa.c **** 
 872               		.loc 1 191 0
 873 0008 0C94 0000 		jmp suspend_wakeup_init
 874               	.LVL85:
 875               		.cfi_endproc
 876               	.LFE109:
 878               		.section	.text.EVENT_USB_Device_StartOfFrame,"ax",@progbits
 879               	.global	EVENT_USB_Device_StartOfFrame
 881               	EVENT_USB_Device_StartOfFrame:
 882               	.LFB110:
 208:../../tmk_core/protocol/lufa/lufa.c ****     static uint8_t count;
 883               		.loc 1 208 0
 884               		.cfi_startproc
 885               	/* prologue: function */
 886               	/* frame size = 0 */
 887               	/* stack size = 0 */
 888               	.L__stack_usage = 0
 210:../../tmk_core/protocol/lufa/lufa.c ****     count = 0;
 889               		.loc 1 210 0
 890 0000 2091 0000 		lds r18,count.4696
 891 0004 2F5F      		subi r18,lo8(-(1))
 892 0006 822F      		mov r24,r18
 893 0008 62E3      		ldi r22,lo8(50)
 894 000a 0E94 0000 		call __udivmodqi4
 895 000e 9923      		tst r25
 896 0010 01F0      		breq .L104
 897 0012 2093 0000 		sts count.4696,r18
 898 0016 0895      		ret
 899               	.L104:
 211:../../tmk_core/protocol/lufa/lufa.c **** 
 900               		.loc 1 211 0
 901 0018 1092 0000 		sts count.4696,__zero_reg__
 213:../../tmk_core/protocol/lufa/lufa.c ****     Console_Task();
 902               		.loc 1 213 0
 903 001c 8091 0000 		lds r24,console_flush
 904 0020 8823      		tst r24
 905 0022 01F0      		breq .L103
 906               	.LBB280:
 907               	.LBB281:
  85:../../tmk_core/protocol/lufa/lufa.c ****         return;
 908               		.loc 1 85 0
 909 0024 8091 0000 		lds r24,USB_DeviceState
 910 0028 8430      		cpi r24,lo8(4)
 911 002a 01F4      		brne .L107
 912               	.LBB282:
 913               	.LBB283:
 253:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 914               		.loc 2 253 0
 915 002c 8091 E900 		lds r24,233
 916 0030 8F70      		andi r24,lo8(15)
 917               	.LBB284:
 918               	.LBB285:
 240:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 919               		.loc 2 240 0
 920 0032 2091 EC00 		lds r18,236
 921 0036 922F      		mov r25,r18
 922 0038 9170      		andi r25,lo8(1)
 923 003a 20FD      		sbrc r18,0
 924 003c 90E8      		ldi r25,lo8(-128)
 925               	.L108:
 926               	.LBE285:
 927               	.LBE284:
 253:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 928               		.loc 2 253 0
 929 003e 892B      		or r24,r25
 930               	.LVL86:
 931               	.LBE283:
 932               	.LBE282:
 933               	.LBB286:
 934               	.LBB287:
 270:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 935               		.loc 2 270 0
 936 0040 94E0      		ldi r25,lo8(4)
 937 0042 9093 E900 		sts 233,r25
 938               	.LBE287:
 939               	.LBE286:
 940               	.LBB288:
 941               	.LBB289:
 313:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 942               		.loc 2 313 0
 943 0046 9091 EB00 		lds r25,235
 944               	.LBE289:
 945               	.LBE288:
 117:../../tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 946               		.loc 1 117 0
 947 004a 90FF      		sbrs r25,0
 948 004c 00C0      		rjmp .L112
 949               	.LBB290:
 950               	.LBB291:
 370:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 951               		.loc 2 370 0
 952 004e 9091 EE00 		lds r25,238
 953               	.LBE291:
 954               	.LBE290:
 117:../../tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 955               		.loc 1 117 0
 956 0052 97FF      		sbrs r25,7
 957 0054 00C0      		rjmp .L112
 958               	.L120:
 959               	.LBB292:
 960               	.LBB293:
 360:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 961               		.loc 2 360 0
 962 0056 9091 E800 		lds r25,232
 963               	.LBE293:
 964               	.LBE292:
 123:../../tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_8(0);
 965               		.loc 1 123 0
 966 005a 95FF      		sbrs r25,5
 967 005c 00C0      		rjmp .L124
 968               	.LVL87:
 969               	.LBB294:
 970               	.LBB295:
 971               		.loc 2 554 0
 972 005e 1092 F100 		sts 241,__zero_reg__
 973 0062 00C0      		rjmp .L120
 974               	.LVL88:
 975               	.L124:
 976               	.LBE295:
 977               	.LBE294:
 978               	.LBB296:
 979               	.LBB297:
 407:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 980               		.loc 2 407 0
 981 0064 9091 E800 		lds r25,232
 982               	.LBE297:
 983               	.LBE296:
 127:../../tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 984               		.loc 1 127 0
 985 0068 90FF      		sbrs r25,0
 986 006a 00C0      		rjmp .L112
 987               	.LBB298:
 988               	.LBB299:
 456:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 989               		.loc 2 456 0
 990 006c 9091 E800 		lds r25,232
 991 0070 9E77      		andi r25,lo8(126)
 992 0072 9093 E800 		sts 232,r25
 993               	.L112:
 994               	.LVL89:
 995               	.LBE299:
 996               	.LBE298:
 997               	.LBB300:
 998               	.LBB301:
 270:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 999               		.loc 2 270 0
 1000 0076 8F70      		andi r24,lo8(15)
 1001               	.LVL90:
 1002 0078 8093 E900 		sts 233,r24
 1003               	.LVL91:
 1004               	.L107:
 1005               	.LBE301:
 1006               	.LBE300:
 1007               	.LBE281:
 1008               	.LBE280:
 215:../../tmk_core/protocol/lufa/lufa.c **** }
 1009               		.loc 1 215 0
 1010 007c 1092 0000 		sts console_flush,__zero_reg__
 1011               	.L103:
 1012 0080 0895      		ret
 1013               		.cfi_endproc
 1014               	.LFE110:
 1016               		.section	.text.EVENT_USB_Device_ConfigurationChanged,"ax",@progbits
 1017               	.global	EVENT_USB_Device_ConfigurationChanged
 1019               	EVENT_USB_Device_ConfigurationChanged:
 1020               	.LFB111:
 226:../../tmk_core/protocol/lufa/lufa.c ****     bool ConfigSuccess = true;
 1021               		.loc 1 226 0
 1022               		.cfi_startproc
 1023               	/* prologue: function */
 1024               	/* frame size = 0 */
 1025               	/* stack size = 0 */
 1026               	.L__stack_usage = 0
 1027               	.LVL92:
 1028               	.LBB302:
 1029               	.LBB303:
 210:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 1030               		.loc 2 210 0
 1031 0000 42E0      		ldi r20,lo8(2)
 1032 0002 61EC      		ldi r22,lo8(-63)
 1033 0004 81E0      		ldi r24,lo8(1)
 1034 0006 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 1035               	.LVL93:
 1036               	.LBE303:
 1037               	.LBE302:
 1038               	.LBB304:
 1039               	.LBB305:
 1040 000a 42E0      		ldi r20,lo8(2)
 1041 000c 61EC      		ldi r22,lo8(-63)
 1042 000e 82E0      		ldi r24,lo8(2)
 1043 0010 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 1044               	.LVL94:
 1045               	.LBE305:
 1046               	.LBE304:
 1047               	.LBB306:
 1048               	.LBB307:
 1049 0014 42E0      		ldi r20,lo8(2)
 1050 0016 61EC      		ldi r22,lo8(-63)
 1051 0018 83E0      		ldi r24,lo8(3)
 1052 001a 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 1053               	.LVL95:
 1054               	.LBE307:
 1055               	.LBE306:
 1056               	.LBB308:
 1057               	.LBB309:
 1058 001e 42E2      		ldi r20,lo8(34)
 1059 0020 61EC      		ldi r22,lo8(-63)
 1060 0022 84E0      		ldi r24,lo8(4)
 1061 0024 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 1062               	.LVL96:
 1063               	.LBE309:
 1064               	.LBE308:
 1065               	.LBB310:
 1066               	.LBB311:
 1067 0028 42E1      		ldi r20,lo8(18)
 1068 002a 61EC      		ldi r22,lo8(-63)
 1069 002c 85E0      		ldi r24,lo8(5)
 1070 002e 0C94 0000 		jmp Endpoint_ConfigureEndpoint_Prv
 1071               	.LVL97:
 1072               	.LBE311:
 1073               	.LBE310:
 1074               		.cfi_endproc
 1075               	.LFE111:
 1077               		.section	.text.EVENT_USB_Device_ControlRequest,"ax",@progbits
 1078               	.global	EVENT_USB_Device_ControlRequest
 1080               	EVENT_USB_Device_ControlRequest:
 1081               	.LFB112:
 279:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t* ReportData = NULL;
 1082               		.loc 1 279 0
 1083               		.cfi_startproc
 1084               	/* prologue: function */
 1085               	/* frame size = 0 */
 1086               	/* stack size = 0 */
 1087               	.L__stack_usage = 0
 1088               	.LVL98:
 284:../../tmk_core/protocol/lufa/lufa.c ****     {
 1089               		.loc 1 284 0
 1090 0000 8091 0000 		lds r24,USB_ControlRequest+1
 1091 0004 8330      		cpi r24,lo8(3)
 1092 0006 01F4      		brne .+2
 1093 0008 00C0      		rjmp .L128
 1094 000a 00F4      		brsh .L129
 1095 000c 8130      		cpi r24,lo8(1)
 1096 000e 01F0      		breq .L130
 1097 0010 8230      		cpi r24,lo8(2)
 1098 0012 01F4      		brne .+2
 1099 0014 00C0      		rjmp .L131
 1100 0016 0895      		ret
 1101               	.L129:
 1102 0018 8A30      		cpi r24,lo8(10)
 1103 001a 01F4      		brne .+2
 1104 001c 00C0      		rjmp .L132
 1105 001e 8B30      		cpi r24,lo8(11)
 1106 0020 01F4      		brne .+2
 1107 0022 00C0      		rjmp .L133
 1108 0024 8930      		cpi r24,lo8(9)
 1109 0026 01F0      		breq .+2
 1110 0028 00C0      		rjmp .L126
 1111 002a 00C0      		rjmp .L161
 1112               	.L130:
 287:../../tmk_core/protocol/lufa/lufa.c ****             {
 1113               		.loc 1 287 0
 1114 002c 8091 0000 		lds r24,USB_ControlRequest
 1115 0030 813A      		cpi r24,lo8(-95)
 1116 0032 01F0      		breq .+2
 1117 0034 00C0      		rjmp .L126
 1118               	.LBB312:
 1119               	.LBB313:
 444:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1120               		.loc 2 444 0
 1121 0036 8091 E800 		lds r24,232
 1122 003a 877F      		andi r24,lo8(-9)
 1123 003c 8093 E800 		sts 232,r24
 1124               	.LBE313:
 1125               	.LBE312:
 292:../../tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 1126               		.loc 1 292 0
 1127 0040 8091 0000 		lds r24,USB_ControlRequest+4
 1128 0044 9091 0000 		lds r25,USB_ControlRequest+4+1
 1129 0048 892B      		or r24,r25
 1130 004a 01F4      		brne .L158
 296:../../tmk_core/protocol/lufa/lufa.c ****                     break;
 1131               		.loc 1 296 0
 1132 004c 60E1      		ldi r22,lo8(16)
 295:../../tmk_core/protocol/lufa/lufa.c ****                     ReportSize = sizeof(keyboard_report_sent);
 1133               		.loc 1 295 0
 1134 004e 80E0      		ldi r24,lo8(keyboard_report_sent)
 1135 0050 90E0      		ldi r25,hi8(keyboard_report_sent)
 1136 0052 00C0      		rjmp .L136
 1137               	.L158:
 281:../../tmk_core/protocol/lufa/lufa.c **** 
 1138               		.loc 1 281 0
 1139 0054 60E0      		ldi r22,0
 280:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 1140               		.loc 1 280 0
 1141 0056 80E0      		ldi r24,0
 1142 0058 90E0      		ldi r25,0
 1143               	.L136:
 1144               	.LVL99:
 301:../../tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearOUT();
 1145               		.loc 1 301 0
 1146 005a 70E0      		ldi r23,0
 1147 005c 0E94 0000 		call Endpoint_Write_Control_Stream_LE
 1148               	.LVL100:
 1149               	.LBB314:
 1150               	.LBB315:
 471:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1151               		.loc 2 471 0
 1152 0060 8091 E800 		lds r24,232
 1153 0064 8B77      		andi r24,lo8(123)
 1154 0066 8093 E800 		sts 232,r24
 1155 006a 0895      		ret
 1156               	.LVL101:
 1157               	.L161:
 1158               	.LBE315:
 1159               	.LBE314:
 307:../../tmk_core/protocol/lufa/lufa.c ****             {
 1160               		.loc 1 307 0
 1161 006c 8091 0000 		lds r24,USB_ControlRequest
 1162 0070 8132      		cpi r24,lo8(33)
 1163 0072 01F0      		breq .+2
 1164 0074 00C0      		rjmp .L126
 311:../../tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 1165               		.loc 1 311 0
 1166 0076 8091 0000 		lds r24,USB_ControlRequest+4
 1167 007a 9091 0000 		lds r25,USB_ControlRequest+4+1
 1168 007e 0097      		sbiw r24,0
 1169 0080 01F0      		breq .L139
 1170 0082 0497      		sbiw r24,4
 1171 0084 01F0      		breq .+2
 1172 0086 00C0      		rjmp .L126
 1173               	.L139:
 1174               	.LBB316:
 1175               	.LBB317:
 444:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1176               		.loc 2 444 0
 1177 0088 8091 E800 		lds r24,232
 1178 008c 877F      		andi r24,lo8(-9)
 1179 008e 8093 E800 		sts 232,r24
 1180               	.L140:
 1181               	.LBE317:
 1182               	.LBE316:
 1183               	.LBB318:
 1184               	.LBB319:
 419:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1185               		.loc 2 419 0
 1186 0092 8091 E800 		lds r24,232
 1187               	.LBE319:
 1188               	.LBE318:
 318:../../tmk_core/protocol/lufa/lufa.c ****                         if (USB_DeviceState == DEVICE_STATE_Unattached)
 1189               		.loc 1 318 0
 1190 0096 82FD      		sbrc r24,2
 1191 0098 00C0      		rjmp .L162
 319:../../tmk_core/protocol/lufa/lufa.c ****                           return;
 1192               		.loc 1 319 0
 1193 009a 8091 0000 		lds r24,USB_DeviceState
 1194 009e 8111      		cpse r24,__zero_reg__
 1195 00a0 00C0      		rjmp .L140
 1196 00a2 00C0      		rjmp .L126
 1197               	.L162:
 1198               	.LBB320:
 1199               	.LBB321:
 542:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1200               		.loc 2 542 0
 1201 00a4 8091 F100 		lds r24,241
 1202               	.LBE321:
 1203               	.LBE320:
 322:../../tmk_core/protocol/lufa/lufa.c **** 
 1204               		.loc 1 322 0
 1205 00a8 8093 0000 		sts keyboard_led_stats,r24
 1206               	.LBB322:
 1207               	.LBB323:
 471:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1208               		.loc 2 471 0
 1209 00ac 8091 E800 		lds r24,232
 1210 00b0 8B77      		andi r24,lo8(123)
 1211 00b2 00C0      		rjmp .L159
 1212               	.L128:
 1213               	.LBE323:
 1214               	.LBE322:
 334:../../tmk_core/protocol/lufa/lufa.c ****             {
 1215               		.loc 1 334 0
 1216 00b4 8091 0000 		lds r24,USB_ControlRequest
 1217 00b8 813A      		cpi r24,lo8(-95)
 1218 00ba 01F0      		breq .+2
 1219 00bc 00C0      		rjmp .L126
 336:../../tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 1220               		.loc 1 336 0
 1221 00be 8091 0000 		lds r24,USB_ControlRequest+4
 1222 00c2 9091 0000 		lds r25,USB_ControlRequest+4+1
 1223 00c6 892B      		or r24,r25
 1224 00c8 01F0      		breq .+2
 1225 00ca 00C0      		rjmp .L126
 1226               	.LBB324:
 1227               	.LBB325:
 444:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1228               		.loc 2 444 0
 1229 00cc 8091 E800 		lds r24,232
 1230 00d0 877F      		andi r24,lo8(-9)
 1231 00d2 8093 E800 		sts 232,r24
 1232               	.L142:
 1233               	.LBE325:
 1234               	.LBE324:
 1235               	.LBB326:
 1236               	.LBB327:
 407:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1237               		.loc 2 407 0 discriminator 1
 1238 00d6 8091 E800 		lds r24,232
 1239               	.LBE327:
 1240               	.LBE326:
 338:../../tmk_core/protocol/lufa/lufa.c ****                     Endpoint_Write_8(keyboard_protocol);
 1241               		.loc 1 338 0 discriminator 1
 1242 00da 80FF      		sbrs r24,0
 1243 00dc 00C0      		rjmp .L142
 339:../../tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearIN();
 1244               		.loc 1 339 0
 1245 00de 8091 0000 		lds r24,keyboard_protocol
 1246               	.LVL102:
 1247 00e2 00C0      		rjmp .L160
 1248               	.LVL103:
 1249               	.L133:
 347:../../tmk_core/protocol/lufa/lufa.c ****             {
 1250               		.loc 1 347 0
 1251 00e4 8091 0000 		lds r24,USB_ControlRequest
 1252 00e8 8132      		cpi r24,lo8(33)
 1253 00ea 01F4      		brne .L126
 349:../../tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 1254               		.loc 1 349 0
 1255 00ec 8091 0000 		lds r24,USB_ControlRequest+4
 1256 00f0 9091 0000 		lds r25,USB_ControlRequest+4+1
 1257 00f4 892B      		or r24,r25
 1258 00f6 01F4      		brne .L126
 1259               	.LBB328:
 1260               	.LBB329:
 444:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1261               		.loc 2 444 0
 1262 00f8 8091 E800 		lds r24,232
 1263 00fc 877F      		andi r24,lo8(-9)
 1264 00fe 8093 E800 		sts 232,r24
 1265               	.LBE329:
 1266               	.LBE328:
 351:../../tmk_core/protocol/lufa/lufa.c **** 
 1267               		.loc 1 351 0
 1268 0102 0E94 0000 		call Endpoint_ClearStatusStage
 1269               	.LVL104:
 353:../../tmk_core/protocol/lufa/lufa.c ****                     clear_keyboard();
 1270               		.loc 1 353 0
 1271 0106 8091 0000 		lds r24,USB_ControlRequest+2
 1272 010a 8093 0000 		sts keyboard_protocol,r24
 354:../../tmk_core/protocol/lufa/lufa.c ****                 }
 1273               		.loc 1 354 0
 1274 010e 0C94 0000 		jmp clear_keyboard
 1275               	.LVL105:
 1276               	.L132:
 360:../../tmk_core/protocol/lufa/lufa.c ****             {
 1277               		.loc 1 360 0
 1278 0112 8091 0000 		lds r24,USB_ControlRequest
 1279 0116 8132      		cpi r24,lo8(33)
 1280 0118 01F4      		brne .L126
 1281               	.LBB330:
 1282               	.LBB331:
 444:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1283               		.loc 2 444 0
 1284 011a 8091 E800 		lds r24,232
 1285 011e 877F      		andi r24,lo8(-9)
 1286 0120 8093 E800 		sts 232,r24
 1287               	.LBE331:
 1288               	.LBE330:
 363:../../tmk_core/protocol/lufa/lufa.c **** 
 1289               		.loc 1 363 0
 1290 0124 0E94 0000 		call Endpoint_ClearStatusStage
 1291               	.LVL106:
 365:../../tmk_core/protocol/lufa/lufa.c ****             }
 1292               		.loc 1 365 0
 1293 0128 8091 0000 		lds r24,USB_ControlRequest+3
 1294 012c 8093 0000 		sts keyboard_idle,r24
 1295 0130 0895      		ret
 1296               	.L131:
 370:../../tmk_core/protocol/lufa/lufa.c ****             {
 1297               		.loc 1 370 0
 1298 0132 8091 0000 		lds r24,USB_ControlRequest
 1299 0136 813A      		cpi r24,lo8(-95)
 1300 0138 01F4      		brne .L126
 1301               	.LBB332:
 1302               	.LBB333:
 444:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1303               		.loc 2 444 0
 1304 013a 8091 E800 		lds r24,232
 1305 013e 877F      		andi r24,lo8(-9)
 1306 0140 8093 E800 		sts 232,r24
 1307               	.L143:
 1308               	.LBE333:
 1309               	.LBE332:
 1310               	.LBB334:
 1311               	.LBB335:
 407:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1312               		.loc 2 407 0 discriminator 1
 1313 0144 8091 E800 		lds r24,232
 1314               	.LBE335:
 1315               	.LBE334:
 373:../../tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_8(keyboard_idle);
 1316               		.loc 1 373 0 discriminator 1
 1317 0148 80FF      		sbrs r24,0
 1318 014a 00C0      		rjmp .L143
 374:../../tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearIN();
 1319               		.loc 1 374 0
 1320 014c 8091 0000 		lds r24,keyboard_idle
 1321               	.L160:
 1322               	.LVL107:
 1323               	.LBB336:
 1324               	.LBB337:
 1325               		.loc 2 554 0
 1326 0150 8093 F100 		sts 241,r24
 1327               	.LBE337:
 1328               	.LBE336:
 1329               	.LBB338:
 1330               	.LBB339:
 456:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1331               		.loc 2 456 0
 1332 0154 8091 E800 		lds r24,232
 1333               	.LVL108:
 1334 0158 8E77      		andi r24,lo8(126)
 1335               	.LVL109:
 1336               	.L159:
 1337 015a 8093 E800 		sts 232,r24
 1338               	.LBE339:
 1339               	.LBE338:
 376:../../tmk_core/protocol/lufa/lufa.c ****             }
 1340               		.loc 1 376 0
 1341 015e 0C94 0000 		jmp Endpoint_ClearStatusStage
 1342               	.LVL110:
 1343               	.L126:
 1344 0162 0895      		ret
 1345               		.cfi_endproc
 1346               	.LFE112:
 1348               		.section	.text.startup.main,"ax",@progbits
 1349               		.weak	main
 1351               	main:
 1352               	.LFB121:
 558:../../tmk_core/protocol/lufa/lufa.c **** #else
 559:../../tmk_core/protocol/lufa/lufa.c **** int8_t sendchar(uint8_t c)
 560:../../tmk_core/protocol/lufa/lufa.c **** {
 561:../../tmk_core/protocol/lufa/lufa.c ****     return 0;
 562:../../tmk_core/protocol/lufa/lufa.c **** }
 563:../../tmk_core/protocol/lufa/lufa.c **** #endif
 564:../../tmk_core/protocol/lufa/lufa.c **** 
 565:../../tmk_core/protocol/lufa/lufa.c **** 
 566:../../tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 567:../../tmk_core/protocol/lufa/lufa.c ****  * main
 568:../../tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 569:../../tmk_core/protocol/lufa/lufa.c **** static void setup_mcu(void)
 570:../../tmk_core/protocol/lufa/lufa.c **** {
 571:../../tmk_core/protocol/lufa/lufa.c ****     /* Disable watchdog if enabled by bootloader/fuses */
 572:../../tmk_core/protocol/lufa/lufa.c ****     MCUSR &= ~(1 << WDRF);
 573:../../tmk_core/protocol/lufa/lufa.c ****     wdt_disable();
 574:../../tmk_core/protocol/lufa/lufa.c **** 
 575:../../tmk_core/protocol/lufa/lufa.c ****     /* Disable clock division */
 576:../../tmk_core/protocol/lufa/lufa.c ****     clock_prescale_set(clock_div_1);
 577:../../tmk_core/protocol/lufa/lufa.c **** }
 578:../../tmk_core/protocol/lufa/lufa.c **** 
 579:../../tmk_core/protocol/lufa/lufa.c **** static void setup_usb(void)
 580:../../tmk_core/protocol/lufa/lufa.c **** {
 581:../../tmk_core/protocol/lufa/lufa.c ****     // Leonardo needs. Without this USB device is not recognized.
 582:../../tmk_core/protocol/lufa/lufa.c ****     USB_Disable();
 583:../../tmk_core/protocol/lufa/lufa.c **** 
 584:../../tmk_core/protocol/lufa/lufa.c ****     USB_Init();
 585:../../tmk_core/protocol/lufa/lufa.c **** 
 586:../../tmk_core/protocol/lufa/lufa.c ****     // for Console_Task
 587:../../tmk_core/protocol/lufa/lufa.c ****     USB_Device_EnableSOFEvents();
 588:../../tmk_core/protocol/lufa/lufa.c ****     print_set_sendchar(sendchar);
 589:../../tmk_core/protocol/lufa/lufa.c **** }
 590:../../tmk_core/protocol/lufa/lufa.c **** 
 591:../../tmk_core/protocol/lufa/lufa.c **** int main(void)  __attribute__ ((weak));
 592:../../tmk_core/protocol/lufa/lufa.c **** int main(void)
 593:../../tmk_core/protocol/lufa/lufa.c **** {
 1353               		.loc 1 593 0
 1354               		.cfi_startproc
 1355               	/* prologue: function */
 1356               	/* frame size = 0 */
 1357               	/* stack size = 0 */
 1358               	.L__stack_usage = 0
 1359               	.LBB352:
 1360               	.LBB353:
 572:../../tmk_core/protocol/lufa/lufa.c ****     wdt_disable();
 1361               		.loc 1 572 0
 1362 0000 84B7      		in r24,0x34
 1363 0002 877F      		andi r24,lo8(-9)
 1364 0004 84BF      		out 0x34,r24
 573:../../tmk_core/protocol/lufa/lufa.c **** 
 1365               		.loc 1 573 0
 1366 0006 88E1      		ldi r24,lo8(24)
 1367               	/* #APP */
 1368               	 ;  573 "../../tmk_core/protocol/lufa/lufa.c" 1
 1369 0008 0FB6      		in __tmp_reg__, __SREG__
 1370 000a F894      		cli
 1371 000c 8093 6000 		sts 96, r24
 1372 0010 1092 6000 		sts 96, __zero_reg__
 1373 0014 0FBE      		out __SREG__,__tmp_reg__
 1374               		
 1375               	 ;  0 "" 2
 1376               	.LVL111:
 1377               	/* #NOAPP */
 1378               	.LBB354:
 1379               	.LBB355:
 1380               		.file 5 "/usr/avr/include/avr/power.h"
   1:/usr/avr/include/avr/power.h **** /* Copyright (c) 2006, 2007, 2008  Eric B. Weddington
   2:/usr/avr/include/avr/power.h ****    All rights reserved.
   3:/usr/avr/include/avr/power.h **** 
   4:/usr/avr/include/avr/power.h ****    Redistribution and use in source and binary forms, with or without
   5:/usr/avr/include/avr/power.h ****    modification, are permitted provided that the following conditions are met:
   6:/usr/avr/include/avr/power.h **** 
   7:/usr/avr/include/avr/power.h ****    * Redistributions of source code must retain the above copyright
   8:/usr/avr/include/avr/power.h ****      notice, this list of conditions and the following disclaimer.
   9:/usr/avr/include/avr/power.h ****    * Redistributions in binary form must reproduce the above copyright
  10:/usr/avr/include/avr/power.h ****      notice, this list of conditions and the following disclaimer in
  11:/usr/avr/include/avr/power.h ****      the documentation and/or other materials provided with the
  12:/usr/avr/include/avr/power.h ****      distribution.
  13:/usr/avr/include/avr/power.h ****    * Neither the name of the copyright holders nor the names of
  14:/usr/avr/include/avr/power.h ****      contributors may be used to endorse or promote products derived
  15:/usr/avr/include/avr/power.h ****      from this software without specific prior written permission.
  16:/usr/avr/include/avr/power.h **** 
  17:/usr/avr/include/avr/power.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  18:/usr/avr/include/avr/power.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  19:/usr/avr/include/avr/power.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  20:/usr/avr/include/avr/power.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  21:/usr/avr/include/avr/power.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  22:/usr/avr/include/avr/power.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  23:/usr/avr/include/avr/power.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  24:/usr/avr/include/avr/power.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  25:/usr/avr/include/avr/power.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  26:/usr/avr/include/avr/power.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  27:/usr/avr/include/avr/power.h ****   POSSIBILITY OF SUCH DAMAGE. */
  28:/usr/avr/include/avr/power.h **** 
  29:/usr/avr/include/avr/power.h **** /* $Id: power.h 2254 2011-09-26 15:06:50Z arcanum $ */
  30:/usr/avr/include/avr/power.h **** 
  31:/usr/avr/include/avr/power.h **** #ifndef _AVR_POWER_H_
  32:/usr/avr/include/avr/power.h **** #define _AVR_POWER_H_   1
  33:/usr/avr/include/avr/power.h **** 
  34:/usr/avr/include/avr/power.h **** #include <avr/io.h>
  35:/usr/avr/include/avr/power.h **** #include <stdint.h>
  36:/usr/avr/include/avr/power.h **** 
  37:/usr/avr/include/avr/power.h **** 
  38:/usr/avr/include/avr/power.h **** /** \file */
  39:/usr/avr/include/avr/power.h **** /** \defgroup avr_power <avr/power.h>: Power Reduction Management
  40:/usr/avr/include/avr/power.h **** 
  41:/usr/avr/include/avr/power.h **** \code #include <avr/power.h>\endcode
  42:/usr/avr/include/avr/power.h **** 
  43:/usr/avr/include/avr/power.h **** Many AVRs contain a Power Reduction Register (PRR) or Registers (PRRx) that 
  44:/usr/avr/include/avr/power.h **** allow you to reduce power consumption by disabling or enabling various on-board 
  45:/usr/avr/include/avr/power.h **** peripherals as needed.
  46:/usr/avr/include/avr/power.h **** 
  47:/usr/avr/include/avr/power.h **** There are many macros in this header file that provide an easy interface
  48:/usr/avr/include/avr/power.h **** to enable or disable on-board peripherals to reduce power. See the table below.
  49:/usr/avr/include/avr/power.h **** 
  50:/usr/avr/include/avr/power.h **** \note Not all AVR devices have a Power Reduction Register (for example
  51:/usr/avr/include/avr/power.h **** the ATmega128). On those devices without a Power Reduction Register, these 
  52:/usr/avr/include/avr/power.h **** macros are not available.
  53:/usr/avr/include/avr/power.h **** 
  54:/usr/avr/include/avr/power.h **** \note Not all AVR devices contain the same peripherals (for example, the LCD
  55:/usr/avr/include/avr/power.h **** interface), or they will be named differently (for example, USART and 
  56:/usr/avr/include/avr/power.h **** USART0). Please consult your device's datasheet, or the header file, to 
  57:/usr/avr/include/avr/power.h **** find out which macros are applicable to your device.
  58:/usr/avr/include/avr/power.h **** 
  59:/usr/avr/include/avr/power.h **** */
  60:/usr/avr/include/avr/power.h **** 
  61:/usr/avr/include/avr/power.h **** 
  62:/usr/avr/include/avr/power.h **** /** \addtogroup avr_power
  63:/usr/avr/include/avr/power.h **** 
  64:/usr/avr/include/avr/power.h **** \anchor avr_powermacros
  65:/usr/avr/include/avr/power.h **** <small>
  66:/usr/avr/include/avr/power.h **** <center>
  67:/usr/avr/include/avr/power.h **** <table border="3">
  68:/usr/avr/include/avr/power.h ****   <tr>
  69:/usr/avr/include/avr/power.h ****     <td width="10%"><strong>Power Macro</strong></td>
  70:/usr/avr/include/avr/power.h ****     <td width="15%"><strong>Description</strong></td>
  71:/usr/avr/include/avr/power.h ****     <td width="75%"><strong>Applicable for device</strong></td>
  72:/usr/avr/include/avr/power.h ****   </tr>
  73:/usr/avr/include/avr/power.h **** 
  74:/usr/avr/include/avr/power.h ****   <tr>
  75:/usr/avr/include/avr/power.h ****    <td>power_aca_disable()</td>
  76:/usr/avr/include/avr/power.h ****     <td> Disable The Analog Comparator On PortA </td>
  77:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
  78:/usr/avr/include/avr/power.h ****   </tr>
  79:/usr/avr/include/avr/power.h **** 
  80:/usr/avr/include/avr/power.h ****   <tr>
  81:/usr/avr/include/avr/power.h ****    <td>power_aca_enable()</td>
  82:/usr/avr/include/avr/power.h ****     <td> Enable The Analog Comparator On PortA </td>
  83:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
  84:/usr/avr/include/avr/power.h ****   </tr>
  85:/usr/avr/include/avr/power.h **** 
  86:/usr/avr/include/avr/power.h ****   <tr>
  87:/usr/avr/include/avr/power.h ****    <td>power_acb_disable()</td>
  88:/usr/avr/include/avr/power.h ****     <td> Disable The Analog Comparator On PortB </td>
  89:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
  90:/usr/avr/include/avr/power.h ****   </tr>
  91:/usr/avr/include/avr/power.h **** 
  92:/usr/avr/include/avr/power.h ****   <tr>
  93:/usr/avr/include/avr/power.h ****    <td>power_acb_enable()</td>
  94:/usr/avr/include/avr/power.h ****     <td> Enable The Analog Comparator On PortB </td>
  95:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
  96:/usr/avr/include/avr/power.h ****   </tr>
  97:/usr/avr/include/avr/power.h **** 
  98:/usr/avr/include/avr/power.h ****   <tr>
  99:/usr/avr/include/avr/power.h ****    <td>power_adc_disable()</td>
 100:/usr/avr/include/avr/power.h ****      <td>Disable the Analog to Digital Converter module.</td>
 101:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 102:/usr/avr/include/avr/power.h ****   </tr>
 103:/usr/avr/include/avr/power.h **** 
 104:/usr/avr/include/avr/power.h ****   <tr>
 105:/usr/avr/include/avr/power.h ****    <td>power_adc_enable()</td>
 106:/usr/avr/include/avr/power.h ****      <td>Enable the Analog to Digital Converter module.</td>
 107:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 108:/usr/avr/include/avr/power.h ****   </tr>
 109:/usr/avr/include/avr/power.h **** 
 110:/usr/avr/include/avr/power.h ****   <tr>
 111:/usr/avr/include/avr/power.h ****    <td>power_adca_disable()</td>
 112:/usr/avr/include/avr/power.h ****     <td> Disable the Analog to Digital Converter module On PortA </td>
 113:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 114:/usr/avr/include/avr/power.h ****   </tr>
 115:/usr/avr/include/avr/power.h **** 
 116:/usr/avr/include/avr/power.h ****   <tr>
 117:/usr/avr/include/avr/power.h ****    <td>power_adca_enable()</td>
 118:/usr/avr/include/avr/power.h ****     <td> Enable the Analog to Digital Converter module On PortA </td>
 119:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 120:/usr/avr/include/avr/power.h ****   </tr>
 121:/usr/avr/include/avr/power.h **** 
 122:/usr/avr/include/avr/power.h ****   <tr>
 123:/usr/avr/include/avr/power.h ****    <td>power_adcb_disable()</td>
 124:/usr/avr/include/avr/power.h ****     <td> Disable the Analog to Digital Converter module On PortB </td>
 125:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 126:/usr/avr/include/avr/power.h ****   </tr>
 127:/usr/avr/include/avr/power.h **** 
 128:/usr/avr/include/avr/power.h ****   <tr>
 129:/usr/avr/include/avr/power.h ****    <td>power_adcb_enable()</td>
 130:/usr/avr/include/avr/power.h ****     <td> Enable the Analog to Digital Converter module On PortB </td>
 131:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 132:/usr/avr/include/avr/power.h ****   </tr>
 133:/usr/avr/include/avr/power.h **** 
 134:/usr/avr/include/avr/power.h ****   <tr>
 135:/usr/avr/include/avr/power.h ****    <td>power_aes_disable()</td>
 136:/usr/avr/include/avr/power.h ****     <td> Disable the AES module </td>
 137:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega32A4U, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A
 138:/usr/avr/include/avr/power.h ****   </tr>
 139:/usr/avr/include/avr/power.h **** 
 140:/usr/avr/include/avr/power.h ****   <tr>
 141:/usr/avr/include/avr/power.h ****    <td>power_aes_enable()</td>
 142:/usr/avr/include/avr/power.h ****     <td> Enable the AES module </td>
 143:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega32A4U, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A
 144:/usr/avr/include/avr/power.h ****   </tr>
 145:/usr/avr/include/avr/power.h **** 
 146:/usr/avr/include/avr/power.h ****   <tr>
 147:/usr/avr/include/avr/power.h ****    <td>power_all_disable()</td>
 148:/usr/avr/include/avr/power.h ****      <td>Disable all modules.</td>
 149:/usr/avr/include/avr/power.h ****     <td>ATxmega384C3, ATxmega256A3BU, ATxmega16A4U, ATxmega32A4U, ATxmega64A3U, ATxmega64A4U, ATxme
 150:/usr/avr/include/avr/power.h ****   </tr>
 151:/usr/avr/include/avr/power.h **** 
 152:/usr/avr/include/avr/power.h ****   <tr>
 153:/usr/avr/include/avr/power.h ****    <td>power_all_enable()</td>
 154:/usr/avr/include/avr/power.h ****      <td>Enable all modules.</td>
 155:/usr/avr/include/avr/power.h ****     <td>ATxmega384C3, ATxmega256A3BU, ATxmega16A4U, ATxmega32A4U, ATxmega64A3U, ATxmega64A4U, ATxme
 156:/usr/avr/include/avr/power.h ****   </tr>
 157:/usr/avr/include/avr/power.h **** 
 158:/usr/avr/include/avr/power.h ****   <tr>
 159:/usr/avr/include/avr/power.h ****    <td>power_can_disable()</td>
 160:/usr/avr/include/avr/power.h ****     <td> Disable the CAN module </td>
 161:/usr/avr/include/avr/power.h ****     <td>ATmega16M1, ATmega32C1, ATmega32M1, ATmega64C1, ATmega64M1</td>
 162:/usr/avr/include/avr/power.h ****   </tr>
 163:/usr/avr/include/avr/power.h **** 
 164:/usr/avr/include/avr/power.h ****   <tr>
 165:/usr/avr/include/avr/power.h ****    <td>power_can_enable()</td>
 166:/usr/avr/include/avr/power.h ****     <td> Enable the CAN module </td>
 167:/usr/avr/include/avr/power.h ****     <td>ATmega16M1, ATmega32C1, ATmega32M1, ATmega64C1, ATmega64M1</td>
 168:/usr/avr/include/avr/power.h ****   </tr>
 169:/usr/avr/include/avr/power.h **** 
 170:/usr/avr/include/avr/power.h ****   <tr>
 171:/usr/avr/include/avr/power.h ****    <td>power_cinterface_disable()</td>
 172:/usr/avr/include/avr/power.h ****     <td> Disable the CINTERFACE module </td>
 173:/usr/avr/include/avr/power.h ****     <td>ATA5790, ATA5795</td>
 174:/usr/avr/include/avr/power.h ****   </tr>
 175:/usr/avr/include/avr/power.h **** 
 176:/usr/avr/include/avr/power.h ****   <tr>
 177:/usr/avr/include/avr/power.h ****    <td>power_cinterface_enable()</td>
 178:/usr/avr/include/avr/power.h ****     <td> Enable the CINTERFACE module </td>
 179:/usr/avr/include/avr/power.h ****     <td>ATA5790, ATA5795</td>
 180:/usr/avr/include/avr/power.h ****   </tr>
 181:/usr/avr/include/avr/power.h **** 
 182:/usr/avr/include/avr/power.h ****   <tr>
 183:/usr/avr/include/avr/power.h ****    <td>power_crypto_disable()</td>
 184:/usr/avr/include/avr/power.h ****     <td> Disable the CRYPTO module </td>
 185:/usr/avr/include/avr/power.h ****     <td>ATA5790, ATA5795</td>
 186:/usr/avr/include/avr/power.h ****   </tr>
 187:/usr/avr/include/avr/power.h **** 
 188:/usr/avr/include/avr/power.h ****   <tr>
 189:/usr/avr/include/avr/power.h ****    <td>power_crypto_enable()</td>
 190:/usr/avr/include/avr/power.h ****     <td> Enable the CRYPTO module </td>
 191:/usr/avr/include/avr/power.h ****     <td>ATA5790, ATA5795</td>
 192:/usr/avr/include/avr/power.h ****   </tr>
 193:/usr/avr/include/avr/power.h **** 
 194:/usr/avr/include/avr/power.h ****   <tr>
 195:/usr/avr/include/avr/power.h ****    <td>power_daca_disable()</td>
 196:/usr/avr/include/avr/power.h ****     <td> Disable the DAC module on PortA </td>
 197:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega32A4U, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A
 198:/usr/avr/include/avr/power.h ****   </tr>
 199:/usr/avr/include/avr/power.h **** 
 200:/usr/avr/include/avr/power.h ****   <tr>
 201:/usr/avr/include/avr/power.h ****    <td>power_daca_enable()</td>
 202:/usr/avr/include/avr/power.h ****     <td> Enable the DAC module on PortA </td>
 203:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega32A4U, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A
 204:/usr/avr/include/avr/power.h ****   </tr>
 205:/usr/avr/include/avr/power.h **** 
 206:/usr/avr/include/avr/power.h ****   <tr>
 207:/usr/avr/include/avr/power.h ****    <td>power_dacb_disable()</td>
 208:/usr/avr/include/avr/power.h ****     <td> Disable the DAC module on PortB </td>
 209:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega32A4U, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A
 210:/usr/avr/include/avr/power.h ****   </tr>
 211:/usr/avr/include/avr/power.h **** 
 212:/usr/avr/include/avr/power.h ****   <tr>
 213:/usr/avr/include/avr/power.h ****    <td>power_dacb_enable()</td>
 214:/usr/avr/include/avr/power.h ****     <td> Enable the DAC module on PortB </td>
 215:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega32A4U, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A
 216:/usr/avr/include/avr/power.h ****   </tr>
 217:/usr/avr/include/avr/power.h **** 
 218:/usr/avr/include/avr/power.h ****   <tr>
 219:/usr/avr/include/avr/power.h ****    <td>power_dma_disable()</td>
 220:/usr/avr/include/avr/power.h ****     <td> Disable the DMA module </td>
 221:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega32A4U, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A
 222:/usr/avr/include/avr/power.h ****   </tr>
 223:/usr/avr/include/avr/power.h **** 
 224:/usr/avr/include/avr/power.h ****   <tr>
 225:/usr/avr/include/avr/power.h ****    <td>power_dma_enable()</td>
 226:/usr/avr/include/avr/power.h ****     <td> Enable the DMA module </td>
 227:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega32A4U, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A
 228:/usr/avr/include/avr/power.h ****   </tr>
 229:/usr/avr/include/avr/power.h **** 
 230:/usr/avr/include/avr/power.h ****   <tr>
 231:/usr/avr/include/avr/power.h ****    <td>power_ebi_disable()</td>
 232:/usr/avr/include/avr/power.h ****     <td> Disable the EBI module </td>
 233:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega32A4U, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A
 234:/usr/avr/include/avr/power.h ****   </tr>
 235:/usr/avr/include/avr/power.h **** 
 236:/usr/avr/include/avr/power.h ****   <tr>
 237:/usr/avr/include/avr/power.h ****    <td>power_ebi_enable()</td>
 238:/usr/avr/include/avr/power.h ****     <td> Enable the EBI module </td>
 239:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega32A4U, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A
 240:/usr/avr/include/avr/power.h ****   </tr>
 241:/usr/avr/include/avr/power.h **** 
 242:/usr/avr/include/avr/power.h ****   <tr>
 243:/usr/avr/include/avr/power.h ****    <td>power_edma_disable()</td>
 244:/usr/avr/include/avr/power.h ****     <td> Disable EDMA module </td>
 245:/usr/avr/include/avr/power.h ****     <td>ATxmega32E5, ATxmega16E5, ATxmega8E5</td>
 246:/usr/avr/include/avr/power.h ****   </tr>
 247:/usr/avr/include/avr/power.h **** 
 248:/usr/avr/include/avr/power.h ****   <tr>
 249:/usr/avr/include/avr/power.h ****    <td>power_edma_enable()</td>
 250:/usr/avr/include/avr/power.h ****     <td> Enable EDMA module </td>
 251:/usr/avr/include/avr/power.h ****     <td>ATxmega32E5, ATxmega16E5, ATxmega8E5</td>
 252:/usr/avr/include/avr/power.h ****   </tr>
 253:/usr/avr/include/avr/power.h **** 
 254:/usr/avr/include/avr/power.h ****   <tr>
 255:/usr/avr/include/avr/power.h ****    <td>power_evsys_disable()</td>
 256:/usr/avr/include/avr/power.h ****     <td> Disable the EVSYS module </td>
 257:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 258:/usr/avr/include/avr/power.h ****   </tr>
 259:/usr/avr/include/avr/power.h **** 
 260:/usr/avr/include/avr/power.h ****   <tr>
 261:/usr/avr/include/avr/power.h ****    <td>power_evsys_enable()</td>
 262:/usr/avr/include/avr/power.h ****     <td> Enable the EVSYS module </td>
 263:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 264:/usr/avr/include/avr/power.h ****   </tr>
 265:/usr/avr/include/avr/power.h **** 
 266:/usr/avr/include/avr/power.h ****   <tr>
 267:/usr/avr/include/avr/power.h ****    <td>power_hiresc_disable()</td>
 268:/usr/avr/include/avr/power.h ****     <td> Disable the HIRES module on PortC </td>
 269:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 270:/usr/avr/include/avr/power.h ****   </tr>
 271:/usr/avr/include/avr/power.h **** 
 272:/usr/avr/include/avr/power.h ****   <tr>
 273:/usr/avr/include/avr/power.h ****    <td>power_hiresc_enable()</td>
 274:/usr/avr/include/avr/power.h ****     <td> Enable the HIRES module on PortC </td>
 275:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 276:/usr/avr/include/avr/power.h ****   </tr>
 277:/usr/avr/include/avr/power.h **** 
 278:/usr/avr/include/avr/power.h ****   <tr>
 279:/usr/avr/include/avr/power.h ****    <td>power_hiresd_disable()</td>
 280:/usr/avr/include/avr/power.h ****     <td> Disable the HIRES module on PortD </td>
 281:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 282:/usr/avr/include/avr/power.h ****   </tr>
 283:/usr/avr/include/avr/power.h **** 
 284:/usr/avr/include/avr/power.h ****   <tr>
 285:/usr/avr/include/avr/power.h ****    <td>power_hiresd_enable()</td>
 286:/usr/avr/include/avr/power.h ****     <td> Enable the HIRES module on PortD </td>
 287:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 288:/usr/avr/include/avr/power.h ****   </tr>
 289:/usr/avr/include/avr/power.h **** 
 290:/usr/avr/include/avr/power.h ****   <tr>
 291:/usr/avr/include/avr/power.h ****    <td>power_hirese_disable()</td>
 292:/usr/avr/include/avr/power.h ****     <td> Disable the HIRES module on PortE </td>
 293:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 294:/usr/avr/include/avr/power.h ****   </tr>
 295:/usr/avr/include/avr/power.h **** 
 296:/usr/avr/include/avr/power.h ****   <tr>
 297:/usr/avr/include/avr/power.h ****    <td>power_hirese_enable()</td>
 298:/usr/avr/include/avr/power.h ****     <td> Enable the HIRES module on PortE </td>
 299:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 300:/usr/avr/include/avr/power.h ****   </tr>
 301:/usr/avr/include/avr/power.h **** 
 302:/usr/avr/include/avr/power.h ****   <tr>
 303:/usr/avr/include/avr/power.h ****    <td>power_hiresf_disable()</td>
 304:/usr/avr/include/avr/power.h ****     <td> Disable the HIRES module on PortF </td>
 305:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 306:/usr/avr/include/avr/power.h ****   </tr>
 307:/usr/avr/include/avr/power.h **** 
 308:/usr/avr/include/avr/power.h ****   <tr>
 309:/usr/avr/include/avr/power.h ****    <td>power_hiresf_enable()</td>
 310:/usr/avr/include/avr/power.h ****     <td> Enable the HIRES module on PortF </td>
 311:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 312:/usr/avr/include/avr/power.h ****   </tr>
 313:/usr/avr/include/avr/power.h **** 
 314:/usr/avr/include/avr/power.h ****   <tr>
 315:/usr/avr/include/avr/power.h ****    <td>power_hsspi_disable()</td>
 316:/usr/avr/include/avr/power.h ****     <td> Disable the HSPPI module </td>
 317:/usr/avr/include/avr/power.h ****     <td>AT90SCR100</td>
 318:/usr/avr/include/avr/power.h ****   </tr>
 319:/usr/avr/include/avr/power.h **** 
 320:/usr/avr/include/avr/power.h ****   <tr>
 321:/usr/avr/include/avr/power.h ****    <td>power_hsspi_enable()</td>
 322:/usr/avr/include/avr/power.h ****     <td> Enable the HSPPI module </td>
 323:/usr/avr/include/avr/power.h ****     <td>AT90SCR100</td>
 324:/usr/avr/include/avr/power.h ****   </tr>
 325:/usr/avr/include/avr/power.h **** 
 326:/usr/avr/include/avr/power.h ****   <tr>
 327:/usr/avr/include/avr/power.h ****    <td>power_irdriver_disable()</td>
 328:/usr/avr/include/avr/power.h ****     <td> Disable the IRDRIVER module </td>
 329:/usr/avr/include/avr/power.h ****     <td>ATA5790, ATA5795</td>
 330:/usr/avr/include/avr/power.h ****   </tr>
 331:/usr/avr/include/avr/power.h **** 
 332:/usr/avr/include/avr/power.h ****   <tr>
 333:/usr/avr/include/avr/power.h ****    <td>power_irdriver_enable()</td>
 334:/usr/avr/include/avr/power.h ****     <td> Enable the IRDRIVER module </td>
 335:/usr/avr/include/avr/power.h ****     <td>ATA5790, ATA5795</td>
 336:/usr/avr/include/avr/power.h ****   </tr>
 337:/usr/avr/include/avr/power.h **** 
 338:/usr/avr/include/avr/power.h ****   <tr>
 339:/usr/avr/include/avr/power.h ****    <td>power_kb_disable()</td>
 340:/usr/avr/include/avr/power.h ****     <td> Disable the KB module </td>
 341:/usr/avr/include/avr/power.h ****     <td>AT90SCR100</td>
 342:/usr/avr/include/avr/power.h ****   </tr>
 343:/usr/avr/include/avr/power.h **** 
 344:/usr/avr/include/avr/power.h ****   <tr>
 345:/usr/avr/include/avr/power.h ****    <td>power_kb_enable()</td>
 346:/usr/avr/include/avr/power.h ****     <td> Enable the KB module </td>
 347:/usr/avr/include/avr/power.h ****     <td>AT90SCR100</td>
 348:/usr/avr/include/avr/power.h ****   </tr>
 349:/usr/avr/include/avr/power.h **** 
 350:/usr/avr/include/avr/power.h ****   <tr>
 351:/usr/avr/include/avr/power.h ****    <td>power_lcd_disable()</td>
 352:/usr/avr/include/avr/power.h ****      <td>Disable the LCD module.</td>
 353:/usr/avr/include/avr/power.h ****     <td>ATxmega64B1, ATxmega64B3, ATxmega128B1, ATxmega128B3, ATmega169, ATmega169A, ATmega169P, AT
 354:/usr/avr/include/avr/power.h ****   </tr>
 355:/usr/avr/include/avr/power.h **** 
 356:/usr/avr/include/avr/power.h ****   <tr>
 357:/usr/avr/include/avr/power.h ****    <td>power_lcd_enable()</td>
 358:/usr/avr/include/avr/power.h ****      <td>Enable the LCD module.</td>
 359:/usr/avr/include/avr/power.h ****     <td>ATxmega64B1, ATxmega64B3, ATxmega128B1, ATxmega128B3, ATmega169, ATmega169A, ATmega169P, AT
 360:/usr/avr/include/avr/power.h ****   </tr>
 361:/usr/avr/include/avr/power.h **** 
 362:/usr/avr/include/avr/power.h ****   <tr>
 363:/usr/avr/include/avr/power.h ****    <td>power_lfreceiver_disable()</td>
 364:/usr/avr/include/avr/power.h ****     <td> Disable the LFRECEIVER module </td>
 365:/usr/avr/include/avr/power.h ****     <td>ATA5790</td>
 366:/usr/avr/include/avr/power.h ****   </tr>
 367:/usr/avr/include/avr/power.h **** 
 368:/usr/avr/include/avr/power.h ****   <tr>
 369:/usr/avr/include/avr/power.h ****    <td>power_lfreceiver_enable()</td>
 370:/usr/avr/include/avr/power.h ****     <td> Enable the LFRECEIVER module </td>
 371:/usr/avr/include/avr/power.h ****     <td>ATA5790</td>
 372:/usr/avr/include/avr/power.h ****   </tr>
 373:/usr/avr/include/avr/power.h **** 
 374:/usr/avr/include/avr/power.h ****   <tr>
 375:/usr/avr/include/avr/power.h ****    <td>power_lin_disable()</td>
 376:/usr/avr/include/avr/power.h ****     <td> Disable the LIN module </td>
 377:/usr/avr/include/avr/power.h ****     <td>ATmega16M1, ATmega32C1, ATmega32M1, ATmega64C1, ATmega64M1, ATtiny167, ATtiny87, ATA5505, A
 378:/usr/avr/include/avr/power.h ****   </tr>
 379:/usr/avr/include/avr/power.h **** 
 380:/usr/avr/include/avr/power.h ****   <tr>
 381:/usr/avr/include/avr/power.h ****    <td>power_lin_enable()</td>
 382:/usr/avr/include/avr/power.h ****     <td> Enable the LIN module </td>
 383:/usr/avr/include/avr/power.h ****     <td>ATmega16M1, ATmega32C1, ATmega32M1, ATmega64C1, ATmega64M1, ATtiny167, ATtiny87, ATA5505, A
 384:/usr/avr/include/avr/power.h ****   </tr>
 385:/usr/avr/include/avr/power.h **** 
 386:/usr/avr/include/avr/power.h ****   <tr>
 387:/usr/avr/include/avr/power.h ****    <td>power_pga_disable()</td>
 388:/usr/avr/include/avr/power.h ****     <td> Disable PGA module </td>
 389:/usr/avr/include/avr/power.h ****     <td>ATmega256RFR2, ATmega128RFR2, ATmega64RFR2, ATmega2564RFR2, ATmega1284RFR2, ATmega644RFR2 <
 390:/usr/avr/include/avr/power.h ****   </tr>
 391:/usr/avr/include/avr/power.h **** 
 392:/usr/avr/include/avr/power.h ****   <tr>
 393:/usr/avr/include/avr/power.h ****    <td>power_pga_enable()</td>
 394:/usr/avr/include/avr/power.h ****     <td> Enable PGA module </td>
 395:/usr/avr/include/avr/power.h ****     <td>ATmega256RFR2, ATmega128RFR2, ATmega64RFR2, ATmega2564RFR2, ATmega1284RFR2, ATmega644RFR2 <
 396:/usr/avr/include/avr/power.h ****   </tr>
 397:/usr/avr/include/avr/power.h **** 
 398:/usr/avr/include/avr/power.h ****   <tr>
 399:/usr/avr/include/avr/power.h ****    <td>power_psc0_disable()</td>
 400:/usr/avr/include/avr/power.h ****      <td>Disable the Power Stage Controller 0 module.</td>
 401:/usr/avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B, AT90PWM216, AT90PWM316</td>
 402:/usr/avr/include/avr/power.h ****   </tr>
 403:/usr/avr/include/avr/power.h **** 
 404:/usr/avr/include/avr/power.h ****   <tr>
 405:/usr/avr/include/avr/power.h ****    <td>power_psc0_enable()</td>
 406:/usr/avr/include/avr/power.h ****      <td>Enable the Power Stage Controller 0 module.</td>
 407:/usr/avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B, AT90PWM216, AT90PWM316</td>
 408:/usr/avr/include/avr/power.h ****   </tr>
 409:/usr/avr/include/avr/power.h **** 
 410:/usr/avr/include/avr/power.h ****   <tr>
 411:/usr/avr/include/avr/power.h ****    <td>power_psc1_disable()</td>
 412:/usr/avr/include/avr/power.h ****      <td>Disable the Power Stage Controller 1 module.</td>
 413:/usr/avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B, AT90PWM216, AT90PWM316</td>
 414:/usr/avr/include/avr/power.h ****   </tr>
 415:/usr/avr/include/avr/power.h **** 
 416:/usr/avr/include/avr/power.h ****   <tr>
 417:/usr/avr/include/avr/power.h ****    <td>power_psc1_enable()</td>
 418:/usr/avr/include/avr/power.h ****      <td>Enable the Power Stage Controller 1 module.</td>
 419:/usr/avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B, AT90PWM216, AT90PWM316</td>
 420:/usr/avr/include/avr/power.h ****   </tr>
 421:/usr/avr/include/avr/power.h **** 
 422:/usr/avr/include/avr/power.h ****   <tr>
 423:/usr/avr/include/avr/power.h ****    <td>power_psc2_disable()</td>
 424:/usr/avr/include/avr/power.h ****      <td>Disable the Power Stage Controller 2 module.</td>
 425:/usr/avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B, AT90PWM216, AT90PWM316, AT90PWM81, AT90
 426:/usr/avr/include/avr/power.h ****   </tr>
 427:/usr/avr/include/avr/power.h **** 
 428:/usr/avr/include/avr/power.h ****   <tr>
 429:/usr/avr/include/avr/power.h ****    <td>power_psc2_enable()</td>
 430:/usr/avr/include/avr/power.h ****      <td>Enable the Power Stage Controller 2 module.</td>
 431:/usr/avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B, AT90PWM216, AT90PWM316, AT90PWM81, AT90
 432:/usr/avr/include/avr/power.h ****   </tr>
 433:/usr/avr/include/avr/power.h **** 
 434:/usr/avr/include/avr/power.h ****   <tr>
 435:/usr/avr/include/avr/power.h ****    <td>power_psc_disable()</td>
 436:/usr/avr/include/avr/power.h ****     <td> Disable the Power Stage Controller module </td>
 437:/usr/avr/include/avr/power.h ****     <td>ATmega16M1, ATmega32C1, ATmega32M1, ATmega64C1, ATmega64M1</td>
 438:/usr/avr/include/avr/power.h ****   </tr>
 439:/usr/avr/include/avr/power.h **** 
 440:/usr/avr/include/avr/power.h ****   <tr>
 441:/usr/avr/include/avr/power.h ****    <td>power_psc_enable()</td>
 442:/usr/avr/include/avr/power.h ****     <td> Enable the Power Stage Controller module </td>
 443:/usr/avr/include/avr/power.h ****     <td>ATmega16M1, ATmega32C1, ATmega32M1, ATmega64C1, ATmega64M1</td>
 444:/usr/avr/include/avr/power.h ****   </tr>
 445:/usr/avr/include/avr/power.h **** 
 446:/usr/avr/include/avr/power.h ****   <tr>
 447:/usr/avr/include/avr/power.h ****    <td>power_pscr_disable()</td>
 448:/usr/avr/include/avr/power.h ****      <td>Disable the Reduced Power Stage Controller module.</td>
 449:/usr/avr/include/avr/power.h ****     <td>AT90PWM81, AT90PWM161</td>
 450:/usr/avr/include/avr/power.h ****   </tr>
 451:/usr/avr/include/avr/power.h **** 
 452:/usr/avr/include/avr/power.h ****   <tr>
 453:/usr/avr/include/avr/power.h ****    <td>power_pscr_enable()</td>
 454:/usr/avr/include/avr/power.h ****      <td>Enable the Reduced Power Stage Controller module.</td>
 455:/usr/avr/include/avr/power.h ****     <td>AT90PWM81, AT90PWM161</td>
 456:/usr/avr/include/avr/power.h ****   </tr>
 457:/usr/avr/include/avr/power.h **** 
 458:/usr/avr/include/avr/power.h ****   <tr>
 459:/usr/avr/include/avr/power.h ****    <td>power_ram0_disable()</td>
 460:/usr/avr/include/avr/power.h ****     <td> Disable SRAM Block 0 module </td>
 461:/usr/avr/include/avr/power.h ****     <td>ATmega256RFR2, ATmega128RFR2, ATmega64RFR2, ATmega2564RFR2, ATmega1284RFR2, ATmega644RFR2 <
 462:/usr/avr/include/avr/power.h ****   </tr>
 463:/usr/avr/include/avr/power.h **** 
 464:/usr/avr/include/avr/power.h ****   <tr>
 465:/usr/avr/include/avr/power.h ****    <td>power_ram0_enable()</td>
 466:/usr/avr/include/avr/power.h ****     <td> Enable SRAM Block 0 module </td>
 467:/usr/avr/include/avr/power.h ****     <td>ATmega256RFR2, ATmega128RFR2, ATmega64RFR2, ATmega2564RFR2, ATmega1284RFR2, ATmega644RFR2</
 468:/usr/avr/include/avr/power.h ****   </tr>
 469:/usr/avr/include/avr/power.h **** 
 470:/usr/avr/include/avr/power.h ****   <tr>
 471:/usr/avr/include/avr/power.h ****    <td>power_ram1_disable()</td>
 472:/usr/avr/include/avr/power.h ****     <td> Disable SRAM Block 1 module </td>
 473:/usr/avr/include/avr/power.h ****     <td>ATmega256RFR2, ATmega128RFR2, ATmega64RFR2, ATmega2564RFR2, ATmega1284RFR2, ATmega644RFR2</
 474:/usr/avr/include/avr/power.h ****   </tr>
 475:/usr/avr/include/avr/power.h **** 
 476:/usr/avr/include/avr/power.h ****   <tr>
 477:/usr/avr/include/avr/power.h ****    <td>power_ram1_enable()</td>
 478:/usr/avr/include/avr/power.h ****     <td> Enable SRAM Block 1 module </td>
 479:/usr/avr/include/avr/power.h ****     <td>ATmega256RFR2, ATmega128RFR2, ATmega64RFR2, ATmega2564RFR2, ATmega1284RFR2, ATmega644RFR2</
 480:/usr/avr/include/avr/power.h ****   </tr>
 481:/usr/avr/include/avr/power.h **** 
 482:/usr/avr/include/avr/power.h ****   <tr>
 483:/usr/avr/include/avr/power.h ****    <td>power_ram2_disable()</td>
 484:/usr/avr/include/avr/power.h ****     <td> Disable SRAM Block 2 module </td>
 485:/usr/avr/include/avr/power.h ****     <td>ATmega256RFR2, ATmega128RFR2, ATmega64RFR2, ATmega2564RFR2, ATmega1284RFR2, ATmega644RFR2</
 486:/usr/avr/include/avr/power.h ****   </tr>
 487:/usr/avr/include/avr/power.h **** 
 488:/usr/avr/include/avr/power.h ****   <tr>
 489:/usr/avr/include/avr/power.h ****    <td>power_ram2_enable()</td>
 490:/usr/avr/include/avr/power.h ****     <td> Enable SRAM Block 2 module </td>
 491:/usr/avr/include/avr/power.h ****     <td>ATmega256RFR2, ATmega128RFR2, ATmega64RFR2, ATmega2564RFR2, ATmega1284RFR2, ATmega644RFR2</
 492:/usr/avr/include/avr/power.h ****   </tr>
 493:/usr/avr/include/avr/power.h **** 
 494:/usr/avr/include/avr/power.h ****   <tr>
 495:/usr/avr/include/avr/power.h ****    <td>power_ram3_disable()</td>
 496:/usr/avr/include/avr/power.h ****     <td> Disable SRAM Block 3 module </td>
 497:/usr/avr/include/avr/power.h ****     <td>ATmega256RFR2, ATmega128RFR2, ATmega64RFR2, ATmega2564RFR2, ATmega1284RFR2, ATmega644RFR2</
 498:/usr/avr/include/avr/power.h ****   </tr>
 499:/usr/avr/include/avr/power.h **** 
 500:/usr/avr/include/avr/power.h ****   <tr>
 501:/usr/avr/include/avr/power.h ****    <td>power_ram3_enable()</td>
 502:/usr/avr/include/avr/power.h ****     <td> Enable SRAM Block 3 module </td>
 503:/usr/avr/include/avr/power.h ****     <td>ATmega256RFR2, ATmega128RFR2, ATmega64RFR2, ATmega2564RFR2, ATmega1284RFR2, ATmega644RFR2</
 504:/usr/avr/include/avr/power.h ****   </tr>
 505:/usr/avr/include/avr/power.h **** 
 506:/usr/avr/include/avr/power.h ****   <tr>
 507:/usr/avr/include/avr/power.h ****    <td>power_rtc_disable()</td>
 508:/usr/avr/include/avr/power.h ****     <td> Disable the RTC module </td>
 509:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 510:/usr/avr/include/avr/power.h ****   </tr>
 511:/usr/avr/include/avr/power.h **** 
 512:/usr/avr/include/avr/power.h ****   <tr>
 513:/usr/avr/include/avr/power.h ****    <td>power_rtc_enable()</td>
 514:/usr/avr/include/avr/power.h ****     <td> Enable the RTC module </td>
 515:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 516:/usr/avr/include/avr/power.h ****   </tr>
 517:/usr/avr/include/avr/power.h **** 
 518:/usr/avr/include/avr/power.h ****   <tr>
 519:/usr/avr/include/avr/power.h ****    <td>power_sci_disable()</td>
 520:/usr/avr/include/avr/power.h ****     <td> Disable the SCI module </td>
 521:/usr/avr/include/avr/power.h ****     <td>AT90SCR100</td>
 522:/usr/avr/include/avr/power.h ****   </tr>
 523:/usr/avr/include/avr/power.h **** 
 524:/usr/avr/include/avr/power.h ****   <tr>
 525:/usr/avr/include/avr/power.h ****    <td>power_sci_enable()</td>
 526:/usr/avr/include/avr/power.h ****     <td> Enable the SCI module </td>
 527:/usr/avr/include/avr/power.h ****     <td>AT90SCR100</td>
 528:/usr/avr/include/avr/power.h ****   </tr>
 529:/usr/avr/include/avr/power.h **** 
 530:/usr/avr/include/avr/power.h ****   <tr>
 531:/usr/avr/include/avr/power.h ****    <td>power_spi_disable()</td>
 532:/usr/avr/include/avr/power.h ****      <td>Disable the Serial Peripheral Interface module.</td>
 533:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 534:/usr/avr/include/avr/power.h ****   </tr>
 535:/usr/avr/include/avr/power.h **** 
 536:/usr/avr/include/avr/power.h ****   <tr>
 537:/usr/avr/include/avr/power.h ****    <td>power_spi_enable()</td>
 538:/usr/avr/include/avr/power.h ****      <td>Enable the Serial Peripheral Interface module.</td>
 539:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 540:/usr/avr/include/avr/power.h ****   </tr>
 541:/usr/avr/include/avr/power.h **** 
 542:/usr/avr/include/avr/power.h ****   <tr>
 543:/usr/avr/include/avr/power.h ****    <td>power_spic_disable()</td>
 544:/usr/avr/include/avr/power.h ****     <td> Disable the SPI module on PortC </td>
 545:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 546:/usr/avr/include/avr/power.h ****   </tr>
 547:/usr/avr/include/avr/power.h **** 
 548:/usr/avr/include/avr/power.h ****   <tr>
 549:/usr/avr/include/avr/power.h ****    <td>power_spic_enable()</td>
 550:/usr/avr/include/avr/power.h ****     <td> Enable the SPI module on PortC </td>
 551:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 552:/usr/avr/include/avr/power.h ****   </tr>
 553:/usr/avr/include/avr/power.h **** 
 554:/usr/avr/include/avr/power.h ****   <tr>
 555:/usr/avr/include/avr/power.h ****    <td>power_spid_disable()</td>
 556:/usr/avr/include/avr/power.h ****     <td> Disable the SPI module on PortD </td>
 557:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 558:/usr/avr/include/avr/power.h ****   </tr>
 559:/usr/avr/include/avr/power.h **** 
 560:/usr/avr/include/avr/power.h ****   <tr>
 561:/usr/avr/include/avr/power.h ****    <td>power_spid_enable()</td>
 562:/usr/avr/include/avr/power.h ****     <td> Enable the SPI module on PortD </td>
 563:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 564:/usr/avr/include/avr/power.h ****   </tr>
 565:/usr/avr/include/avr/power.h **** 
 566:/usr/avr/include/avr/power.h ****   <tr>
 567:/usr/avr/include/avr/power.h ****    <td>power_spie_disable()</td>
 568:/usr/avr/include/avr/power.h ****     <td> Disable the SPI module on PortE </td>
 569:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 570:/usr/avr/include/avr/power.h ****   </tr>
 571:/usr/avr/include/avr/power.h **** 
 572:/usr/avr/include/avr/power.h ****   <tr>
 573:/usr/avr/include/avr/power.h ****    <td>power_spie_enable()</td>
 574:/usr/avr/include/avr/power.h ****     <td> Enable the SPI module on PortE </td>
 575:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 576:/usr/avr/include/avr/power.h ****   </tr>
 577:/usr/avr/include/avr/power.h **** 
 578:/usr/avr/include/avr/power.h ****   <tr>
 579:/usr/avr/include/avr/power.h ****    <td>power_spif_disable()</td>
 580:/usr/avr/include/avr/power.h ****     <td> Disable the SPI module on PortF </td>
 581:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 582:/usr/avr/include/avr/power.h ****   </tr>
 583:/usr/avr/include/avr/power.h **** 
 584:/usr/avr/include/avr/power.h ****   <tr>
 585:/usr/avr/include/avr/power.h ****    <td>power_spif_enable()</td>
 586:/usr/avr/include/avr/power.h ****     <td> Enable the SPI module on PortF </td>
 587:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 588:/usr/avr/include/avr/power.h ****   </tr>
 589:/usr/avr/include/avr/power.h **** 
 590:/usr/avr/include/avr/power.h ****   <tr>
 591:/usr/avr/include/avr/power.h ****    <td>power_tc0c_disable()</td>
 592:/usr/avr/include/avr/power.h ****     <td> Disable the TC0 module on PortC </td>
 593:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 594:/usr/avr/include/avr/power.h ****   </tr>
 595:/usr/avr/include/avr/power.h **** 
 596:/usr/avr/include/avr/power.h ****   <tr>
 597:/usr/avr/include/avr/power.h ****    <td>power_tc0c_enable()</td>
 598:/usr/avr/include/avr/power.h ****     <td> Enable the TC0 module on PortC </td>
 599:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 600:/usr/avr/include/avr/power.h ****   </tr>
 601:/usr/avr/include/avr/power.h **** 
 602:/usr/avr/include/avr/power.h ****   <tr>
 603:/usr/avr/include/avr/power.h ****    <td>power_tc0d_disable()</td>
 604:/usr/avr/include/avr/power.h ****     <td> Disable the TC0 module on PortD </td>
 605:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 606:/usr/avr/include/avr/power.h ****   </tr>
 607:/usr/avr/include/avr/power.h **** 
 608:/usr/avr/include/avr/power.h ****   <tr>
 609:/usr/avr/include/avr/power.h ****    <td>power_tc0d_enable()</td>
 610:/usr/avr/include/avr/power.h ****     <td> Enable the TC0 module on PortD </td>
 611:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 612:/usr/avr/include/avr/power.h ****   </tr>
 613:/usr/avr/include/avr/power.h **** 
 614:/usr/avr/include/avr/power.h ****   <tr>
 615:/usr/avr/include/avr/power.h ****    <td>power_tc0e_disable()</td>
 616:/usr/avr/include/avr/power.h ****     <td> Disable the TC0 module on PortE </td>
 617:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 618:/usr/avr/include/avr/power.h ****   </tr>
 619:/usr/avr/include/avr/power.h **** 
 620:/usr/avr/include/avr/power.h ****   <tr>
 621:/usr/avr/include/avr/power.h ****    <td>power_tc0e_enable()</td>
 622:/usr/avr/include/avr/power.h ****     <td> Enable the TC0 module on PortE </td>
 623:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 624:/usr/avr/include/avr/power.h ****   </tr>
 625:/usr/avr/include/avr/power.h **** 
 626:/usr/avr/include/avr/power.h ****   <tr>
 627:/usr/avr/include/avr/power.h ****    <td>power_tc0f_disable()</td>
 628:/usr/avr/include/avr/power.h ****     <td> Disable the TC0 module on PortF </td>
 629:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 630:/usr/avr/include/avr/power.h ****   </tr>
 631:/usr/avr/include/avr/power.h **** 
 632:/usr/avr/include/avr/power.h ****   <tr>
 633:/usr/avr/include/avr/power.h ****    <td>power_tc0f_enable()</td>
 634:/usr/avr/include/avr/power.h ****     <td> Enable the TC0 module on PortF </td>
 635:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 636:/usr/avr/include/avr/power.h ****   </tr>
 637:/usr/avr/include/avr/power.h **** 
 638:/usr/avr/include/avr/power.h ****   <tr>
 639:/usr/avr/include/avr/power.h ****    <td>power_tc1c_disable()</td>
 640:/usr/avr/include/avr/power.h ****     <td> Disable the TC1 module on PortC </td>
 641:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 642:/usr/avr/include/avr/power.h ****   </tr>
 643:/usr/avr/include/avr/power.h **** 
 644:/usr/avr/include/avr/power.h ****   <tr>
 645:/usr/avr/include/avr/power.h ****    <td>power_tc1c_enable()</td>
 646:/usr/avr/include/avr/power.h ****     <td> Enable the TC1 module on PortC </td>
 647:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 648:/usr/avr/include/avr/power.h ****   </tr>
 649:/usr/avr/include/avr/power.h **** 
 650:/usr/avr/include/avr/power.h ****   <tr>
 651:/usr/avr/include/avr/power.h ****    <td>power_tc1d_disable()</td>
 652:/usr/avr/include/avr/power.h ****     <td> Disable the TC1 module on PortD </td>
 653:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 654:/usr/avr/include/avr/power.h ****   </tr>
 655:/usr/avr/include/avr/power.h **** 
 656:/usr/avr/include/avr/power.h ****   <tr>
 657:/usr/avr/include/avr/power.h ****    <td>power_tc1d_enable()</td>
 658:/usr/avr/include/avr/power.h ****     <td> Enable the TC1 module on PortD </td>
 659:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 660:/usr/avr/include/avr/power.h ****   </tr>
 661:/usr/avr/include/avr/power.h **** 
 662:/usr/avr/include/avr/power.h ****   <tr>
 663:/usr/avr/include/avr/power.h ****    <td>power_tc1e_disable()</td>
 664:/usr/avr/include/avr/power.h ****     <td> Disable the TC1 module on PortE </td>
 665:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 666:/usr/avr/include/avr/power.h ****   </tr>
 667:/usr/avr/include/avr/power.h **** 
 668:/usr/avr/include/avr/power.h ****   <tr>
 669:/usr/avr/include/avr/power.h ****    <td>power_tc1e_enable()</td>
 670:/usr/avr/include/avr/power.h ****     <td> Enable the TC1 module on PortE </td>
 671:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 672:/usr/avr/include/avr/power.h ****   </tr>
 673:/usr/avr/include/avr/power.h **** 
 674:/usr/avr/include/avr/power.h ****   <tr>
 675:/usr/avr/include/avr/power.h ****    <td>power_tc1f_disable()</td>
 676:/usr/avr/include/avr/power.h ****     <td> Disable the TC1 module on PortF </td>
 677:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 678:/usr/avr/include/avr/power.h ****   </tr>
 679:/usr/avr/include/avr/power.h **** 
 680:/usr/avr/include/avr/power.h ****   <tr>
 681:/usr/avr/include/avr/power.h ****    <td>power_tc1f_enable()</td>
 682:/usr/avr/include/avr/power.h ****     <td> Enable the TC1 module on PortF </td>
 683:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 684:/usr/avr/include/avr/power.h ****   </tr>
 685:/usr/avr/include/avr/power.h **** 
 686:/usr/avr/include/avr/power.h ****   <tr>
 687:/usr/avr/include/avr/power.h ****    <td>power_tc4c_disable()</td>
 688:/usr/avr/include/avr/power.h ****     <td> Disable Timer/Counter4 module on port C </td>
 689:/usr/avr/include/avr/power.h ****     <td>ATxmega32E5, ATxmega16E5, ATxmega8E5</td>
 690:/usr/avr/include/avr/power.h ****   </tr>
 691:/usr/avr/include/avr/power.h **** 
 692:/usr/avr/include/avr/power.h ****   <tr>
 693:/usr/avr/include/avr/power.h ****    <td>power_tc4c_enable()</td>
 694:/usr/avr/include/avr/power.h ****     <td> Enable Timer/Counter4 module on port C </td>
 695:/usr/avr/include/avr/power.h ****     <td>ATxmega32E5, ATxmega16E5, ATxmega8E5</td>
 696:/usr/avr/include/avr/power.h ****   </tr>
 697:/usr/avr/include/avr/power.h **** 
 698:/usr/avr/include/avr/power.h ****   <tr>
 699:/usr/avr/include/avr/power.h ****    <td>power_tc5c_disable()</td>
 700:/usr/avr/include/avr/power.h ****     <td> Disable Timer/Counter5 module on port C </td>
 701:/usr/avr/include/avr/power.h ****     <td>ATxmega32E5, ATxmega16E5, ATxmega8E5</td>
 702:/usr/avr/include/avr/power.h ****   </tr>
 703:/usr/avr/include/avr/power.h **** 
 704:/usr/avr/include/avr/power.h ****   <tr>
 705:/usr/avr/include/avr/power.h ****    <td>power_tc5c_enable()</td>
 706:/usr/avr/include/avr/power.h ****     <td> Enable Timer/Counter5 module on port C </td>
 707:/usr/avr/include/avr/power.h ****     <td>ATxmega32E5, ATxmega16E5, ATxmega8E5</td>
 708:/usr/avr/include/avr/power.h ****   </tr>
 709:/usr/avr/include/avr/power.h **** 
 710:/usr/avr/include/avr/power.h ****   <tr>
 711:/usr/avr/include/avr/power.h ****    <td>power_tc5d_disable()</td>
 712:/usr/avr/include/avr/power.h ****     <td> Disable Timer/Counter5 module on port D </td>
 713:/usr/avr/include/avr/power.h ****     <td>ATxmega32E5, ATxmega16E5, ATxmega8E5</td>
 714:/usr/avr/include/avr/power.h ****   </tr>
 715:/usr/avr/include/avr/power.h **** 
 716:/usr/avr/include/avr/power.h ****   <tr>
 717:/usr/avr/include/avr/power.h ****    <td>power_tc5d_enable()</td>
 718:/usr/avr/include/avr/power.h ****     <td> Enable Timer/Counter5 module on port D </td>
 719:/usr/avr/include/avr/power.h ****     <td>ATxmega32E5, ATxmega16E5, ATxmega8E5</td>
 720:/usr/avr/include/avr/power.h ****   </tr>
 721:/usr/avr/include/avr/power.h **** 
 722:/usr/avr/include/avr/power.h ****   <tr>
 723:/usr/avr/include/avr/power.h ****    <td>power_timer0_disable()</td>
 724:/usr/avr/include/avr/power.h ****      <td>Disable the Timer 0 module.</td>
 725:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 726:/usr/avr/include/avr/power.h ****   </tr>
 727:/usr/avr/include/avr/power.h **** 
 728:/usr/avr/include/avr/power.h ****   <tr>
 729:/usr/avr/include/avr/power.h ****    <td>power_timer0_enable()</td>
 730:/usr/avr/include/avr/power.h ****      <td>Enable the Timer 0 module.</td>
 731:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 732:/usr/avr/include/avr/power.h ****   </tr>
 733:/usr/avr/include/avr/power.h **** 
 734:/usr/avr/include/avr/power.h ****   <tr>
 735:/usr/avr/include/avr/power.h ****    <td>power_timer1_disable()</td>
 736:/usr/avr/include/avr/power.h ****      <td>Disable the Timer 1 module.</td>
 737:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 738:/usr/avr/include/avr/power.h ****   </tr>
 739:/usr/avr/include/avr/power.h **** 
 740:/usr/avr/include/avr/power.h ****   <tr>
 741:/usr/avr/include/avr/power.h ****    <td>power_timer1_enable()</td>
 742:/usr/avr/include/avr/power.h ****      <td>Enable the Timer 1 module.</td>
 743:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 744:/usr/avr/include/avr/power.h ****   </tr>
 745:/usr/avr/include/avr/power.h **** 
 746:/usr/avr/include/avr/power.h ****   <tr>
 747:/usr/avr/include/avr/power.h ****    <td>power_timer2_disable()</td>
 748:/usr/avr/include/avr/power.h ****      <td>Disable the Timer 2 module.</td>
 749:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 750:/usr/avr/include/avr/power.h ****   </tr>
 751:/usr/avr/include/avr/power.h **** 
 752:/usr/avr/include/avr/power.h ****   <tr>
 753:/usr/avr/include/avr/power.h ****    <td>power_timer2_enable()</td>
 754:/usr/avr/include/avr/power.h ****      <td>Enable the Timer 2 module.</td>
 755:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 756:/usr/avr/include/avr/power.h ****   </tr>
 757:/usr/avr/include/avr/power.h **** 
 758:/usr/avr/include/avr/power.h ****   <tr>
 759:/usr/avr/include/avr/power.h ****    <td>power_timer3_disable()</td>
 760:/usr/avr/include/avr/power.h ****      <td>Disable the Timer 3 module.</td>
 761:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 762:/usr/avr/include/avr/power.h ****   </tr>
 763:/usr/avr/include/avr/power.h **** 
 764:/usr/avr/include/avr/power.h ****   <tr>
 765:/usr/avr/include/avr/power.h ****    <td>power_timer3_enable()</td>
 766:/usr/avr/include/avr/power.h ****      <td>Enable the Timer 3 module.</td>
 767:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 768:/usr/avr/include/avr/power.h ****   </tr>
 769:/usr/avr/include/avr/power.h **** 
 770:/usr/avr/include/avr/power.h ****   <tr>
 771:/usr/avr/include/avr/power.h ****    <td>power_timer4_disable()</td>
 772:/usr/avr/include/avr/power.h ****      <td>Disable the Timer 4 module.</td>
 773:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 774:/usr/avr/include/avr/power.h ****   </tr>
 775:/usr/avr/include/avr/power.h **** 
 776:/usr/avr/include/avr/power.h ****   <tr>
 777:/usr/avr/include/avr/power.h ****    <td>power_timer4_enable()</td>
 778:/usr/avr/include/avr/power.h ****      <td>Enable the Timer 4 module.</td>
 779:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 780:/usr/avr/include/avr/power.h ****   </tr>
 781:/usr/avr/include/avr/power.h **** 
 782:/usr/avr/include/avr/power.h ****   <tr>
 783:/usr/avr/include/avr/power.h ****    <td>power_timer5_disable()</td>
 784:/usr/avr/include/avr/power.h ****     <td> Disable TIMER5 module </td>
 785:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 786:/usr/avr/include/avr/power.h ****   </tr>
 787:/usr/avr/include/avr/power.h **** 
 788:/usr/avr/include/avr/power.h ****   <tr>
 789:/usr/avr/include/avr/power.h ****    <td>power_timer5_enable()</td>
 790:/usr/avr/include/avr/power.h ****     <td> Enable TIMER5 module </td>
 791:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 792:/usr/avr/include/avr/power.h ****   </tr>
 793:/usr/avr/include/avr/power.h **** 
 794:/usr/avr/include/avr/power.h ****   <tr>
 795:/usr/avr/include/avr/power.h ****    <td>power_timermodulator_disable()</td>
 796:/usr/avr/include/avr/power.h ****     <td> Disable the TIMERMODULATOR module </td>
 797:/usr/avr/include/avr/power.h ****     <td>ATA5790, ATA5795</td>
 798:/usr/avr/include/avr/power.h ****   </tr>
 799:/usr/avr/include/avr/power.h **** 
 800:/usr/avr/include/avr/power.h ****   <tr>
 801:/usr/avr/include/avr/power.h ****    <td>power_timermodulator_enable()</td>
 802:/usr/avr/include/avr/power.h ****     <td> Enable the TIMERMODULATOR module </td>
 803:/usr/avr/include/avr/power.h ****     <td>ATA5790, ATA5795</td>
 804:/usr/avr/include/avr/power.h ****   </tr>
 805:/usr/avr/include/avr/power.h **** 
 806:/usr/avr/include/avr/power.h ****   <tr>
 807:/usr/avr/include/avr/power.h ****    <td>power_transceiver_disable()</td>
 808:/usr/avr/include/avr/power.h ****     <td> Disable TRANSCEIVER module </td>
 809:/usr/avr/include/avr/power.h ****     <td>ATmega256RFR2, ATmega128RFR2, ATmega64RFR2, ATmega2564RFR2, ATmega1284RFR2, ATmega644RFR2</
 810:/usr/avr/include/avr/power.h ****   </tr>
 811:/usr/avr/include/avr/power.h **** 
 812:/usr/avr/include/avr/power.h ****   <tr>
 813:/usr/avr/include/avr/power.h ****    <td>power_transceiver_enable()</td>
 814:/usr/avr/include/avr/power.h ****     <td> Enable TRANSCEIVER module </td>
 815:/usr/avr/include/avr/power.h ****     <td>ATmega256RFR2, ATmega128RFR2, ATmega64RFR2, ATmega2564RFR2, ATmega1284RFR2, ATmega644RFR2,<
 816:/usr/avr/include/avr/power.h ****   </tr>
 817:/usr/avr/include/avr/power.h **** 
 818:/usr/avr/include/avr/power.h ****   <tr>
 819:/usr/avr/include/avr/power.h ****    <td>power_twi_disable()</td>
 820:/usr/avr/include/avr/power.h ****      <td>Disable the Two Wire Interface module.</td>
 821:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 822:/usr/avr/include/avr/power.h ****   </tr>
 823:/usr/avr/include/avr/power.h **** 
 824:/usr/avr/include/avr/power.h ****   <tr>
 825:/usr/avr/include/avr/power.h ****    <td>power_twi_enable()</td>
 826:/usr/avr/include/avr/power.h ****      <td>Enable the Two Wire Interface module.</td>
 827:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 828:/usr/avr/include/avr/power.h ****   </tr>
 829:/usr/avr/include/avr/power.h **** 
 830:/usr/avr/include/avr/power.h ****   <tr>
 831:/usr/avr/include/avr/power.h ****    <td>power_twic_disable()</td>
 832:/usr/avr/include/avr/power.h ****     <td>Disable the Two Wire Interface module on PortC </td>
 833:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 834:/usr/avr/include/avr/power.h ****   </tr>
 835:/usr/avr/include/avr/power.h **** 
 836:/usr/avr/include/avr/power.h ****   <tr>
 837:/usr/avr/include/avr/power.h ****    <td>power_twic_enable()</td>
 838:/usr/avr/include/avr/power.h ****     <td>Enable the Two Wire Interface module on PortC </td>
 839:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 840:/usr/avr/include/avr/power.h ****   </tr>
 841:/usr/avr/include/avr/power.h **** 
 842:/usr/avr/include/avr/power.h ****   <tr>
 843:/usr/avr/include/avr/power.h ****    <td>power_twid_disable()</td>
 844:/usr/avr/include/avr/power.h ****     <td>Disable the Two Wire Interface module on PortD </td>
 845:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 846:/usr/avr/include/avr/power.h ****   </tr>
 847:/usr/avr/include/avr/power.h **** 
 848:/usr/avr/include/avr/power.h ****   <tr>
 849:/usr/avr/include/avr/power.h ****    <td>power_twid_enable()</td>
 850:/usr/avr/include/avr/power.h ****     <td>Enable the Two Wire Interface module on PortD </td>
 851:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 852:/usr/avr/include/avr/power.h ****   </tr>
 853:/usr/avr/include/avr/power.h **** 
 854:/usr/avr/include/avr/power.h ****   <tr>
 855:/usr/avr/include/avr/power.h ****    <td>power_twie_disable()</td>
 856:/usr/avr/include/avr/power.h ****     <td>Disable the Two Wire Interface module on PortE </td>
 857:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 858:/usr/avr/include/avr/power.h ****   </tr>
 859:/usr/avr/include/avr/power.h **** 
 860:/usr/avr/include/avr/power.h ****   <tr>
 861:/usr/avr/include/avr/power.h ****    <td>power_twie_enable()</td>
 862:/usr/avr/include/avr/power.h ****     <td>Enable the Two Wire Interface module on PortE </td>
 863:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 864:/usr/avr/include/avr/power.h ****   </tr>
 865:/usr/avr/include/avr/power.h **** 
 866:/usr/avr/include/avr/power.h ****   <tr>
 867:/usr/avr/include/avr/power.h ****    <td>power_twif_disable()</td>
 868:/usr/avr/include/avr/power.h ****     <td>Disable the Two Wire Interface module on PortF </td>
 869:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 870:/usr/avr/include/avr/power.h ****   </tr>
 871:/usr/avr/include/avr/power.h **** 
 872:/usr/avr/include/avr/power.h ****   <tr>
 873:/usr/avr/include/avr/power.h ****    <td>power_twif_enable()</td>
 874:/usr/avr/include/avr/power.h ****     <td>Disable the Two Wire Interface module on PortF </td>
 875:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega16D4, ATxmega32A4, ATxmega32A4U, ATxmega32D4, ATxmega64A1
 876:/usr/avr/include/avr/power.h ****   </tr>
 877:/usr/avr/include/avr/power.h **** 
 878:/usr/avr/include/avr/power.h ****   <tr>
 879:/usr/avr/include/avr/power.h ****    <td>power_usart0_disable()</td>
 880:/usr/avr/include/avr/power.h ****      <td>Disable the USART 0 module.</td>
 881:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 882:/usr/avr/include/avr/power.h ****   </tr>
 883:/usr/avr/include/avr/power.h **** 
 884:/usr/avr/include/avr/power.h ****   <tr>
 885:/usr/avr/include/avr/power.h ****    <td>power_usart0_enable()</td>
 886:/usr/avr/include/avr/power.h ****      <td>Enable the USART 0 module.</td>
 887:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 888:/usr/avr/include/avr/power.h ****   </tr>
 889:/usr/avr/include/avr/power.h **** 
 890:/usr/avr/include/avr/power.h ****   <tr>
 891:/usr/avr/include/avr/power.h ****    <td>power_usart1_disable()</td>
 892:/usr/avr/include/avr/power.h ****      <td>Disable the USART 1 module.</td>
 893:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 894:/usr/avr/include/avr/power.h ****   </tr>
 895:/usr/avr/include/avr/power.h **** 
 896:/usr/avr/include/avr/power.h ****   <tr>
 897:/usr/avr/include/avr/power.h ****    <td>power_usart1_enable()</td>
 898:/usr/avr/include/avr/power.h ****      <td>Enable the USART 1 module.</td>
 899:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, ATmega128RFA1, ATmega256RFR2, AT
 900:/usr/avr/include/avr/power.h ****   </tr>
 901:/usr/avr/include/avr/power.h **** 
 902:/usr/avr/include/avr/power.h ****   <tr>
 903:/usr/avr/include/avr/power.h ****    <td>power_usart2_disable()</td>
 904:/usr/avr/include/avr/power.h ****      <td>Disable the USART 2 module.</td>
 905:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 906:/usr/avr/include/avr/power.h ****   </tr>
 907:/usr/avr/include/avr/power.h **** 
 908:/usr/avr/include/avr/power.h ****   <tr>
 909:/usr/avr/include/avr/power.h ****    <td>power_usart2_enable()</td>
 910:/usr/avr/include/avr/power.h ****      <td>Enable the USART 2 module.</td>
 911:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 912:/usr/avr/include/avr/power.h ****   </tr>
 913:/usr/avr/include/avr/power.h **** 
 914:/usr/avr/include/avr/power.h ****   <tr>
 915:/usr/avr/include/avr/power.h ****    <td>power_usart3_disable()</td>
 916:/usr/avr/include/avr/power.h ****      <td>Disable the USART 3 module.</td>
 917:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 918:/usr/avr/include/avr/power.h ****   </tr>
 919:/usr/avr/include/avr/power.h **** 
 920:/usr/avr/include/avr/power.h ****   <tr>
 921:/usr/avr/include/avr/power.h ****    <td>power_usart3_enable()</td>
 922:/usr/avr/include/avr/power.h ****      <td>Enable the USART 3 module.</td>
 923:/usr/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 924:/usr/avr/include/avr/power.h ****   </tr>
 925:/usr/avr/include/avr/power.h **** 
 926:/usr/avr/include/avr/power.h ****   <tr>
 927:/usr/avr/include/avr/power.h ****    <td>power_usart_disable()</td>
 928:/usr/avr/include/avr/power.h ****      <td>Disable the USART module.</td>
 929:/usr/avr/include/avr/power.h ****     <td>AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B, AT90PWM216, AT90PWM316</td>
 930:/usr/avr/include/avr/power.h ****   </tr>
 931:/usr/avr/include/avr/power.h **** 
 932:/usr/avr/include/avr/power.h ****   <tr>
 933:/usr/avr/include/avr/power.h ****    <td>power_usart_enable()</td>
 934:/usr/avr/include/avr/power.h ****      <td>Enable the USART module.</td>
 935:/usr/avr/include/avr/power.h ****     <td>AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B, AT90PWM216, AT90PWM316</td>
 936:/usr/avr/include/avr/power.h ****   </tr>
 937:/usr/avr/include/avr/power.h **** 
 938:/usr/avr/include/avr/power.h ****   <tr>
 939:/usr/avr/include/avr/power.h ****    <td>power_usartc0_disable()</td>
 940:/usr/avr/include/avr/power.h ****     <td> Disable the USART0 module on PortC </td>
 941:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 942:/usr/avr/include/avr/power.h ****   </tr>
 943:/usr/avr/include/avr/power.h **** 
 944:/usr/avr/include/avr/power.h ****   <tr>
 945:/usr/avr/include/avr/power.h ****    <td>power_usartc0_enable()</td>
 946:/usr/avr/include/avr/power.h ****     <td> Enable the USART0 module on PortC </td>
 947:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 948:/usr/avr/include/avr/power.h ****   </tr>
 949:/usr/avr/include/avr/power.h **** 
 950:/usr/avr/include/avr/power.h ****   <tr>
 951:/usr/avr/include/avr/power.h ****    <td>power_usartc1_disable()</td>
 952:/usr/avr/include/avr/power.h ****     <td> Disable the USART1 module on PortC </td>
 953:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega32A4U, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A
 954:/usr/avr/include/avr/power.h ****   </tr>
 955:/usr/avr/include/avr/power.h **** 
 956:/usr/avr/include/avr/power.h ****   <tr>
 957:/usr/avr/include/avr/power.h ****    <td>power_usartc1_enable()</td>
 958:/usr/avr/include/avr/power.h ****     <td> Enable the USART1 module on PortC </td>
 959:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega32A4U, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A
 960:/usr/avr/include/avr/power.h ****   </tr>
 961:/usr/avr/include/avr/power.h **** 
 962:/usr/avr/include/avr/power.h ****   <tr>
 963:/usr/avr/include/avr/power.h ****    <td>power_usartd0_disable()</td>
 964:/usr/avr/include/avr/power.h ****     <td> Disable the USART0 module on PortD </td>
 965:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 966:/usr/avr/include/avr/power.h ****   </tr>
 967:/usr/avr/include/avr/power.h **** 
 968:/usr/avr/include/avr/power.h ****   <tr>
 969:/usr/avr/include/avr/power.h ****    <td>power_usartd0_enable()</td>
 970:/usr/avr/include/avr/power.h ****     <td> Enable the USART0 module on PortD </td>
 971:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 972:/usr/avr/include/avr/power.h ****   </tr>
 973:/usr/avr/include/avr/power.h **** 
 974:/usr/avr/include/avr/power.h ****   <tr>
 975:/usr/avr/include/avr/power.h ****    <td>power_usartd1_disable()</td>
 976:/usr/avr/include/avr/power.h ****     <td> Disable the USART1 module on PortD </td>
 977:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega32A4U, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A
 978:/usr/avr/include/avr/power.h ****   </tr>
 979:/usr/avr/include/avr/power.h **** 
 980:/usr/avr/include/avr/power.h ****   <tr>
 981:/usr/avr/include/avr/power.h ****    <td>power_usartd1_enable()</td>
 982:/usr/avr/include/avr/power.h ****     <td> Enable the USART1 module on PortE </td>
 983:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega32A4U, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A
 984:/usr/avr/include/avr/power.h ****   </tr>
 985:/usr/avr/include/avr/power.h **** 
 986:/usr/avr/include/avr/power.h ****   <tr>
 987:/usr/avr/include/avr/power.h ****    <td>power_usarte0_disable()</td>
 988:/usr/avr/include/avr/power.h ****     <td> Disable the USART0 module on PortE </td>
 989:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 990:/usr/avr/include/avr/power.h ****   </tr>
 991:/usr/avr/include/avr/power.h **** 
 992:/usr/avr/include/avr/power.h ****   <tr>
 993:/usr/avr/include/avr/power.h ****    <td>power_usarte0_enable()</td>
 994:/usr/avr/include/avr/power.h ****     <td> Enable the USART0 module on PortE </td>
 995:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
 996:/usr/avr/include/avr/power.h ****   </tr>
 997:/usr/avr/include/avr/power.h **** 
 998:/usr/avr/include/avr/power.h ****   <tr>
 999:/usr/avr/include/avr/power.h ****    <td>power_usarte1_disable()</td>
1000:/usr/avr/include/avr/power.h ****     <td> Disable the USART1 module on PortE </td>
1001:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega32A4U, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A
1002:/usr/avr/include/avr/power.h ****   </tr>
1003:/usr/avr/include/avr/power.h **** 
1004:/usr/avr/include/avr/power.h ****   <tr>
1005:/usr/avr/include/avr/power.h ****    <td>power_usarte1_enable()</td>
1006:/usr/avr/include/avr/power.h ****     <td> Enable the USART1 module on PortE </td>
1007:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega32A4U, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A
1008:/usr/avr/include/avr/power.h ****   </tr>
1009:/usr/avr/include/avr/power.h **** 
1010:/usr/avr/include/avr/power.h ****   <tr>
1011:/usr/avr/include/avr/power.h ****    <td>power_usartf0_disable()</td>
1012:/usr/avr/include/avr/power.h ****     <td> Disable the USART0 module on PortF </td>
1013:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
1014:/usr/avr/include/avr/power.h ****   </tr>
1015:/usr/avr/include/avr/power.h **** 
1016:/usr/avr/include/avr/power.h ****   <tr>
1017:/usr/avr/include/avr/power.h ****    <td>power_usartf0_enable()</td>
1018:/usr/avr/include/avr/power.h ****     <td> Enable the USART0 module on PortF </td>
1019:/usr/avr/include/avr/power.h ****     <td>ATxmega16C4, ATxmega32C4, ATxmega64C3, ATxmega128C3, ATxmega192C3, ATxmega256C3, ATxmega16A
1020:/usr/avr/include/avr/power.h ****   </tr>
1021:/usr/avr/include/avr/power.h **** 
1022:/usr/avr/include/avr/power.h ****   <tr>
1023:/usr/avr/include/avr/power.h ****    <td>power_usartf1_disable()</td>
1024:/usr/avr/include/avr/power.h ****     <td> Disable the USART1 module on PortF </td>
1025:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega32A4U, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A
1026:/usr/avr/include/avr/power.h ****   </tr>
1027:/usr/avr/include/avr/power.h **** 
1028:/usr/avr/include/avr/power.h ****   <tr>
1029:/usr/avr/include/avr/power.h ****    <td>power_usartf1_enable()</td>
1030:/usr/avr/include/avr/power.h ****     <td> Enable the USART1 module on PortF </td>
1031:/usr/avr/include/avr/power.h ****     <td>ATxmega16A4, ATxmega16A4U, ATxmega32A4U, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A
1032:/usr/avr/include/avr/power.h ****   </tr>
1033:/usr/avr/include/avr/power.h **** 
1034:/usr/avr/include/avr/power.h ****   <tr>
1035:/usr/avr/include/avr/power.h ****    <td>power_usb_disable()</td>
1036:/usr/avr/include/avr/power.h ****      <td>Disable the USB module.</td>
1037:/usr/avr/include/avr/power.h ****     <td>ATxmega384C3, ATxmega256A3BU, ATxmega16A4U, ATxmega32A4U, ATxmega64A3U, ATxmega64A4U, ATxme
1038:/usr/avr/include/avr/power.h ****   </tr>
1039:/usr/avr/include/avr/power.h **** 
1040:/usr/avr/include/avr/power.h ****   <tr>
1041:/usr/avr/include/avr/power.h ****    <td>power_usb_enable()</td>
1042:/usr/avr/include/avr/power.h ****      <td>Enable the USB module.</td>
1043:/usr/avr/include/avr/power.h ****     <td>ATxmega384C3, ATxmega256A3BU, ATxmega16A4U, ATxmega32A4U, ATxmega64A3U, ATxmega64A4U, ATxme
1044:/usr/avr/include/avr/power.h ****   </tr>
1045:/usr/avr/include/avr/power.h **** 
1046:/usr/avr/include/avr/power.h ****   <tr>
1047:/usr/avr/include/avr/power.h ****    <td>power_usbh_disable()</td>
1048:/usr/avr/include/avr/power.h ****     <td> Disable the USBH module </td>
1049:/usr/avr/include/avr/power.h ****     <td>AT90SCR100</td>
1050:/usr/avr/include/avr/power.h ****   </tr>
1051:/usr/avr/include/avr/power.h **** 
1052:/usr/avr/include/avr/power.h ****   <tr>
1053:/usr/avr/include/avr/power.h ****    <td>power_usbh_enable()</td>
1054:/usr/avr/include/avr/power.h ****     <td> Enable the USBH module </td>
1055:/usr/avr/include/avr/power.h ****     <td>AT90SCR100</td>
1056:/usr/avr/include/avr/power.h ****   </tr>
1057:/usr/avr/include/avr/power.h **** 
1058:/usr/avr/include/avr/power.h ****   <tr>
1059:/usr/avr/include/avr/power.h ****    <td>power_usi_disable()</td>
1060:/usr/avr/include/avr/power.h ****      <td>Disable the Universal Serial Interface module.</td>
1061:/usr/avr/include/avr/power.h ****     <td>ATtiny24, ATtiny24A, ATtiny44, ATtiny44A, ATtiny84, ATtiny84A, ATtiny25, ATtiny45, ATtiny85
1062:/usr/avr/include/avr/power.h ****   </tr>
1063:/usr/avr/include/avr/power.h **** 
1064:/usr/avr/include/avr/power.h ****   <tr>
1065:/usr/avr/include/avr/power.h ****    <td>power_usi_enable()</td>
1066:/usr/avr/include/avr/power.h ****      <td>Enable the Universal Serial Interface module.</td>
1067:/usr/avr/include/avr/power.h ****     <td>ATtiny24, ATtiny24A, ATtiny44, ATtiny44A, ATtiny84, ATtiny84A, ATtiny25, ATtiny45, ATtiny85
1068:/usr/avr/include/avr/power.h ****   </tr>
1069:/usr/avr/include/avr/power.h **** 
1070:/usr/avr/include/avr/power.h ****   <tr>
1071:/usr/avr/include/avr/power.h ****    <td>power_vadc_disable()</td>
1072:/usr/avr/include/avr/power.h ****      <td>Disable the Voltage ADC module.</td>
1073:/usr/avr/include/avr/power.h ****     <td>ATmega406, ATmega32HVB, ATmega32HVBREVB, ATmega16HVB, ATmega16HVBREVB</td>
1074:/usr/avr/include/avr/power.h ****   </tr>
1075:/usr/avr/include/avr/power.h **** 
1076:/usr/avr/include/avr/power.h ****   <tr>
1077:/usr/avr/include/avr/power.h ****    <td>power_vadc_enable()</td>
1078:/usr/avr/include/avr/power.h ****      <td>Enable the Voltage ADC module.</td>
1079:/usr/avr/include/avr/power.h ****     <td>ATmega406, ATmega32HVB, ATmega32HVBREVB, ATmega16HVB, ATmega16HVBREVB</td>
1080:/usr/avr/include/avr/power.h ****   </tr>
1081:/usr/avr/include/avr/power.h **** 
1082:/usr/avr/include/avr/power.h ****   <tr>
1083:/usr/avr/include/avr/power.h ****    <td>power_vmonitor_disable()</td>
1084:/usr/avr/include/avr/power.h ****     <td> Disable the VMONITOR module </td>
1085:/usr/avr/include/avr/power.h ****     <td>ATA5790, ATA5795</td>
1086:/usr/avr/include/avr/power.h ****   </tr>
1087:/usr/avr/include/avr/power.h **** 
1088:/usr/avr/include/avr/power.h ****   <tr>
1089:/usr/avr/include/avr/power.h ****    <td>power_vmonitor_enable()</td>
1090:/usr/avr/include/avr/power.h ****     <td> Enable the VMONITOR module </td>
1091:/usr/avr/include/avr/power.h ****     <td>ATA5790, ATA5795</td>
1092:/usr/avr/include/avr/power.h ****   </tr>
1093:/usr/avr/include/avr/power.h **** 
1094:/usr/avr/include/avr/power.h ****   <tr>
1095:/usr/avr/include/avr/power.h ****    <td>power_vrm_disable()</td>
1096:/usr/avr/include/avr/power.h ****     <td> Disable the VRM module </td>
1097:/usr/avr/include/avr/power.h ****     <td>ATmega32HVB, ATmega32HVBREVB, ATmega16HVB, ATmega16HVBREVB</td>
1098:/usr/avr/include/avr/power.h ****   </tr>
1099:/usr/avr/include/avr/power.h **** 
1100:/usr/avr/include/avr/power.h ****   <tr>
1101:/usr/avr/include/avr/power.h ****    <td>power_vrm_enable()</td>
1102:/usr/avr/include/avr/power.h ****     <td> Enable the VRM module </td>
1103:/usr/avr/include/avr/power.h ****     <td>ATmega32HVB, ATmega32HVBREVB, ATmega16HVB, ATmega16HVBREVB</td>
1104:/usr/avr/include/avr/power.h ****   </tr>
1105:/usr/avr/include/avr/power.h **** 
1106:/usr/avr/include/avr/power.h ****   <tr>
1107:/usr/avr/include/avr/power.h ****    <td>power_xcl_disable()</td>
1108:/usr/avr/include/avr/power.h ****     <td> Disable XCL module </td>
1109:/usr/avr/include/avr/power.h ****     <td>ATxmega32E5, ATxmega16E5, ATxmega8E5</td>
1110:/usr/avr/include/avr/power.h ****   </tr>
1111:/usr/avr/include/avr/power.h **** 
1112:/usr/avr/include/avr/power.h ****   <tr>
1113:/usr/avr/include/avr/power.h ****    <td>power_xcl_enable()</td>
1114:/usr/avr/include/avr/power.h ****     <td> Enable XCL module </td>
1115:/usr/avr/include/avr/power.h ****     <td>ATxmega32E5, ATxmega16E5, ATxmega8E5</td>
1116:/usr/avr/include/avr/power.h ****   </tr>
1117:/usr/avr/include/avr/power.h **** 
1118:/usr/avr/include/avr/power.h ****   <tr>
1119:/usr/avr/include/avr/power.h ****     <td>power_clock_output_enable()</td>
1120:/usr/avr/include/avr/power.h ****     <td>Enable clock output module</td>
1121:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1122:/usr/avr/include/avr/power.h ****   </tr>
1123:/usr/avr/include/avr/power.h **** 
1124:/usr/avr/include/avr/power.h ****   <tr>
1125:/usr/avr/include/avr/power.h ****     <td>power_clock_output_disable()</td>
1126:/usr/avr/include/avr/power.h ****     <td>Enable clock output module</td>
1127:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1128:/usr/avr/include/avr/power.h ****   </tr>
1129:/usr/avr/include/avr/power.h **** 
1130:/usr/avr/include/avr/power.h ****   <tr>
1131:/usr/avr/include/avr/power.h ****     <td>power_voltage_monitor_enable()</td>
1132:/usr/avr/include/avr/power.h ****     <td>Enable voltage monitor module</td>
1133:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1134:/usr/avr/include/avr/power.h ****   </tr>
1135:/usr/avr/include/avr/power.h **** 
1136:/usr/avr/include/avr/power.h ****   <tr>
1137:/usr/avr/include/avr/power.h ****     <td>power_voltage_monitor_disable()</td>
1138:/usr/avr/include/avr/power.h ****     <td>Disable voltage monitor module</td>
1139:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1140:/usr/avr/include/avr/power.h ****   </tr>
1141:/usr/avr/include/avr/power.h **** 
1142:/usr/avr/include/avr/power.h ****   <tr>
1143:/usr/avr/include/avr/power.h ****     <td>power_crc_enable()</td>
1144:/usr/avr/include/avr/power.h ****     <td>Enable CRC module</td>
1145:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1146:/usr/avr/include/avr/power.h ****   </tr>
1147:/usr/avr/include/avr/power.h **** 
1148:/usr/avr/include/avr/power.h ****   <tr>
1149:/usr/avr/include/avr/power.h ****     <td>power_crc_disable()</td>
1150:/usr/avr/include/avr/power.h ****     <td>Disable CRC module</td>
1151:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1152:/usr/avr/include/avr/power.h ****   </tr>
1153:/usr/avr/include/avr/power.h **** 
1154:/usr/avr/include/avr/power.h ****   <tr>
1155:/usr/avr/include/avr/power.h ****     <td>power_transmit_dsp_control_enable()</td>
1156:/usr/avr/include/avr/power.h ****     <td>Enable Transmit DSP control module</td>
1157:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1158:/usr/avr/include/avr/power.h ****   </tr>
1159:/usr/avr/include/avr/power.h **** 
1160:/usr/avr/include/avr/power.h ****   <tr>
1161:/usr/avr/include/avr/power.h ****     <td>power_transmit_dsp_control_disable()</td>
1162:/usr/avr/include/avr/power.h ****     <td>Disable Transmit DSP control module</td>
1163:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1164:/usr/avr/include/avr/power.h ****   </tr>
1165:/usr/avr/include/avr/power.h **** 
1166:/usr/avr/include/avr/power.h ****   <tr>
1167:/usr/avr/include/avr/power.h ****     <td>power_receive_dsp_control_enable()</td>
1168:/usr/avr/include/avr/power.h ****     <td>Enable Receive DSP control module</td>
1169:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1170:/usr/avr/include/avr/power.h ****   </tr>
1171:/usr/avr/include/avr/power.h **** 
1172:/usr/avr/include/avr/power.h ****   <tr>
1173:/usr/avr/include/avr/power.h ****     <td>power_receive_dsp_control_disable()</td>
1174:/usr/avr/include/avr/power.h ****     <td>Disable Receive DSP control module</td>
1175:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1176:/usr/avr/include/avr/power.h ****   </tr>
1177:/usr/avr/include/avr/power.h **** 
1178:/usr/avr/include/avr/power.h ****   <tr>
1179:/usr/avr/include/avr/power.h ****     <td>power_sequencer_state_machine_enable()</td>
1180:/usr/avr/include/avr/power.h ****     <td>Enable power sequencer state machine</td>
1181:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1182:/usr/avr/include/avr/power.h ****   </tr>
1183:/usr/avr/include/avr/power.h **** 
1184:/usr/avr/include/avr/power.h ****   <tr>
1185:/usr/avr/include/avr/power.h ****     <td>power_sequencer_state_machine_disable()</td>
1186:/usr/avr/include/avr/power.h ****     <td>Disable power sequencer state machine</td>
1187:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1188:/usr/avr/include/avr/power.h ****   </tr>
1189:/usr/avr/include/avr/power.h **** 
1190:/usr/avr/include/avr/power.h ****   <tr>
1191:/usr/avr/include/avr/power.h ****     <td>power_tx_modulator_enable()</td>
1192:/usr/avr/include/avr/power.h ****     <td>Enable Tx modulator</td>
1193:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1194:/usr/avr/include/avr/power.h ****   </tr>
1195:/usr/avr/include/avr/power.h **** 
1196:/usr/avr/include/avr/power.h ****   <tr>
1197:/usr/avr/include/avr/power.h ****     <td>power_tx_modulator_disable()</td>
1198:/usr/avr/include/avr/power.h ****     <td>Disable Tx modulator</td>
1199:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1200:/usr/avr/include/avr/power.h ****   </tr>
1201:/usr/avr/include/avr/power.h **** 
1202:/usr/avr/include/avr/power.h ****   <tr>
1203:/usr/avr/include/avr/power.h ****     <td>power_rssi_buffer_enable()</td>
1204:/usr/avr/include/avr/power.h ****     <td>Enable RSSI buffer</td>
1205:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1206:/usr/avr/include/avr/power.h ****   </tr>
1207:/usr/avr/include/avr/power.h **** 
1208:/usr/avr/include/avr/power.h ****   <tr>
1209:/usr/avr/include/avr/power.h ****     <td>power_rssi_buffer_disable()</td>
1210:/usr/avr/include/avr/power.h ****     <td>Disable RSSI buffer</td>
1211:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1212:/usr/avr/include/avr/power.h ****   </tr>
1213:/usr/avr/include/avr/power.h **** 
1214:/usr/avr/include/avr/power.h ****   <tr>
1215:/usr/avr/include/avr/power.h ****     <td>power_id_scan_enable()</td>
1216:/usr/avr/include/avr/power.h ****     <td>Enable ID Scan</td>
1217:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1218:/usr/avr/include/avr/power.h ****   </tr>
1219:/usr/avr/include/avr/power.h **** 
1220:/usr/avr/include/avr/power.h ****   <tr>
1221:/usr/avr/include/avr/power.h ****     <td>power_id_scan_disable()</td>
1222:/usr/avr/include/avr/power.h ****     <td>Disable ID Scan</td>
1223:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1224:/usr/avr/include/avr/power.h ****   </tr>
1225:/usr/avr/include/avr/power.h **** 
1226:/usr/avr/include/avr/power.h ****   <tr>
1227:/usr/avr/include/avr/power.h ****     <td>power_data_fifo_enable()</td>
1228:/usr/avr/include/avr/power.h ****     <td>Enable data FIFO</td>
1229:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1230:/usr/avr/include/avr/power.h ****   </tr>
1231:/usr/avr/include/avr/power.h **** 
1232:/usr/avr/include/avr/power.h ****   <tr>
1233:/usr/avr/include/avr/power.h ****     <td>power_data_fifo_disable()</td>
1234:/usr/avr/include/avr/power.h ****     <td>Disable data FIFO</td>
1235:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1236:/usr/avr/include/avr/power.h ****   </tr>
1237:/usr/avr/include/avr/power.h **** 
1238:/usr/avr/include/avr/power.h ****   <tr>
1239:/usr/avr/include/avr/power.h ****     <td>power_preamble_rssi_fifo_enable()</td>
1240:/usr/avr/include/avr/power.h ****     <td>Enable preamble/RSSI FIFO</td>
1241:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1242:/usr/avr/include/avr/power.h ****   </tr>
1243:/usr/avr/include/avr/power.h **** 
1244:/usr/avr/include/avr/power.h ****   <tr>
1245:/usr/avr/include/avr/power.h ****     <td>power_preamble_rssi_fifo_disable()</td>
1246:/usr/avr/include/avr/power.h ****     <td>Disable preamble/RSSI FIFO</td>
1247:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1248:/usr/avr/include/avr/power.h ****   </tr>
1249:/usr/avr/include/avr/power.h **** 
1250:/usr/avr/include/avr/power.h ****   <tr>
1251:/usr/avr/include/avr/power.h ****     <td>power_rx_buffer_A_enable()</td>
1252:/usr/avr/include/avr/power.h ****     <td>Enable receive buffer for data path A</td>
1253:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1254:/usr/avr/include/avr/power.h ****   </tr>
1255:/usr/avr/include/avr/power.h **** 
1256:/usr/avr/include/avr/power.h ****   <tr>
1257:/usr/avr/include/avr/power.h ****     <td>power_rx_buffer_A_disable()</td>
1258:/usr/avr/include/avr/power.h ****     <td>Disable receive buffer for data path A</td>
1259:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1260:/usr/avr/include/avr/power.h ****   </tr>
1261:/usr/avr/include/avr/power.h **** 
1262:/usr/avr/include/avr/power.h ****   <tr>
1263:/usr/avr/include/avr/power.h ****     <td>power_rx_buffer_B_enable()</td>
1264:/usr/avr/include/avr/power.h ****     <td>Enable receive buffer for data path B</td>
1265:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1266:/usr/avr/include/avr/power.h ****   </tr>
1267:/usr/avr/include/avr/power.h **** 
1268:/usr/avr/include/avr/power.h ****   <tr>
1269:/usr/avr/include/avr/power.h ****     <td>power_rx_buffer_B_disable()</td>
1270:/usr/avr/include/avr/power.h ****     <td>Disable receive buffer for data path B</td>
1271:/usr/avr/include/avr/power.h ****     <td>ATA5831</td>
1272:/usr/avr/include/avr/power.h ****   </tr>
1273:/usr/avr/include/avr/power.h **** 
1274:/usr/avr/include/avr/power.h **** </table>
1275:/usr/avr/include/avr/power.h **** </center>
1276:/usr/avr/include/avr/power.h **** </small>
1277:/usr/avr/include/avr/power.h **** 
1278:/usr/avr/include/avr/power.h **** @} */
1279:/usr/avr/include/avr/power.h **** 
1280:/usr/avr/include/avr/power.h **** // Xmega A series has AES, EBI and DMA bits
1281:/usr/avr/include/avr/power.h **** // Include any other device on need basis
1282:/usr/avr/include/avr/power.h **** #if defined(__AVR_ATxmega16A4__) \
1283:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega16A4U__) \
1284:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega32A4U__) \
1285:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega32A4__) \
1286:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1__) \
1287:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1U__) \
1288:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega64A3__) \
1289:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega64A3U__) \
1290:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega64A4U__) \
1291:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1__) \
1292:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1U__) \
1293:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega128A3__) \
1294:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega128A3U__) \
1295:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega128A4U__) \
1296:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega192A3__) \
1297:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega192A3U__) \
1298:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3__) \
1299:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3U__) \
1300:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3B__) \
1301:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3BU__) \
1302:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega384C3__)
1303:/usr/avr/include/avr/power.h **** 
1304:/usr/avr/include/avr/power.h **** 
1305:/usr/avr/include/avr/power.h **** #define power_aes_enable()  (PR_PRGEN &= (uint8_t)~(PR_AES_bm))
1306:/usr/avr/include/avr/power.h **** #define power_aes_disable() (PR_PRGEN |= (uint8_t)PR_AES_bm)
1307:/usr/avr/include/avr/power.h **** 
1308:/usr/avr/include/avr/power.h **** #define power_ebi_enable()  (PR_PRGEN &= (uint8_t)~(PR_EBI_bm))
1309:/usr/avr/include/avr/power.h **** #define power_ebi_disable() (PR_PRGEN |= (uint8_t)PR_EBI_bm)
1310:/usr/avr/include/avr/power.h **** 
1311:/usr/avr/include/avr/power.h **** #define power_dma_enable()    (PR_PRGEN &= (uint8_t)~(PR_DMA_bm))
1312:/usr/avr/include/avr/power.h **** #define power_dma_disable()   (PR_PRGEN |= (uint8_t)PR_DMA_bm)
1313:/usr/avr/include/avr/power.h **** 
1314:/usr/avr/include/avr/power.h **** #define power_daca_enable()     (PR_PRPA &= (uint8_t)~(PR_DAC_bm))
1315:/usr/avr/include/avr/power.h **** #define power_daca_disable()    (PR_PRPA |= (uint8_t)PR_DAC_bm)
1316:/usr/avr/include/avr/power.h **** #define power_dacb_enable()     (PR_PRPB &= (uint8_t)~(PR_DAC_bm))
1317:/usr/avr/include/avr/power.h **** #define power_dacb_disable()    (PR_PRPB |= (uint8_t)PR_DAC_bm)
1318:/usr/avr/include/avr/power.h **** 
1319:/usr/avr/include/avr/power.h **** #define power_usartc1_enable()  (PR_PRPC &= (uint8_t)~(PR_USART1_bm))
1320:/usr/avr/include/avr/power.h **** #define power_usartc1_disable() (PR_PRPC |= (uint8_t)PR_USART1_bm)
1321:/usr/avr/include/avr/power.h **** #define power_usartd1_enable()  (PR_PRPD &= (uint8_t)~(PR_USART1_bm))
1322:/usr/avr/include/avr/power.h **** #define power_usartd1_disable() (PR_PRPD |= (uint8_t)PR_USART1_bm)
1323:/usr/avr/include/avr/power.h **** #define power_usarte1_enable()  (PR_PRPE &= (uint8_t)~(PR_USART1_bm))
1324:/usr/avr/include/avr/power.h **** #define power_usarte1_disable() (PR_PRPE |= (uint8_t)PR_USART1_bm)
1325:/usr/avr/include/avr/power.h **** #define power_usartf1_enable()  (PR_PRPF &= (uint8_t)~(PR_USART1_bm))
1326:/usr/avr/include/avr/power.h **** #define power_usartf1_disable() (PR_PRPF |= (uint8_t)PR_USART1_bm)
1327:/usr/avr/include/avr/power.h **** 
1328:/usr/avr/include/avr/power.h **** #if defined(__AVR_ATxmega384C3__) \
1329:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3BU__) \
1330:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega16A4U__) \
1331:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega32A4U__) \
1332:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega64A3U__) \
1333:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega64A4U__) \
1334:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega128A3U__) \
1335:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega128A4U__) \
1336:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega192A3U__) \
1337:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3U__) 
1338:/usr/avr/include/avr/power.h **** 
1339:/usr/avr/include/avr/power.h **** #define power_usb_enable()   (PR_PRGEN &= (uint8_t)~(PR_USB_bm))
1340:/usr/avr/include/avr/power.h **** #define power_usb_disable()  (PR_PRGEN &= (uint8_t)(PR_USB_bm))
1341:/usr/avr/include/avr/power.h **** 
1342:/usr/avr/include/avr/power.h **** #define power_all_enable() \
1343:/usr/avr/include/avr/power.h **** do { \
1344:/usr/avr/include/avr/power.h ****     PR_PRGEN &= (uint8_t)~(PR_AES_bm|PR_EBI_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm|PR_USB_bm); \
1345:/usr/avr/include/avr/power.h ****     PR_PRPA &= (uint8_t)~(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
1346:/usr/avr/include/avr/power.h ****     PR_PRPB &= (uint8_t)~(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
1347:/usr/avr/include/avr/power.h ****     PR_PRPC &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
1348:/usr/avr/include/avr/power.h ****     PR_PRPD &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
1349:/usr/avr/include/avr/power.h ****     PR_PRPE &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
1350:/usr/avr/include/avr/power.h ****     PR_PRPF &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
1351:/usr/avr/include/avr/power.h **** } while(0)
1352:/usr/avr/include/avr/power.h **** 
1353:/usr/avr/include/avr/power.h **** #define power_all_disable() \
1354:/usr/avr/include/avr/power.h **** do { \
1355:/usr/avr/include/avr/power.h ****     PR_PRGEN |= (uint8_t)(PR_AES_bm|PR_EBI_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm|PR_USB_bm); \
1356:/usr/avr/include/avr/power.h ****     PR_PRPA |= (uint8_t)(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
1357:/usr/avr/include/avr/power.h ****     PR_PRPB |= (uint8_t)(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
1358:/usr/avr/include/avr/power.h ****     PR_PRPC |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
1359:/usr/avr/include/avr/power.h ****     PR_PRPD |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
1360:/usr/avr/include/avr/power.h ****     PR_PRPE |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
1361:/usr/avr/include/avr/power.h ****     PR_PRPF |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
1362:/usr/avr/include/avr/power.h **** } while(0)
1363:/usr/avr/include/avr/power.h **** 
1364:/usr/avr/include/avr/power.h **** #else
1365:/usr/avr/include/avr/power.h **** 
1366:/usr/avr/include/avr/power.h **** #define power_all_enable() \
1367:/usr/avr/include/avr/power.h **** do { \
1368:/usr/avr/include/avr/power.h ****     PR_PRGEN &= (uint8_t)~(PR_AES_bm|PR_EBI_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm); \
1369:/usr/avr/include/avr/power.h ****     PR_PRPA &= (uint8_t)~(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
1370:/usr/avr/include/avr/power.h ****     PR_PRPB &= (uint8_t)~(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
1371:/usr/avr/include/avr/power.h ****     PR_PRPC &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
1372:/usr/avr/include/avr/power.h ****     PR_PRPD &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
1373:/usr/avr/include/avr/power.h ****     PR_PRPE &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
1374:/usr/avr/include/avr/power.h ****     PR_PRPF &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
1375:/usr/avr/include/avr/power.h **** } while(0)
1376:/usr/avr/include/avr/power.h **** 
1377:/usr/avr/include/avr/power.h **** 
1378:/usr/avr/include/avr/power.h **** #define power_all_disable() \
1379:/usr/avr/include/avr/power.h **** do { \
1380:/usr/avr/include/avr/power.h ****     PR_PRGEN|= (uint8_t)(PR_AES_bm|PR_EBI_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm); \
1381:/usr/avr/include/avr/power.h ****     PR_PRPA |= (uint8_t)(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
1382:/usr/avr/include/avr/power.h ****     PR_PRPB |= (uint8_t)(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
1383:/usr/avr/include/avr/power.h ****     PR_PRPC |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
1384:/usr/avr/include/avr/power.h ****     PR_PRPD |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
1385:/usr/avr/include/avr/power.h ****     PR_PRPE |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
1386:/usr/avr/include/avr/power.h ****     PR_PRPF |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
1387:/usr/avr/include/avr/power.h **** } while(0)
1388:/usr/avr/include/avr/power.h **** #endif
1389:/usr/avr/include/avr/power.h **** 
1390:/usr/avr/include/avr/power.h **** #endif
1391:/usr/avr/include/avr/power.h **** 
1392:/usr/avr/include/avr/power.h **** #if defined(__AVR_ATxmega16C4__) \
1393:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega32C4__) \
1394:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega64C3__) \
1395:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega128C3__) \
1396:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega192C3__) \
1397:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega256C3__) 
1398:/usr/avr/include/avr/power.h **** 
1399:/usr/avr/include/avr/power.h **** #define power_usb_enable()   (PR_PRGEN &= (uint8_t)~(PR_USB_bm))
1400:/usr/avr/include/avr/power.h **** #define power_usb_disable()  (PR_PRGEN &= (uint8_t)(PR_USB_bm))
1401:/usr/avr/include/avr/power.h **** 
1402:/usr/avr/include/avr/power.h **** #define power_aes_enable()  (PR_PRGEN &= (uint8_t)~(PR_AES_bm))
1403:/usr/avr/include/avr/power.h **** #define power_aes_disable() (PR_PRGEN |= (uint8_t)PR_AES_bm)
1404:/usr/avr/include/avr/power.h **** 
1405:/usr/avr/include/avr/power.h **** #define power_rtc_enable()  (PR_PRGEN &= (uint8_t)~(PR_RTC_bm))
1406:/usr/avr/include/avr/power.h **** #define power_rtc_disable() (PR_PRGEN |= (uint8_t)PR_RTC_bm)
1407:/usr/avr/include/avr/power.h **** 
1408:/usr/avr/include/avr/power.h **** #define power_evsys_enable()    (PR_PRGEN &= (uint8_t)~(PR_EVSYS_bm))
1409:/usr/avr/include/avr/power.h **** #define power_evsys_disable()   (PR_PRGEN |= (uint8_t)PR_EVSYS_bm)
1410:/usr/avr/include/avr/power.h **** 
1411:/usr/avr/include/avr/power.h **** #define power_dma_enable()    (PR_PRGEN &= (uint8_t)~(PR_DMA_bm))
1412:/usr/avr/include/avr/power.h **** #define power_dma_disable()   (PR_PRGEN |= (uint8_t)PR_DMA_bm)
1413:/usr/avr/include/avr/power.h **** 
1414:/usr/avr/include/avr/power.h **** #define power_adca_enable()     (PR_PRPA &= (uint8_t)~(PR_ADC_bm))
1415:/usr/avr/include/avr/power.h **** #define power_adca_disable()    (PR_PRPA |= (uint8_t)PR_ADC_bm)
1416:/usr/avr/include/avr/power.h **** 
1417:/usr/avr/include/avr/power.h **** #define power_aca_enable()      (PR_PRPA &= (uint8_t)~(PR_AC_bm))
1418:/usr/avr/include/avr/power.h **** #define power_aca_disable()     (PR_PRPA |= (uint8_t)PR_AC_bm)
1419:/usr/avr/include/avr/power.h **** 
1420:/usr/avr/include/avr/power.h **** #define power_twic_enable()     (PR_PRPC &= (uint8_t)~(PR_TWI_bm))
1421:/usr/avr/include/avr/power.h **** #define power_twic_disable()    (PR_PRPC |= (uint8_t)PR_TWI_bm)
1422:/usr/avr/include/avr/power.h **** #define power_twie_enable()     (PR_PRPE &= (uint8_t)~(PR_TWI_bm))
1423:/usr/avr/include/avr/power.h **** #define power_twie_disable()    (PR_PRPE |= (uint8_t)PR_TWI_bm)
1424:/usr/avr/include/avr/power.h **** 
1425:/usr/avr/include/avr/power.h **** #define power_usartc1_enable()  (PR_PRPC &= (uint8_t)~(PR_USART1_bm))
1426:/usr/avr/include/avr/power.h **** #define power_usartc1_disable() (PR_PRPC |= (uint8_t)PR_USART1_bm)
1427:/usr/avr/include/avr/power.h **** 
1428:/usr/avr/include/avr/power.h **** #define power_usartc0_enable()  (PR_PRPC &= (uint8_t)~(PR_USART0_bm))
1429:/usr/avr/include/avr/power.h **** #define power_usartc0_disable() (PR_PRPC |= (uint8_t)PR_USART0_bm)
1430:/usr/avr/include/avr/power.h **** #define power_usartd0_enable()  (PR_PRPD &= (uint8_t)~(PR_USART0_bm))
1431:/usr/avr/include/avr/power.h **** #define power_usartd0_disable() (PR_PRPD |= (uint8_t)PR_USART0_bm)
1432:/usr/avr/include/avr/power.h **** #define power_usarte0_enable()  (PR_PRPE &= (uint8_t)~(PR_USART0_bm))
1433:/usr/avr/include/avr/power.h **** #define power_usarte0_disable() (PR_PRPE |= (uint8_t)PR_USART0_bm)
1434:/usr/avr/include/avr/power.h **** #define power_usartf0_enable()  (PR_PRPF &= (uint8_t)~(PR_USART0_bm))
1435:/usr/avr/include/avr/power.h **** #define power_usartf0_disable() (PR_PRPF |= (uint8_t)PR_USART0_bm)
1436:/usr/avr/include/avr/power.h **** 
1437:/usr/avr/include/avr/power.h **** #define power_spic_enable()     (PR_PRPC &= (uint8_t)~(PR_SPI_bm))
1438:/usr/avr/include/avr/power.h **** #define power_spic_disable()    (PR_PRPC |= (uint8_t)PR_SPI_bm)
1439:/usr/avr/include/avr/power.h **** #define power_spid_enable()     (PR_PRPD &= (uint8_t)~(PR_SPI_bm))
1440:/usr/avr/include/avr/power.h **** #define power_spid_disable()    (PR_PRPD |= (uint8_t)PR_SPI_bm)
1441:/usr/avr/include/avr/power.h **** 
1442:/usr/avr/include/avr/power.h **** #define power_hiresc_enable()   (PR_PRPC &= (uint8_t)~(PR_HIRES_bm))
1443:/usr/avr/include/avr/power.h **** #define power_hiresc_disable()  (PR_PRPC |= (uint8_t)PR_HIRES_bm)
1444:/usr/avr/include/avr/power.h **** 
1445:/usr/avr/include/avr/power.h **** #define power_tc1c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC1_bm))
1446:/usr/avr/include/avr/power.h **** #define power_tc1c_disable()    (PR_PRPC |= (uint8_t)PR_TC1_bm)
1447:/usr/avr/include/avr/power.h **** 
1448:/usr/avr/include/avr/power.h **** #define power_tc0c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC0_bm))
1449:/usr/avr/include/avr/power.h **** #define power_tc0c_disable()    (PR_PRPC |= (uint8_t)PR_TC0_bm)
1450:/usr/avr/include/avr/power.h **** #define power_tc0d_enable()     (PR_PRPD &= (uint8_t)~(PR_TC0_bm))
1451:/usr/avr/include/avr/power.h **** #define power_tc0d_disable()    (PR_PRPD |= (uint8_t)PR_TC0_bm)
1452:/usr/avr/include/avr/power.h **** #define power_tc0e_enable()     (PR_PRPE &= (uint8_t)~(PR_TC0_bm))
1453:/usr/avr/include/avr/power.h **** #define power_tc0e_disable()    (PR_PRPE |= (uint8_t)PR_TC0_bm)
1454:/usr/avr/include/avr/power.h **** #define power_tc0f_enable()     (PR_PRPF &= (uint8_t)~(PR_TC0_bm))
1455:/usr/avr/include/avr/power.h **** #define power_tc0f_disable()    (PR_PRPF |= (uint8_t)PR_TC0_bm)
1456:/usr/avr/include/avr/power.h **** 
1457:/usr/avr/include/avr/power.h **** #define power_all_enable() \
1458:/usr/avr/include/avr/power.h **** do { \
1459:/usr/avr/include/avr/power.h ****     PR_PRGEN &= (uint8_t)~(PR_USB_bm|PR_AES_bm|PR_DMA_bm|PR_RTC_bm|PR_EVSYS_bm); \
1460:/usr/avr/include/avr/power.h ****     PR_PRPA &= (uint8_t)~(PR_ADC_bm|PR_AC_bm); \
1461:/usr/avr/include/avr/power.h ****     PR_PRPC &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_USART1_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
1462:/usr/avr/include/avr/power.h ****     PR_PRPD &= (uint8_t)~(PR_USART0_bm|PR_SPI_bm|PR_TC0_bm); \
1463:/usr/avr/include/avr/power.h ****     PR_PRPE &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_TC0_bm); \
1464:/usr/avr/include/avr/power.h ****     PR_PRPF &= (uint8_t)~(PR_USART0_bm|PR_TC0_bm); \
1465:/usr/avr/include/avr/power.h ****     } while(0)
1466:/usr/avr/include/avr/power.h **** 
1467:/usr/avr/include/avr/power.h **** #define power_all_disable() \
1468:/usr/avr/include/avr/power.h **** do { \
1469:/usr/avr/include/avr/power.h ****     PR_PRGEN |= (uint8_t)(PR_USB_bm|PR_AES_bm|PR_DMA_bm|PR_RTC_bm|PR_EVSYS_bm); \
1470:/usr/avr/include/avr/power.h ****     PR_PRPA |= (uint8_t)(PR_ADC_bm|PR_AC_bm); \
1471:/usr/avr/include/avr/power.h ****     PR_PRPC |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_USART1_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
1472:/usr/avr/include/avr/power.h ****     PR_PRPD |= (uint8_t)(PR_USART0_bm|PR_SPI_bm|PR_TC0_bm); \
1473:/usr/avr/include/avr/power.h ****     PR_PRPE |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_TC0_bm); \
1474:/usr/avr/include/avr/power.h ****     PR_PRPF |= (uint8_t)(PR_USART0_bm|PR_TC0_bm); \
1475:/usr/avr/include/avr/power.h ****     } while(0)
1476:/usr/avr/include/avr/power.h **** 
1477:/usr/avr/include/avr/power.h **** #endif
1478:/usr/avr/include/avr/power.h **** 
1479:/usr/avr/include/avr/power.h **** #if defined(__AVR_ATxmega16A4__) \
1480:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega16A4U__) \
1481:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega16D4__) \
1482:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega32A4__) \
1483:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega32A4U__) \
1484:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega32D4__) \
1485:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1__) \
1486:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1U__) \
1487:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega64A3__) \
1488:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega64A3U__) \
1489:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega64A4U__) \
1490:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega64D3__) \
1491:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1__) \
1492:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1U__) \
1493:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega128A3__) \
1494:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega128A3U__) \
1495:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega128A4U__) \
1496:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega128D3__) \
1497:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega192A3__) \
1498:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega192A3U__) \
1499:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega192D3__) \
1500:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3__) \
1501:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3U__) \
1502:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3B__) \
1503:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3BU__) \
1504:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega384C3__)
1505:/usr/avr/include/avr/power.h **** 
1506:/usr/avr/include/avr/power.h **** 
1507:/usr/avr/include/avr/power.h **** #define power_rtc_enable()  (PR_PRGEN &= (uint8_t)~(PR_RTC_bm))
1508:/usr/avr/include/avr/power.h **** #define power_rtc_disable() (PR_PRGEN |= (uint8_t)PR_RTC_bm)
1509:/usr/avr/include/avr/power.h **** 
1510:/usr/avr/include/avr/power.h **** #define power_evsys_enable()    (PR_PRGEN &= (uint8_t)~(PR_EVSYS_bm))
1511:/usr/avr/include/avr/power.h **** #define power_evsys_disable()   (PR_PRGEN |= (uint8_t)PR_EVSYS_bm)
1512:/usr/avr/include/avr/power.h **** 
1513:/usr/avr/include/avr/power.h **** #define power_adca_enable()     (PR_PRPA &= (uint8_t)~(PR_ADC_bm))
1514:/usr/avr/include/avr/power.h **** #define power_adca_disable()    (PR_PRPA |= (uint8_t)PR_ADC_bm)
1515:/usr/avr/include/avr/power.h **** #define power_adcb_enable()     (PR_PRPB &= (uint8_t)~(PR_ADC_bm))
1516:/usr/avr/include/avr/power.h **** #define power_adcb_disable()    (PR_PRPB |= (uint8_t)PR_ADC_bm)
1517:/usr/avr/include/avr/power.h **** 
1518:/usr/avr/include/avr/power.h **** #define power_aca_enable()      (PR_PRPA &= (uint8_t)~(PR_AC_bm))
1519:/usr/avr/include/avr/power.h **** #define power_aca_disable()     (PR_PRPA |= (uint8_t)PR_AC_bm)
1520:/usr/avr/include/avr/power.h **** #define power_acb_enable()      (PR_PRPB &= (uint8_t)~(PR_AC_bm))
1521:/usr/avr/include/avr/power.h **** #define power_acb_disable()     (PR_PRPB |= (uint8_t)PR_AC_bm)
1522:/usr/avr/include/avr/power.h **** 
1523:/usr/avr/include/avr/power.h **** #define power_twic_enable()     (PR_PRPC &= (uint8_t)~(PR_TWI_bm))
1524:/usr/avr/include/avr/power.h **** #define power_twic_disable()    (PR_PRPC |= (uint8_t)PR_TWI_bm)
1525:/usr/avr/include/avr/power.h **** #define power_twid_enable()     (PR_PRPD &= (uint8_t)~(PR_TWI_bm))
1526:/usr/avr/include/avr/power.h **** #define power_twid_disable()    (PR_PRPD |= (uint8_t)PR_TWI_bm)
1527:/usr/avr/include/avr/power.h **** #define power_twie_enable()     (PR_PRPE &= (uint8_t)~(PR_TWI_bm))
1528:/usr/avr/include/avr/power.h **** #define power_twie_disable()    (PR_PRPE |= (uint8_t)PR_TWI_bm)
1529:/usr/avr/include/avr/power.h **** #define power_twif_enable()     (PR_PRPF &= (uint8_t)~(PR_TWI_bm))
1530:/usr/avr/include/avr/power.h **** #define power_twif_disable()    (PR_PRPF |= (uint8_t)PR_TWI_bm)
1531:/usr/avr/include/avr/power.h **** 
1532:/usr/avr/include/avr/power.h **** #define power_usartc0_enable()  (PR_PRPC &= (uint8_t)~(PR_USART0_bm))
1533:/usr/avr/include/avr/power.h **** #define power_usartc0_disable() (PR_PRPC |= (uint8_t)PR_USART0_bm)
1534:/usr/avr/include/avr/power.h **** #define power_usartd0_enable()  (PR_PRPD &= (uint8_t)~(PR_USART0_bm))
1535:/usr/avr/include/avr/power.h **** #define power_usartd0_disable() (PR_PRPD |= (uint8_t)PR_USART0_bm)
1536:/usr/avr/include/avr/power.h **** #define power_usarte0_enable()  (PR_PRPE &= (uint8_t)~(PR_USART0_bm))
1537:/usr/avr/include/avr/power.h **** #define power_usarte0_disable() (PR_PRPE |= (uint8_t)PR_USART0_bm)
1538:/usr/avr/include/avr/power.h **** #define power_usartf0_enable()  (PR_PRPF &= (uint8_t)~(PR_USART0_bm))
1539:/usr/avr/include/avr/power.h **** #define power_usartf0_disable() (PR_PRPF |= (uint8_t)PR_USART0_bm)
1540:/usr/avr/include/avr/power.h **** 
1541:/usr/avr/include/avr/power.h **** #define power_spic_enable()     (PR_PRPC &= (uint8_t)~(PR_SPI_bm))
1542:/usr/avr/include/avr/power.h **** #define power_spic_disable()    (PR_PRPC |= (uint8_t)PR_SPI_bm)
1543:/usr/avr/include/avr/power.h **** #define power_spid_enable()     (PR_PRPD &= (uint8_t)~(PR_SPI_bm))
1544:/usr/avr/include/avr/power.h **** #define power_spid_disable()    (PR_PRPD |= (uint8_t)PR_SPI_bm)
1545:/usr/avr/include/avr/power.h **** #define power_spie_enable()     (PR_PRPE &= (uint8_t)~(PR_SPI_bm))
1546:/usr/avr/include/avr/power.h **** #define power_spie_disable()    (PR_PRPE |= (uint8_t)PR_SPI_bm)
1547:/usr/avr/include/avr/power.h **** #define power_spif_enable()     (PR_PRPF &= (uint8_t)~(PR_SPI_bm))
1548:/usr/avr/include/avr/power.h **** #define power_spif_disable()    (PR_PRPF |= (uint8_t)PR_SPI_bm)
1549:/usr/avr/include/avr/power.h **** 
1550:/usr/avr/include/avr/power.h **** #define power_hiresc_enable()   (PR_PRPC &= (uint8_t)~(PR_HIRES_bm))
1551:/usr/avr/include/avr/power.h **** #define power_hiresc_disable()  (PR_PRPC |= (uint8_t)PR_HIRES_bm)
1552:/usr/avr/include/avr/power.h **** #define power_hiresd_enable()   (PR_PRPD &= (uint8_t)~(PR_HIRES_bm))
1553:/usr/avr/include/avr/power.h **** #define power_hiresd_disable()  (PR_PRPD |= (uint8_t)PR_HIRES_bm)
1554:/usr/avr/include/avr/power.h **** #define power_hirese_enable()   (PR_PRPE &= (uint8_t)~(PR_HIRES_bm))
1555:/usr/avr/include/avr/power.h **** #define power_hirese_disable()  (PR_PRPE |= (uint8_t)PR_HIRES_bm)
1556:/usr/avr/include/avr/power.h **** #define power_hiresf_enable()   (PR_PRPF &= (uint8_t)~(PR_HIRES_bm))
1557:/usr/avr/include/avr/power.h **** #define power_hiresf_disable()  (PR_PRPF |= (uint8_t)PR_HIRES_bm)
1558:/usr/avr/include/avr/power.h **** 
1559:/usr/avr/include/avr/power.h **** #define power_tc1c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC1_bm))
1560:/usr/avr/include/avr/power.h **** #define power_tc1c_disable()    (PR_PRPC |= (uint8_t)PR_TC1_bm)
1561:/usr/avr/include/avr/power.h **** #define power_tc1d_enable()     (PR_PRPD &= (uint8_t)~(PR_TC1_bm))
1562:/usr/avr/include/avr/power.h **** #define power_tc1d_disable()    (PR_PRPD |= (uint8_t)PR_TC1_bm)
1563:/usr/avr/include/avr/power.h **** #define power_tc1e_enable()     (PR_PRPE &= (uint8_t)~(PR_TC1_bm))
1564:/usr/avr/include/avr/power.h **** #define power_tc1e_disable()    (PR_PRPE |= (uint8_t)PR_TC1_bm)
1565:/usr/avr/include/avr/power.h **** #define power_tc1f_enable()     (PR_PRPF &= (uint8_t)~(PR_TC1_bm))
1566:/usr/avr/include/avr/power.h **** #define power_tc1f_disable()    (PR_PRPF |= (uint8_t)PR_TC1_bm)
1567:/usr/avr/include/avr/power.h **** 
1568:/usr/avr/include/avr/power.h **** #define power_tc0c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC0_bm))
1569:/usr/avr/include/avr/power.h **** #define power_tc0c_disable()    (PR_PRPC |= (uint8_t)PR_TC0_bm)
1570:/usr/avr/include/avr/power.h **** #define power_tc0d_enable()     (PR_PRPD &= (uint8_t)~(PR_TC0_bm))
1571:/usr/avr/include/avr/power.h **** #define power_tc0d_disable()    (PR_PRPD |= (uint8_t)PR_TC0_bm)
1572:/usr/avr/include/avr/power.h **** #define power_tc0e_enable()     (PR_PRPE &= (uint8_t)~(PR_TC0_bm))
1573:/usr/avr/include/avr/power.h **** #define power_tc0e_disable()    (PR_PRPE |= (uint8_t)PR_TC0_bm)
1574:/usr/avr/include/avr/power.h **** #define power_tc0f_enable()     (PR_PRPF &= (uint8_t)~(PR_TC0_bm))
1575:/usr/avr/include/avr/power.h **** #define power_tc0f_disable()    (PR_PRPF |= (uint8_t)PR_TC0_bm)
1576:/usr/avr/include/avr/power.h **** 
1577:/usr/avr/include/avr/power.h **** #endif
1578:/usr/avr/include/avr/power.h **** 
1579:/usr/avr/include/avr/power.h **** #if defined(__AVR_ATxmega64D4__) \
1580:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega128D4__) 
1581:/usr/avr/include/avr/power.h **** 
1582:/usr/avr/include/avr/power.h **** #define power_rtc_enable()  (PR_PRGEN &= (uint8_t)~(PR_RTC_bm))
1583:/usr/avr/include/avr/power.h **** #define power_rtc_disable() (PR_PRGEN |= (uint8_t)PR_RTC_bm)
1584:/usr/avr/include/avr/power.h **** 
1585:/usr/avr/include/avr/power.h **** #define power_evsys_enable()    (PR_PRGEN &= (uint8_t)~(PR_EVSYS_bm))
1586:/usr/avr/include/avr/power.h **** #define power_evsys_disable()   (PR_PRGEN |= (uint8_t)PR_EVSYS_bm)
1587:/usr/avr/include/avr/power.h **** 
1588:/usr/avr/include/avr/power.h **** #define power_adca_enable()     (PR_PRPA &= (uint8_t)~(PR_ADC_bm))
1589:/usr/avr/include/avr/power.h **** #define power_adca_disable()    (PR_PRPA |= (uint8_t)PR_ADC_bm)
1590:/usr/avr/include/avr/power.h **** 
1591:/usr/avr/include/avr/power.h **** #define power_aca_enable()      (PR_PRPA &= (uint8_t)~(PR_AC_bm))
1592:/usr/avr/include/avr/power.h **** #define power_aca_disable()     (PR_PRPA |= (uint8_t)PR_AC_bm)
1593:/usr/avr/include/avr/power.h **** 
1594:/usr/avr/include/avr/power.h **** #define power_twic_enable()     (PR_PRPC &= (uint8_t)~(PR_TWI_bm))
1595:/usr/avr/include/avr/power.h **** #define power_twic_disable()    (PR_PRPC |= (uint8_t)PR_TWI_bm)
1596:/usr/avr/include/avr/power.h **** #define power_twie_enable()     (PR_PRPE &= (uint8_t)~(PR_TWI_bm))
1597:/usr/avr/include/avr/power.h **** #define power_twie_disable()    (PR_PRPE |= (uint8_t)PR_TWI_bm)
1598:/usr/avr/include/avr/power.h **** 
1599:/usr/avr/include/avr/power.h **** #define power_usartc0_enable()  (PR_PRPC &= (uint8_t)~(PR_USART0_bm))
1600:/usr/avr/include/avr/power.h **** #define power_usartc0_disable() (PR_PRPC |= (uint8_t)PR_USART0_bm)
1601:/usr/avr/include/avr/power.h **** #define power_usartd0_enable()  (PR_PRPD &= (uint8_t)~(PR_USART0_bm))
1602:/usr/avr/include/avr/power.h **** #define power_usartd0_disable() (PR_PRPD |= (uint8_t)PR_USART0_bm)
1603:/usr/avr/include/avr/power.h **** #define power_usarte0_enable()  (PR_PRPE &= (uint8_t)~(PR_USART0_bm))
1604:/usr/avr/include/avr/power.h **** #define power_usarte0_disable() (PR_PRPE |= (uint8_t)PR_USART0_bm)
1605:/usr/avr/include/avr/power.h **** #define power_usartf0_enable()  (PR_PRPF &= (uint8_t)~(PR_USART0_bm))
1606:/usr/avr/include/avr/power.h **** #define power_usartf0_disable() (PR_PRPF |= (uint8_t)PR_USART0_bm)
1607:/usr/avr/include/avr/power.h **** 
1608:/usr/avr/include/avr/power.h **** #define power_spic_enable()     (PR_PRPC &= (uint8_t)~(PR_SPI_bm))
1609:/usr/avr/include/avr/power.h **** #define power_spic_disable()    (PR_PRPC |= (uint8_t)PR_SPI_bm)
1610:/usr/avr/include/avr/power.h **** #define power_spid_enable()     (PR_PRPD &= (uint8_t)~(PR_SPI_bm))
1611:/usr/avr/include/avr/power.h **** #define power_spid_disable()    (PR_PRPD |= (uint8_t)PR_SPI_bm)
1612:/usr/avr/include/avr/power.h **** 
1613:/usr/avr/include/avr/power.h **** #define power_hiresc_enable()   (PR_PRPC &= (uint8_t)~(PR_HIRES_bm))
1614:/usr/avr/include/avr/power.h **** #define power_hiresc_disable()  (PR_PRPC |= (uint8_t)PR_HIRES_bm)
1615:/usr/avr/include/avr/power.h **** 
1616:/usr/avr/include/avr/power.h **** #define power_tc1c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC1_bm))
1617:/usr/avr/include/avr/power.h **** #define power_tc1c_disable()    (PR_PRPC |= (uint8_t)PR_TC1_bm)
1618:/usr/avr/include/avr/power.h **** 
1619:/usr/avr/include/avr/power.h **** #define power_tc0c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC0_bm))
1620:/usr/avr/include/avr/power.h **** #define power_tc0c_disable()    (PR_PRPC |= (uint8_t)PR_TC0_bm)
1621:/usr/avr/include/avr/power.h **** #define power_tc0d_enable()     (PR_PRPD &= (uint8_t)~(PR_TC0_bm))
1622:/usr/avr/include/avr/power.h **** #define power_tc0d_disable()    (PR_PRPD |= (uint8_t)PR_TC0_bm)
1623:/usr/avr/include/avr/power.h **** #define power_tc0e_enable()     (PR_PRPE &= (uint8_t)~(PR_TC0_bm))
1624:/usr/avr/include/avr/power.h **** #define power_tc0e_disable()    (PR_PRPE |= (uint8_t)PR_TC0_bm)
1625:/usr/avr/include/avr/power.h **** #define power_tc0f_enable()     (PR_PRPF &= (uint8_t)~(PR_TC0_bm))
1626:/usr/avr/include/avr/power.h **** #define power_tc0f_disable()    (PR_PRPF |= (uint8_t)PR_TC0_bm)
1627:/usr/avr/include/avr/power.h **** 
1628:/usr/avr/include/avr/power.h **** #define power_all_enable() \
1629:/usr/avr/include/avr/power.h **** do { \
1630:/usr/avr/include/avr/power.h ****     PR_PRGEN &= (uint8_t)~(PR_RTC_bm|PR_EVSYS_bm); \
1631:/usr/avr/include/avr/power.h ****     PR_PRPA &= (uint8_t)~(PR_ADC_bm|PR_AC_bm); \
1632:/usr/avr/include/avr/power.h ****     PR_PRPC &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
1633:/usr/avr/include/avr/power.h ****     PR_PRPD &= (uint8_t)~(PR_USART0_bm|PR_SPI_bm|PR_TC0_bm); \
1634:/usr/avr/include/avr/power.h ****     PR_PRPE &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_TC0_bm); \
1635:/usr/avr/include/avr/power.h ****     PR_PRPF &= (uint8_t)~(PR_USART0_bm|PR_TC0_bm); \
1636:/usr/avr/include/avr/power.h ****     } while(0)
1637:/usr/avr/include/avr/power.h **** 
1638:/usr/avr/include/avr/power.h **** #define power_all_disable() \
1639:/usr/avr/include/avr/power.h **** do { \
1640:/usr/avr/include/avr/power.h ****     PR_PRGEN |= (uint8_t)(PR_RTC_bm|PR_EVSYS_bm); \
1641:/usr/avr/include/avr/power.h ****     PR_PRPA |= (uint8_t)(PR_ADC_bm|PR_AC_bm); \
1642:/usr/avr/include/avr/power.h ****     PR_PRPC |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
1643:/usr/avr/include/avr/power.h ****     PR_PRPD |= (uint8_t)(PR_USART0_bm|PR_SPI_bm|PR_TC0_bm); \
1644:/usr/avr/include/avr/power.h ****     PR_PRPE |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_TC0_bm); \
1645:/usr/avr/include/avr/power.h ****     PR_PRPF |= (uint8_t)(PR_USART0_bm|PR_TC0_bm); \
1646:/usr/avr/include/avr/power.h ****     } while(0)
1647:/usr/avr/include/avr/power.h **** 
1648:/usr/avr/include/avr/power.h **** #endif
1649:/usr/avr/include/avr/power.h **** 
1650:/usr/avr/include/avr/power.h **** #if defined(__AVR_ATxmega16D4__) \
1651:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega32D4__) \
1652:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega64D3__) \
1653:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega128D3__) \
1654:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega192D3__) 
1655:/usr/avr/include/avr/power.h **** 
1656:/usr/avr/include/avr/power.h **** #define power_all_enable() \
1657:/usr/avr/include/avr/power.h **** do { \
1658:/usr/avr/include/avr/power.h ****     PR_PRGEN &= (uint8_t)~(PR_RTC_bm|PR_EVSYS_bm); \
1659:/usr/avr/include/avr/power.h ****     PR_PRPA &= (uint8_t)~(PR_ADC_bm|PR_AC_bm); \
1660:/usr/avr/include/avr/power.h ****     PR_PRPB &= (uint8_t)~(PR_ADC_bm|PR_AC_bm); \
1661:/usr/avr/include/avr/power.h ****     PR_PRPC &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
1662:/usr/avr/include/avr/power.h ****     PR_PRPD &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
1663:/usr/avr/include/avr/power.h ****     PR_PRPE &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
1664:/usr/avr/include/avr/power.h ****     PR_PRPF &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
1665:/usr/avr/include/avr/power.h **** } while(0)
1666:/usr/avr/include/avr/power.h **** 
1667:/usr/avr/include/avr/power.h **** 
1668:/usr/avr/include/avr/power.h **** #define power_all_disable() \
1669:/usr/avr/include/avr/power.h **** do { \
1670:/usr/avr/include/avr/power.h ****     PR_PRGEN|= (uint8_t)(PR_EBI_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm); \
1671:/usr/avr/include/avr/power.h ****     PR_PRPA |= (uint8_t)(PR_ADC_bm|PR_AC_bm); \
1672:/usr/avr/include/avr/power.h ****     PR_PRPB |= (uint8_t)(PR_ADC_bm|PR_AC_bm); \
1673:/usr/avr/include/avr/power.h ****     PR_PRPC |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
1674:/usr/avr/include/avr/power.h ****     PR_PRPD |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
1675:/usr/avr/include/avr/power.h ****     PR_PRPE |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
1676:/usr/avr/include/avr/power.h ****     PR_PRPF |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
1677:/usr/avr/include/avr/power.h **** } while(0)
1678:/usr/avr/include/avr/power.h **** 
1679:/usr/avr/include/avr/power.h **** 
1680:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATxmega32E5__) \
1681:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega16E5__) \
1682:/usr/avr/include/avr/power.h **** || defined(__AVR_ATxmega8E5__) 
1683:/usr/avr/include/avr/power.h **** 
1684:/usr/avr/include/avr/power.h **** #define power_xcl_enable()      (PR_PRGEN &= (uint8_t)~(PR_XCL_bm))
1685:/usr/avr/include/avr/power.h **** #define power_xcl_disable()     (PR_PRGEN |= (uint8_t)PR_XCL_bm)
1686:/usr/avr/include/avr/power.h **** 
1687:/usr/avr/include/avr/power.h **** #define power_rtc_enable()      (PR_PRGEN &= (uint8_t)~(PR_RTC_bm)) 
1688:/usr/avr/include/avr/power.h **** #define power_rtc_disable()     (PR_PRGEN |= (uint8_t)PR_RTC_bm)
1689:/usr/avr/include/avr/power.h **** 
1690:/usr/avr/include/avr/power.h **** #define power_evsys_enable()    (PR_PRGEN &= (uint8_t)~(PR_EVSYS_bm)) 
1691:/usr/avr/include/avr/power.h **** #define power_evsys_disable()   (PR_PRGEN |= (uint8_t)PR_EVSYS_bm)
1692:/usr/avr/include/avr/power.h **** 
1693:/usr/avr/include/avr/power.h **** #define power_edma_enable()     (PR_PRGEN &= (uint8_t)~(PR_EDMA_bm))
1694:/usr/avr/include/avr/power.h **** #define power_edma_disable()    (PR_PRGEN |= (uint8_t)PR_EDMA_bm)
1695:/usr/avr/include/avr/power.h **** 
1696:/usr/avr/include/avr/power.h **** #define power_daca_enable()      (PR_PRPA  &= (uint8_t)~(PR_DAC_bm))
1697:/usr/avr/include/avr/power.h **** #define power_daca_disable()     (PR_PRPA  |= (uint8_t)PR_DAC_bm)
1698:/usr/avr/include/avr/power.h **** 
1699:/usr/avr/include/avr/power.h **** #define power_adca_enable()      (PR_PRPA  &= (uint8_t)~(PR_ADC_bm))
1700:/usr/avr/include/avr/power.h **** #define power_adca_disable()     (PR_PRPA  |= (uint8_t)PR_ADC_bm)
1701:/usr/avr/include/avr/power.h **** 
1702:/usr/avr/include/avr/power.h **** #define power_aca_enable()       (PR_PRPA  &= (uint8_t)~(PR_AC_bm))
1703:/usr/avr/include/avr/power.h **** #define power_aca_disable()      (PR_PRPA  |= (uint8_t)PR_AC_bm)
1704:/usr/avr/include/avr/power.h **** 
1705:/usr/avr/include/avr/power.h **** #define power_twic_enable()      (PR_PRPC  &= (uint8_t)~(PR_TWI_bm))
1706:/usr/avr/include/avr/power.h **** #define power_twic_disable()     (PR_PRPC  |= (uint8_t)PR_TWI_bm)
1707:/usr/avr/include/avr/power.h **** 
1708:/usr/avr/include/avr/power.h **** #define power_usartc0_enable()   (PR_PRPC  &= (uint8_t)~(PR_USART0_bm))
1709:/usr/avr/include/avr/power.h **** #define power_usartc0_disable()  (PR_PRPC  |= (uint8_t)PR_USART0_bm)
1710:/usr/avr/include/avr/power.h **** 
1711:/usr/avr/include/avr/power.h **** #define power_spic_enable()      (PR_PRPC  &= (uint8_t)~(PR_SPI_bm))
1712:/usr/avr/include/avr/power.h **** #define power_spic_disable()     (PR_PRPC  |= (uint8_t)PR_SPI_bm)
1713:/usr/avr/include/avr/power.h **** 
1714:/usr/avr/include/avr/power.h **** #define power_hiresc_enable()    (PR_PRPC  &= (uint8_t)~(PR_HIRES_bm))
1715:/usr/avr/include/avr/power.h **** #define power_hiresc_disable()   (PR_PRPC  |= (uint8_t)PR_HIRES_bm)
1716:/usr/avr/include/avr/power.h **** 
1717:/usr/avr/include/avr/power.h **** #define power_tc5c_enable()      (PR_PRPC  &= (uint8_t)~(PR_TC5_bm))
1718:/usr/avr/include/avr/power.h **** #define power_tc5c_disable()     (PR_PRPC  |= (uint8_t)PR_TC5_bm)
1719:/usr/avr/include/avr/power.h **** 
1720:/usr/avr/include/avr/power.h **** #define power_tc4c_enable()      (PR_PRPC  &= (uint8_t)~(PR_TC4_bm))
1721:/usr/avr/include/avr/power.h **** #define power_tc4c_disable()     (PR_PRPC  |= (uint8_t)PR_TC4_bm)
1722:/usr/avr/include/avr/power.h **** 
1723:/usr/avr/include/avr/power.h **** #define power_usartd0_enable()   (PR_PRPD  &= (uint8_t)~(PR_USART0_bm))  
1724:/usr/avr/include/avr/power.h **** #define power_usartd0_disable()  (PR_PRPD  |= (uint8_t)PR_USART0_bm)
1725:/usr/avr/include/avr/power.h **** 
1726:/usr/avr/include/avr/power.h **** #define power_tc5d_enable()      (PR_PRPC  &= (uint8_t)~(PR_TC5_bm)) 
1727:/usr/avr/include/avr/power.h **** #define power_tc5d_disable()     (PR_PRPC  |= (uint8_t)PR_TC5_bm) 
1728:/usr/avr/include/avr/power.h **** 
1729:/usr/avr/include/avr/power.h **** #define power_all_enable() \
1730:/usr/avr/include/avr/power.h **** do { \
1731:/usr/avr/include/avr/power.h ****     PR_PRGEN &= (uint8_t)~(PR_RTC_bm|PR_EVSYS_bm|PR_XCL_bm|PR_EDMA_bm); \
1732:/usr/avr/include/avr/power.h ****     PR_PRPA  &= (uint8_t)~(PR_ADC_bm|PR_AC_bm|PR_DAC_bm); \
1733:/usr/avr/include/avr/power.h ****     PR_PRPC  &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC5_bm|PR_TC4_bm); \
1734:/usr/avr/include/avr/power.h ****     PR_PRPD  &= (uint8_t)~(PR_USART0_bm|PR_TC5_bm); \
1735:/usr/avr/include/avr/power.h **** } while(0)
1736:/usr/avr/include/avr/power.h **** 
1737:/usr/avr/include/avr/power.h **** 
1738:/usr/avr/include/avr/power.h **** #define power_all_disable() \
1739:/usr/avr/include/avr/power.h **** do { \
1740:/usr/avr/include/avr/power.h ****     PR_PRGEN|= (uint8_t)(PR_XCL_bm|PR_RTC_bm|PR_EVSYS_bm|PR_EDMA_bm); \
1741:/usr/avr/include/avr/power.h ****     PR_PRPA |= (uint8_t)(PR_ADC_bm|PR_AC_bm|PR_DAC_bm); \
1742:/usr/avr/include/avr/power.h ****     PR_PRPC |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC5_bm|PR_TC4_bm); \
1743:/usr/avr/include/avr/power.h ****     PR_PRPD |= (uint8_t)(PR_USART0_bm|PR_TC5_bm); \
1744:/usr/avr/include/avr/power.h **** } while(0)
1745:/usr/avr/include/avr/power.h **** 
1746:/usr/avr/include/avr/power.h **** 
1747:/usr/avr/include/avr/power.h **** #elif defined (__AVR_ATxmega64B1__) \
1748:/usr/avr/include/avr/power.h **** || defined (__AVR_ATxmega64B3__) \
1749:/usr/avr/include/avr/power.h **** || defined (__AVR_ATxmega128B1__) \
1750:/usr/avr/include/avr/power.h **** || defined (__AVR_ATxmega128B3__) 
1751:/usr/avr/include/avr/power.h **** #define power_lcd_enable()  (PR_PRGEN &= (uint8_t)~(PR_LCD_bm))
1752:/usr/avr/include/avr/power.h **** #define power_lcd_disable() (PR_PRGEN |= (uint8_t)PR_LCD_bm)
1753:/usr/avr/include/avr/power.h **** 
1754:/usr/avr/include/avr/power.h **** #define power_usb_enable()  (PR_PRGEN &= (uint8_t)~(PR_USB_bm))
1755:/usr/avr/include/avr/power.h **** #define power_usb_disable() (PR_PRGEN |= (uint8_t)PR_USB_bm)
1756:/usr/avr/include/avr/power.h **** 
1757:/usr/avr/include/avr/power.h **** #define power_aes_enable()  (PR_PRGEN &= (uint8_t)~(PR_AES_bm))
1758:/usr/avr/include/avr/power.h **** #define power_aes_disable() (PR_PRGEN |= (uint8_t)PR_AES_bm)
1759:/usr/avr/include/avr/power.h **** 
1760:/usr/avr/include/avr/power.h **** #define power_rtc_enable()  (PR_PRGEN &= (uint8_t)~(PR_RTC_bm))
1761:/usr/avr/include/avr/power.h **** #define power_rtc_disable() (PR_PRGEN |= (uint8_t)PR_RTC_bm)
1762:/usr/avr/include/avr/power.h **** 
1763:/usr/avr/include/avr/power.h **** #define power_evsys_enable()    (PR_PRGEN &= (uint8_t)~(PR_EVSYS_bm))
1764:/usr/avr/include/avr/power.h **** #define power_evsys_disable()   (PR_PRGEN |= (uint8_t)PR_EVSYS_bm)
1765:/usr/avr/include/avr/power.h **** 
1766:/usr/avr/include/avr/power.h **** #define power_dma_enable()    (PR_PRGEN &= (uint8_t)~(PR_DMA_bm))
1767:/usr/avr/include/avr/power.h **** #define power_dma_disable()   (PR_PRGEN |= (uint8_t)PR_DMA_bm)
1768:/usr/avr/include/avr/power.h **** 
1769:/usr/avr/include/avr/power.h **** #define power_adca_enable()     (PR_PRPA &= (uint8_t)~(PR_ADC_bm))
1770:/usr/avr/include/avr/power.h **** #define power_adca_disable()    (PR_PRPA |= (uint8_t)PR_ADC_bm)
1771:/usr/avr/include/avr/power.h **** #define power_adcb_enable()     (PR_PRPB &= (uint8_t)~(PR_ADC_bm))
1772:/usr/avr/include/avr/power.h **** #define power_adcb_disable()    (PR_PRPB |= (uint8_t)PR_ADC_bm)
1773:/usr/avr/include/avr/power.h **** 
1774:/usr/avr/include/avr/power.h **** #define power_aca_enable()      (PR_PRPA &= (uint8_t)~(PR_AC_bm))
1775:/usr/avr/include/avr/power.h **** #define power_aca_disable()     (PR_PRPA |= (uint8_t)PR_AC_bm)
1776:/usr/avr/include/avr/power.h **** #define power_acb_enable()      (PR_PRPB &= (uint8_t)~(PR_AC_bm))
1777:/usr/avr/include/avr/power.h **** #define power_acb_disable()     (PR_PRPB |= (uint8_t)PR_AC_bm)
1778:/usr/avr/include/avr/power.h **** 
1779:/usr/avr/include/avr/power.h **** #define power_twic_enable()     (PR_PRPC &= (uint8_t)~(PR_TWI_bm))
1780:/usr/avr/include/avr/power.h **** #define power_twic_disable()    (PR_PRPC |= (uint8_t)PR_TWI_bm)
1781:/usr/avr/include/avr/power.h **** 
1782:/usr/avr/include/avr/power.h **** #define power_usartc0_enable()  (PR_PRPC &= (uint8_t)~(PR_USART0_bm))
1783:/usr/avr/include/avr/power.h **** #define power_usartc0_disable() (PR_PRPC |= (uint8_t)PR_USART0_bm)
1784:/usr/avr/include/avr/power.h **** #define power_usarte0_enable()  (PR_PRPE &= (uint8_t)~(PR_USART0_bm))
1785:/usr/avr/include/avr/power.h **** #define power_usarte0_disable() (PR_PRPE |= (uint8_t)PR_USART0_bm)
1786:/usr/avr/include/avr/power.h **** 
1787:/usr/avr/include/avr/power.h **** #define power_spic_enable()     (PR_PRPC &= (uint8_t)~(PR_SPI_bm))
1788:/usr/avr/include/avr/power.h **** #define power_spic_disable()    (PR_PRPC |= (uint8_t)PR_SPI_bm)
1789:/usr/avr/include/avr/power.h **** 
1790:/usr/avr/include/avr/power.h **** #define power_hiresc_enable()     (PR_PRPC &= (uint8_t)~(PR_HIRES_bm))
1791:/usr/avr/include/avr/power.h **** #define power_hiresc_disable()    (PR_PRPC |= (uint8_t)PR_HIRES_bm)
1792:/usr/avr/include/avr/power.h **** 
1793:/usr/avr/include/avr/power.h **** #define power_tc1c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC1_bm))
1794:/usr/avr/include/avr/power.h **** #define power_tc1c_disable()    (PR_PRPC |= (uint8_t)PR_TC1_bm)
1795:/usr/avr/include/avr/power.h **** 
1796:/usr/avr/include/avr/power.h **** #define power_tc0c_enable()  (PR_PRPC &= (uint8_t)~(PR_TC0_bm))
1797:/usr/avr/include/avr/power.h **** #define power_tc0c_disable() (PR_PRPC |= (uint8_t)PR_TC0_bm)
1798:/usr/avr/include/avr/power.h **** #define power_tc0e_enable()  (PR_PRPE &= (uint8_t)~(PR_TC0_bm))
1799:/usr/avr/include/avr/power.h **** #define power_tc0e_disable() (PR_PRPE |= (uint8_t)PR_TC0_bm)
1800:/usr/avr/include/avr/power.h **** 
1801:/usr/avr/include/avr/power.h **** #define power_all_enable() \
1802:/usr/avr/include/avr/power.h **** do { \
1803:/usr/avr/include/avr/power.h ****     PR_PRGEN &= (uint8_t)~(PR_LCD_bm|PR_USB_bm|PR_AES_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm); \
1804:/usr/avr/include/avr/power.h ****     PR_PRPA &= (uint8_t)~(PR_ADC_bm|PR_AC_bm); \
1805:/usr/avr/include/avr/power.h ****     PR_PRPB &= (uint8_t)~(PR_ADC_bm|PR_AC_bm); \
1806:/usr/avr/include/avr/power.h ****     PR_PRPC &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
1807:/usr/avr/include/avr/power.h ****     PR_PRPE &= (uint8_t)~(PR_USART0_bm|PR_TC0_bm); \
1808:/usr/avr/include/avr/power.h ****     } while(0)
1809:/usr/avr/include/avr/power.h **** 
1810:/usr/avr/include/avr/power.h **** #define power_all_disable() \
1811:/usr/avr/include/avr/power.h **** do { \
1812:/usr/avr/include/avr/power.h ****     PR_PRGEN |= (uint8_t)(PR_LCD_bm|PR_USB_bm|PR_AES_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm); \
1813:/usr/avr/include/avr/power.h ****     PR_PRPA |= (uint8_t)(PR_ADC_bm|PR_AC_bm); \
1814:/usr/avr/include/avr/power.h ****     PR_PRPB |= (uint8_t)(PR_ADC_bm|PR_AC_bm); \
1815:/usr/avr/include/avr/power.h ****     PR_PRPC |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
1816:/usr/avr/include/avr/power.h ****     PR_PRPE |= (uint8_t)(PR_USART0_bm|PR_TC0_bm); \
1817:/usr/avr/include/avr/power.h ****     } while(0)
1818:/usr/avr/include/avr/power.h **** 
1819:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATmega640__) \
1820:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega1280__) \
1821:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega1281__) \
1822:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega2560__) \
1823:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega2561__) 
1824:/usr/avr/include/avr/power.h **** 
1825:/usr/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
1826:/usr/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
1827:/usr/avr/include/avr/power.h **** 
1828:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1829:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1830:/usr/avr/include/avr/power.h **** 
1831:/usr/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1832:/usr/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1833:/usr/avr/include/avr/power.h **** 
1834:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1835:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1836:/usr/avr/include/avr/power.h **** 
1837:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1838:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1839:/usr/avr/include/avr/power.h **** 
1840:/usr/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
1841:/usr/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
1842:/usr/avr/include/avr/power.h **** 
1843:/usr/avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
1844:/usr/avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
1845:/usr/avr/include/avr/power.h **** 
1846:/usr/avr/include/avr/power.h **** #define power_timer4_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM4))
1847:/usr/avr/include/avr/power.h **** #define power_timer4_disable()  (PRR1 |= (uint8_t)(1 << PRTIM4))
1848:/usr/avr/include/avr/power.h **** 
1849:/usr/avr/include/avr/power.h **** #define power_timer5_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM5))
1850:/usr/avr/include/avr/power.h **** #define power_timer5_disable()  (PRR1 |= (uint8_t)(1 << PRTIM5))
1851:/usr/avr/include/avr/power.h **** 
1852:/usr/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
1853:/usr/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
1854:/usr/avr/include/avr/power.h **** 
1855:/usr/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
1856:/usr/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
1857:/usr/avr/include/avr/power.h **** 
1858:/usr/avr/include/avr/power.h **** #define power_usart2_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART2))
1859:/usr/avr/include/avr/power.h **** #define power_usart2_disable()  (PRR1 |= (uint8_t)(1 << PRUSART2))
1860:/usr/avr/include/avr/power.h **** 
1861:/usr/avr/include/avr/power.h **** #define power_usart3_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART3))
1862:/usr/avr/include/avr/power.h **** #define power_usart3_disable()  (PRR1 |= (uint8_t)(1 << PRUSART3))
1863:/usr/avr/include/avr/power.h **** 
1864:/usr/avr/include/avr/power.h **** #define power_all_enable() \
1865:/usr/avr/include/avr/power.h **** do{ \
1866:/usr/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRU
1867:/usr/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)|(1<<PRUSART2)|
1868:/usr/avr/include/avr/power.h **** }while(0)
1869:/usr/avr/include/avr/power.h **** 
1870:/usr/avr/include/avr/power.h **** #define power_all_disable() \
1871:/usr/avr/include/avr/power.h **** do{ \
1872:/usr/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRUS
1873:/usr/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)|(1<<PRUSART2)|(
1874:/usr/avr/include/avr/power.h **** }while(0)
1875:/usr/avr/include/avr/power.h **** 
1876:/usr/avr/include/avr/power.h **** 
1877:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATmega128RFA1__)
1878:/usr/avr/include/avr/power.h **** 
1879:/usr/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
1880:/usr/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
1881:/usr/avr/include/avr/power.h **** 
1882:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1883:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1884:/usr/avr/include/avr/power.h **** 
1885:/usr/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1886:/usr/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1887:/usr/avr/include/avr/power.h **** 
1888:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1889:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1890:/usr/avr/include/avr/power.h **** 
1891:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1892:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1893:/usr/avr/include/avr/power.h **** 
1894:/usr/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
1895:/usr/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
1896:/usr/avr/include/avr/power.h **** 
1897:/usr/avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
1898:/usr/avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
1899:/usr/avr/include/avr/power.h **** 
1900:/usr/avr/include/avr/power.h **** #define power_timer4_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM4))
1901:/usr/avr/include/avr/power.h **** #define power_timer4_disable()  (PRR1 |= (uint8_t)(1 << PRTIM4))
1902:/usr/avr/include/avr/power.h **** 
1903:/usr/avr/include/avr/power.h **** #define power_timer5_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM5))
1904:/usr/avr/include/avr/power.h **** #define power_timer5_disable()  (PRR1 |= (uint8_t)(1 << PRTIM5))
1905:/usr/avr/include/avr/power.h **** 
1906:/usr/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
1907:/usr/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
1908:/usr/avr/include/avr/power.h **** 
1909:/usr/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
1910:/usr/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
1911:/usr/avr/include/avr/power.h **** 
1912:/usr/avr/include/avr/power.h **** #define power_all_enable() \
1913:/usr/avr/include/avr/power.h **** do{ \
1914:/usr/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRU
1915:/usr/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)); \
1916:/usr/avr/include/avr/power.h **** }while(0)
1917:/usr/avr/include/avr/power.h **** 
1918:/usr/avr/include/avr/power.h **** #define power_all_disable() \
1919:/usr/avr/include/avr/power.h **** do{ \
1920:/usr/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRUS
1921:/usr/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)); \
1922:/usr/avr/include/avr/power.h **** }while(0)
1923:/usr/avr/include/avr/power.h **** 
1924:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATmega256RFR2__) \
1925:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega2564RFR2__) \
1926:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega128RFR2__) \
1927:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega1284RFR2__) \
1928:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega64RFR2__) \
1929:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega644RFR2__) 
1930:/usr/avr/include/avr/power.h **** 
1931:/usr/avr/include/avr/power.h **** #define power_adc_enable()           (PRR0 &= (uint8_t)~(1 << PRADC))
1932:/usr/avr/include/avr/power.h **** #define power_adc_disable()          (PRR0 |= (uint8_t)(1 << PRADC))
1933:/usr/avr/include/avr/power.h **** 
1934:/usr/avr/include/avr/power.h **** #define power_usart0_enable()        (PRR0 &= (uint8_t)~(1 << PRUSART0))
1935:/usr/avr/include/avr/power.h **** #define power_usart0_disable()       (PRR0 |= (uint8_t)(1 << PRUSART0))
1936:/usr/avr/include/avr/power.h **** 
1937:/usr/avr/include/avr/power.h **** #define power_spi_enable()           (PRR0 &= (uint8_t)~(1 << PRSPI))
1938:/usr/avr/include/avr/power.h **** #define power_spi_disable()          (PRR0 |= (uint8_t)(1 << PRSPI))
1939:/usr/avr/include/avr/power.h **** 
1940:/usr/avr/include/avr/power.h **** #define power_timer1_enable()        (PRR0 &= (uint8_t)~(1 << PRTIM1))
1941:/usr/avr/include/avr/power.h **** #define power_timer1_disable()       (PRR0 |= (uint8_t)(1 << PRTIM1))
1942:/usr/avr/include/avr/power.h **** 
1943:/usr/avr/include/avr/power.h **** #define power_pga_enable()           (PRR0 &= (uint8_t)~(1 << PRPGA))
1944:/usr/avr/include/avr/power.h **** #define power_pga_disable()          (PRR0 |= (uint8_t)(1 << PRPGA))
1945:/usr/avr/include/avr/power.h **** 
1946:/usr/avr/include/avr/power.h **** #define power_timer0_enable()        (PRR0 &= (uint8_t)~(1 << PRTIM0))
1947:/usr/avr/include/avr/power.h **** #define power_timer0_disable()       (PRR0 |= (uint8_t)(1 << PRTIM0))
1948:/usr/avr/include/avr/power.h **** 
1949:/usr/avr/include/avr/power.h **** #define power_timer2_enable()        (PRR0 &= (uint8_t)~(1 << PRTIM2))
1950:/usr/avr/include/avr/power.h **** #define power_timer2_disable()       (PRR0 |= (uint8_t)(1 << PRTIM2))
1951:/usr/avr/include/avr/power.h **** 
1952:/usr/avr/include/avr/power.h **** #define power_twi_enable()           (PRR0 &= (uint8_t)~(1 << PRTWI))
1953:/usr/avr/include/avr/power.h **** #define power_twi_disable()          (PRR0 |= (uint8_t)(1 << PRTWI))
1954:/usr/avr/include/avr/power.h **** 
1955:/usr/avr/include/avr/power.h **** #define power_usart1_enable()        (PRR1 &= (uint8_t)~(1 << PRUSART1))
1956:/usr/avr/include/avr/power.h **** #define power_usart1_disable()       (PRR1 |= (uint8_t)(1 << PRUSART1))
1957:/usr/avr/include/avr/power.h **** 
1958:/usr/avr/include/avr/power.h **** #define power_timer3_enable()        (PRR1 &= (uint8_t)~(1 << PRTIM3))
1959:/usr/avr/include/avr/power.h **** #define power_timer3_disable()       (PRR1 |= (uint8_t)(1 << PRTIM3))
1960:/usr/avr/include/avr/power.h **** 
1961:/usr/avr/include/avr/power.h **** #define power_timer4_enable()        (PRR1 &= (uint8_t)~(1 << PRTIM4))
1962:/usr/avr/include/avr/power.h **** #define power_timer4_disable()       (PRR1 |= (uint8_t)(1 << PRTIM4))
1963:/usr/avr/include/avr/power.h **** 
1964:/usr/avr/include/avr/power.h **** #define power_timer5_enable()        (PRR1 &= (uint8_t)~(1 << PRTIM5))
1965:/usr/avr/include/avr/power.h **** #define power_timer5_disable()       (PRR1 |= (uint8_t)(1 << PRTIM5))
1966:/usr/avr/include/avr/power.h **** 
1967:/usr/avr/include/avr/power.h **** #define power_transceiver_enable()   (PRR1 &= (uint8_t)~(1 << PRTRX24))
1968:/usr/avr/include/avr/power.h **** #define power_transceiver_disable()  (PRR1 |= (uint8_t)(1 << PRTRX24))
1969:/usr/avr/include/avr/power.h **** 
1970:/usr/avr/include/avr/power.h **** #define power_ram0_enable()          (PRR2 &= (uint8_t)~(1 << PRRAM0))
1971:/usr/avr/include/avr/power.h **** #define power_ram0_disable()         (PRR2 |= (uint8_t)(1 << PRRAM0))
1972:/usr/avr/include/avr/power.h **** 
1973:/usr/avr/include/avr/power.h **** #define power_ram1_enable()          (PRR2 &= (uint8_t)~(1 << PRRAM1))
1974:/usr/avr/include/avr/power.h **** #define power_ram1_disable()         (PRR2 |= (uint8_t)(1 << PRRAM1))
1975:/usr/avr/include/avr/power.h **** 
1976:/usr/avr/include/avr/power.h **** #define power_ram2_enable()          (PRR2 &= (uint8_t)~(1 << PRRAM2))
1977:/usr/avr/include/avr/power.h **** #define power_ram2_disable()         (PRR2 |= (uint8_t)(1 << PRRAM2))
1978:/usr/avr/include/avr/power.h **** 
1979:/usr/avr/include/avr/power.h **** #define power_ram3_enable()          (PRR2 &= (uint8_t)~(1 << PRRAM3))
1980:/usr/avr/include/avr/power.h **** #define power_ram3_disable()         (PRR2 |= (uint8_t)(1 << PRRAM3))
1981:/usr/avr/include/avr/power.h **** 
1982:/usr/avr/include/avr/power.h **** #define power_all_enable() \
1983:/usr/avr/include/avr/power.h **** do{ \
1984:/usr/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRU
1985:/usr/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRUSART1)|(1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTRX24)); \
1986:/usr/avr/include/avr/power.h ****     PRR2 &= (uint8_t)~((1<<PRRAM0)|(1<<PRRAM1)|(1<<PRRAM2)|(1<<PRRAM3)); \
1987:/usr/avr/include/avr/power.h **** }while(0)
1988:/usr/avr/include/avr/power.h **** 
1989:/usr/avr/include/avr/power.h **** #define power_all_disable() \
1990:/usr/avr/include/avr/power.h **** do{ \
1991:/usr/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRUS
1992:/usr/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRUSART1)|(1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTRX24)); \
1993:/usr/avr/include/avr/power.h ****     PRR2 |= (uint8_t)((1<<PRRAM0)|(1<<PRRAM1)|(1<<PRRAM2)|(1<<PRRAM3)); \
1994:/usr/avr/include/avr/power.h **** }while(0)
1995:/usr/avr/include/avr/power.h **** 
1996:/usr/avr/include/avr/power.h **** #elif defined(__AVR_AT90USB646__) \
1997:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90USB647__) \
1998:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90USB1286__) \
1999:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90USB1287__)
2000:/usr/avr/include/avr/power.h **** 
2001:/usr/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
2002:/usr/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
2003:/usr/avr/include/avr/power.h **** 
2004:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
2005:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
2006:/usr/avr/include/avr/power.h **** 
2007:/usr/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
2008:/usr/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
2009:/usr/avr/include/avr/power.h **** 
2010:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
2011:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
2012:/usr/avr/include/avr/power.h **** 
2013:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
2014:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
2015:/usr/avr/include/avr/power.h **** 
2016:/usr/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
2017:/usr/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
2018:/usr/avr/include/avr/power.h **** 
2019:/usr/avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
2020:/usr/avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
2021:/usr/avr/include/avr/power.h **** 
2022:/usr/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
2023:/usr/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
2024:/usr/avr/include/avr/power.h **** 
2025:/usr/avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
2026:/usr/avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
2027:/usr/avr/include/avr/power.h **** 
2028:/usr/avr/include/avr/power.h **** #define power_all_enable() \
2029:/usr/avr/include/avr/power.h **** do{ \
2030:/usr/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
2031:/usr/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
2032:/usr/avr/include/avr/power.h **** }while(0)
2033:/usr/avr/include/avr/power.h **** 
2034:/usr/avr/include/avr/power.h **** #define power_all_disable() \
2035:/usr/avr/include/avr/power.h **** do{ \
2036:/usr/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
2037:/usr/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
2038:/usr/avr/include/avr/power.h **** }while(0)
2039:/usr/avr/include/avr/power.h **** 
2040:/usr/avr/include/avr/power.h **** 
2041:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATmega32U4__) \
2042:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega16U4__)
2043:/usr/avr/include/avr/power.h **** 
2044:/usr/avr/include/avr/power.h **** 
2045:/usr/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
2046:/usr/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
2047:/usr/avr/include/avr/power.h **** 
2048:/usr/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
2049:/usr/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
2050:/usr/avr/include/avr/power.h **** 
2051:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
2052:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
2053:/usr/avr/include/avr/power.h **** 
2054:/usr/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
2055:/usr/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
2056:/usr/avr/include/avr/power.h **** 
2057:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
2058:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
2059:/usr/avr/include/avr/power.h **** 
2060:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
2061:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
2062:/usr/avr/include/avr/power.h **** 
2063:/usr/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
2064:/usr/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
2065:/usr/avr/include/avr/power.h **** 
2066:/usr/avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
2067:/usr/avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
2068:/usr/avr/include/avr/power.h **** 
2069:/usr/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
2070:/usr/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
2071:/usr/avr/include/avr/power.h **** 
2072:/usr/avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
2073:/usr/avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
2074:/usr/avr/include/avr/power.h **** 
2075:/usr/avr/include/avr/power.h **** #define power_all_enable() \
2076:/usr/avr/include/avr/power.h **** do{ \
2077:/usr/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRUSART0)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<P
2078:/usr/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
2079:/usr/avr/include/avr/power.h **** }while(0)
2080:/usr/avr/include/avr/power.h **** 
2081:/usr/avr/include/avr/power.h **** #define power_all_disable() \
2082:/usr/avr/include/avr/power.h **** do{ \
2083:/usr/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRUSART0)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PR
2084:/usr/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
2085:/usr/avr/include/avr/power.h **** }while(0)
2086:/usr/avr/include/avr/power.h **** 
2087:/usr/avr/include/avr/power.h **** 
2088:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATmega32U6__)
2089:/usr/avr/include/avr/power.h **** 
2090:/usr/avr/include/avr/power.h **** 
2091:/usr/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
2092:/usr/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
2093:/usr/avr/include/avr/power.h **** 
2094:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
2095:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
2096:/usr/avr/include/avr/power.h **** 
2097:/usr/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
2098:/usr/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
2099:/usr/avr/include/avr/power.h **** 
2100:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
2101:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
2102:/usr/avr/include/avr/power.h **** 
2103:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
2104:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
2105:/usr/avr/include/avr/power.h **** 
2106:/usr/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
2107:/usr/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
2108:/usr/avr/include/avr/power.h **** 
2109:/usr/avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
2110:/usr/avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
2111:/usr/avr/include/avr/power.h **** 
2112:/usr/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
2113:/usr/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
2114:/usr/avr/include/avr/power.h **** 
2115:/usr/avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
2116:/usr/avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
2117:/usr/avr/include/avr/power.h **** 
2118:/usr/avr/include/avr/power.h **** #define power_all_enable() \
2119:/usr/avr/include/avr/power.h **** do{ \
2120:/usr/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
2121:/usr/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
2122:/usr/avr/include/avr/power.h **** }while(0)
2123:/usr/avr/include/avr/power.h **** 
2124:/usr/avr/include/avr/power.h **** #define power_all_disable() \
2125:/usr/avr/include/avr/power.h **** do{ \
2126:/usr/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
2127:/usr/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
2128:/usr/avr/include/avr/power.h **** }while(0)
2129:/usr/avr/include/avr/power.h **** 
2130:/usr/avr/include/avr/power.h **** 
2131:/usr/avr/include/avr/power.h **** #elif defined(__AVR_AT90PWM1__)
2132:/usr/avr/include/avr/power.h **** 
2133:/usr/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
2134:/usr/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
2135:/usr/avr/include/avr/power.h **** 
2136:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
2137:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
2138:/usr/avr/include/avr/power.h **** 
2139:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
2140:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
2141:/usr/avr/include/avr/power.h **** 
2142:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
2143:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
2144:/usr/avr/include/avr/power.h **** 
2145:/usr/avr/include/avr/power.h **** /* Power Stage Controller 0 */
2146:/usr/avr/include/avr/power.h **** #define power_psc0_enable()     (PRR &= (uint8_t)~(1 << PRPSC0))
2147:/usr/avr/include/avr/power.h **** #define power_psc0_disable()    (PRR |= (uint8_t)(1 << PRPSC0))
2148:/usr/avr/include/avr/power.h **** 
2149:/usr/avr/include/avr/power.h **** /* Power Stage Controller 1 */
2150:/usr/avr/include/avr/power.h **** #define power_psc1_enable()     (PRR &= (uint8_t)~(1 << PRPSC1))
2151:/usr/avr/include/avr/power.h **** #define power_psc1_disable()    (PRR |= (uint8_t)(1 << PRPSC1))
2152:/usr/avr/include/avr/power.h **** 
2153:/usr/avr/include/avr/power.h **** /* Power Stage Controller 2 */
2154:/usr/avr/include/avr/power.h **** #define power_psc2_enable()     (PRR &= (uint8_t)~(1 << PRPSC2))
2155:/usr/avr/include/avr/power.h **** #define power_psc2_disable()    (PRR |= (uint8_t)(1 << PRPSC2))
2156:/usr/avr/include/avr/power.h **** 
2157:/usr/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)|(1
2158:/usr/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<
2159:/usr/avr/include/avr/power.h **** 
2160:/usr/avr/include/avr/power.h **** 
2161:/usr/avr/include/avr/power.h **** #elif defined(__AVR_AT90PWM2__) \
2162:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90PWM2B__) \
2163:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90PWM3__) \
2164:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90PWM3B__) \
2165:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90PWM216__) \
2166:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90PWM316__)
2167:/usr/avr/include/avr/power.h **** 
2168:/usr/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
2169:/usr/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
2170:/usr/avr/include/avr/power.h **** 
2171:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
2172:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
2173:/usr/avr/include/avr/power.h **** 
2174:/usr/avr/include/avr/power.h **** #if defined(__AVR_AT90PWM216__) || defined(__AVR_AT90PWM316__)
2175:/usr/avr/include/avr/power.h **** 
2176:/usr/avr/include/avr/power.h **** #define power_usart_enable()    (PRR &= (uint8_t)~(1 << PRUSART))
2177:/usr/avr/include/avr/power.h **** #define power_usart_disable()   (PRR |= (uint8_t)(1 << PRUSART))
2178:/usr/avr/include/avr/power.h **** 
2179:/usr/avr/include/avr/power.h **** #else
2180:/usr/avr/include/avr/power.h **** 
2181:/usr/avr/include/avr/power.h **** #define power_usart_enable()    (PRR &= (uint8_t)~(1 << PRUSART0))
2182:/usr/avr/include/avr/power.h **** #define power_usart_disable()   (PRR |= (uint8_t)(1 << PRUSART0))
2183:/usr/avr/include/avr/power.h **** 
2184:/usr/avr/include/avr/power.h **** #endif
2185:/usr/avr/include/avr/power.h **** 
2186:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
2187:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
2188:/usr/avr/include/avr/power.h **** 
2189:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
2190:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
2191:/usr/avr/include/avr/power.h **** 
2192:/usr/avr/include/avr/power.h **** /* Power Stage Controller 0 */
2193:/usr/avr/include/avr/power.h **** #define power_psc0_enable()     (PRR &= (uint8_t)~(1 << PRPSC0))
2194:/usr/avr/include/avr/power.h **** #define power_psc0_disable()    (PRR |= (uint8_t)(1 << PRPSC0))
2195:/usr/avr/include/avr/power.h **** 
2196:/usr/avr/include/avr/power.h **** /* Power Stage Controller 1 */
2197:/usr/avr/include/avr/power.h **** #define power_psc1_enable()     (PRR &= (uint8_t)~(1 << PRPSC1))
2198:/usr/avr/include/avr/power.h **** #define power_psc1_disable()    (PRR |= (uint8_t)(1 << PRPSC1))
2199:/usr/avr/include/avr/power.h **** 
2200:/usr/avr/include/avr/power.h **** /* Power Stage Controller 2 */
2201:/usr/avr/include/avr/power.h **** #define power_psc2_enable()     (PRR &= (uint8_t)~(1 << PRPSC2))
2202:/usr/avr/include/avr/power.h **** #define power_psc2_disable()    (PRR |= (uint8_t)(1 << PRPSC2))
2203:/usr/avr/include/avr/power.h **** 
2204:/usr/avr/include/avr/power.h **** #if defined(__AVR_AT90PWM216__) || defined(__AVR_AT90PWM316__)
2205:/usr/avr/include/avr/power.h **** 
2206:/usr/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART)|(1<<PRTIM0)|(
2207:/usr/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART)|(1<<PRTIM0)|(1
2208:/usr/avr/include/avr/power.h **** 
2209:/usr/avr/include/avr/power.h **** #else
2210:/usr/avr/include/avr/power.h **** 
2211:/usr/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|
2212:/usr/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|(
2213:/usr/avr/include/avr/power.h **** 
2214:/usr/avr/include/avr/power.h **** #endif
2215:/usr/avr/include/avr/power.h **** 
2216:/usr/avr/include/avr/power.h **** 
2217:/usr/avr/include/avr/power.h **** #elif defined(__AVR_AT90PWM81__) \
2218:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90PWM161__)
2219:/usr/avr/include/avr/power.h **** 
2220:/usr/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
2221:/usr/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
2222:/usr/avr/include/avr/power.h **** 
2223:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
2224:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
2225:/usr/avr/include/avr/power.h **** 
2226:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
2227:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
2228:/usr/avr/include/avr/power.h **** 
2229:/usr/avr/include/avr/power.h **** /* Reduced Power Stage Controller */
2230:/usr/avr/include/avr/power.h **** #define power_pscr_enable()     (PRR &= (uint8_t)~(1 << PRPSCR))
2231:/usr/avr/include/avr/power.h **** #define power_pscr_disable()    (PRR |= (uint8_t)(1 << PRPSCR))
2232:/usr/avr/include/avr/power.h **** 
2233:/usr/avr/include/avr/power.h **** /* Power Stage Controller 2 */
2234:/usr/avr/include/avr/power.h **** #define power_psc2_enable()     (PRR &= (uint8_t)~(1 << PRPSC2))
2235:/usr/avr/include/avr/power.h **** #define power_psc2_disable()    (PRR |= (uint8_t)(1 << PRPSC2))
2236:/usr/avr/include/avr/power.h **** 
2237:/usr/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRPSCR)|(1
2238:/usr/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRPSCR)|(1<
2239:/usr/avr/include/avr/power.h **** 
2240:/usr/avr/include/avr/power.h **** 
2241:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATmega165__) \
2242:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega165A__) \
2243:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega165P__) \
2244:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega165PA__) \
2245:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega325__) \
2246:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega325A__) \
2247:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega325P__) \
2248:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega325PA__) \
2249:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega3250__) \
2250:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega3250A__) \
2251:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega3250P__) \
2252:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega3250PA__) \
2253:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega645__) \
2254:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega645A__) \
2255:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega645P__) \
2256:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega6450__) \
2257:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega6450A__) \
2258:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega6450P__)
2259:/usr/avr/include/avr/power.h **** 
2260:/usr/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
2261:/usr/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
2262:/usr/avr/include/avr/power.h **** 
2263:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
2264:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
2265:/usr/avr/include/avr/power.h **** 
2266:/usr/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR &= (uint8_t)~(1 << PRUSART0))
2267:/usr/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR |= (uint8_t)(1 << PRUSART0))
2268:/usr/avr/include/avr/power.h **** 
2269:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
2270:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
2271:/usr/avr/include/avr/power.h **** 
2272:/usr/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1))
2273:/usr/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1)))
2274:/usr/avr/include/avr/power.h **** 
2275:/usr/avr/include/avr/power.h **** 
2276:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATmega169__) \
2277:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega169A__) \
2278:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega169P__) \
2279:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega169PA__) \
2280:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega329__) \
2281:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega329A__) \
2282:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega329P__) \
2283:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega329PA__) \
2284:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega3290__) \
2285:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega3290A__) \
2286:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega3290P__) \
2287:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega3290PA__) \
2288:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega649__) \
2289:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega649A__) \
2290:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega649P__) \
2291:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega6490__) \
2292:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega6490A__) \
2293:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega6490P__)
2294:/usr/avr/include/avr/power.h **** 
2295:/usr/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
2296:/usr/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
2297:/usr/avr/include/avr/power.h **** 
2298:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
2299:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
2300:/usr/avr/include/avr/power.h **** 
2301:/usr/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR &= (uint8_t)~(1 << PRUSART0))
2302:/usr/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR |= (uint8_t)(1 << PRUSART0))
2303:/usr/avr/include/avr/power.h **** 
2304:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
2305:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
2306:/usr/avr/include/avr/power.h **** 
2307:/usr/avr/include/avr/power.h **** #define power_lcd_enable()      (PRR &= (uint8_t)~(1 << PRLCD))
2308:/usr/avr/include/avr/power.h **** #define power_lcd_disable()     (PRR |= (uint8_t)(1 << PRLCD))
2309:/usr/avr/include/avr/power.h **** 
2310:/usr/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1)|
2311:/usr/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1)|(
2312:/usr/avr/include/avr/power.h **** 
2313:/usr/avr/include/avr/power.h **** 
2314:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATmega164A__) \
2315:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega164P__) \
2316:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega324A__) \
2317:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega324P__) \
2318:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega324PA__) \
2319:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega644P__) \
2320:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega644A__) \
2321:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega644PA__)
2322:/usr/avr/include/avr/power.h **** 
2323:/usr/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
2324:/usr/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
2325:/usr/avr/include/avr/power.h **** 
2326:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
2327:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
2328:/usr/avr/include/avr/power.h **** 
2329:/usr/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
2330:/usr/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
2331:/usr/avr/include/avr/power.h **** 
2332:/usr/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART1))
2333:/usr/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR0 |= (uint8_t)(1 << PRUSART1))
2334:/usr/avr/include/avr/power.h **** 
2335:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
2336:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
2337:/usr/avr/include/avr/power.h **** 
2338:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
2339:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
2340:/usr/avr/include/avr/power.h **** 
2341:/usr/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
2342:/usr/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
2343:/usr/avr/include/avr/power.h **** 
2344:/usr/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
2345:/usr/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
2346:/usr/avr/include/avr/power.h **** 
2347:/usr/avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRUSART
2348:/usr/avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRUSART1
2349:/usr/avr/include/avr/power.h **** 
2350:/usr/avr/include/avr/power.h **** 
2351:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATmega644__) \
2352:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega164PA__)
2353:/usr/avr/include/avr/power.h **** 
2354:/usr/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
2355:/usr/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
2356:/usr/avr/include/avr/power.h **** 
2357:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
2358:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
2359:/usr/avr/include/avr/power.h **** 
2360:/usr/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
2361:/usr/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
2362:/usr/avr/include/avr/power.h **** 
2363:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
2364:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
2365:/usr/avr/include/avr/power.h **** 
2366:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
2367:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
2368:/usr/avr/include/avr/power.h **** 
2369:/usr/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
2370:/usr/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
2371:/usr/avr/include/avr/power.h **** 
2372:/usr/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
2373:/usr/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
2374:/usr/avr/include/avr/power.h **** 
2375:/usr/avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)
2376:/usr/avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|
2377:/usr/avr/include/avr/power.h **** 
2378:/usr/avr/include/avr/power.h **** 
2379:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATmega406__)
2380:/usr/avr/include/avr/power.h **** 
2381:/usr/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
2382:/usr/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
2383:/usr/avr/include/avr/power.h **** 
2384:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
2385:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
2386:/usr/avr/include/avr/power.h **** 
2387:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
2388:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
2389:/usr/avr/include/avr/power.h **** 
2390:/usr/avr/include/avr/power.h **** /* Voltage ADC */
2391:/usr/avr/include/avr/power.h **** #define power_vadc_enable()     (PRR0 &= (uint8_t)~(1 << PRVADC))
2392:/usr/avr/include/avr/power.h **** #define power_vadc_disable()    (PRR0 |= (uint8_t)(1 << PRVADC))
2393:/usr/avr/include/avr/power.h **** 
2394:/usr/avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC))
2395:/usr/avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC)))
2396:/usr/avr/include/avr/power.h **** 
2397:/usr/avr/include/avr/power.h **** 
2398:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATmega48__) \
2399:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega48A__) \
2400:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega48PA__) \
2401:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega48P__) \
2402:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega88__) \
2403:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega88A__) \
2404:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega88P__) \
2405:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega88PA__) \
2406:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega168__) \
2407:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega168A__) \
2408:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega168P__) \
2409:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega168PA__) \
2410:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega328__) \
2411:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega328P__) \
2412:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny828__)
2413:/usr/avr/include/avr/power.h **** 
2414:/usr/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
2415:/usr/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
2416:/usr/avr/include/avr/power.h **** 
2417:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
2418:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
2419:/usr/avr/include/avr/power.h **** 
2420:/usr/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR &= (uint8_t)~(1 << PRUSART0))
2421:/usr/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR |= (uint8_t)(1 << PRUSART0))
2422:/usr/avr/include/avr/power.h **** 
2423:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
2424:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
2425:/usr/avr/include/avr/power.h **** 
2426:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
2427:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
2428:/usr/avr/include/avr/power.h **** 
2429:/usr/avr/include/avr/power.h **** #if !defined(__AVR_ATtiny828__)
2430:/usr/avr/include/avr/power.h **** 
2431:/usr/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR &= (uint8_t)~(1 << PRTIM2))
2432:/usr/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR |= (uint8_t)(1 << PRTIM2))
2433:/usr/avr/include/avr/power.h **** 
2434:/usr/avr/include/avr/power.h **** #endif
2435:/usr/avr/include/avr/power.h **** 
2436:/usr/avr/include/avr/power.h **** #define power_twi_enable()      (PRR &= (uint8_t)~(1 << PRTWI))
2437:/usr/avr/include/avr/power.h **** #define power_twi_disable()     (PRR |= (uint8_t)(1 << PRTWI))
2438:/usr/avr/include/avr/power.h **** 
2439:/usr/avr/include/avr/power.h **** #if defined(__AVR_ATtiny828__)
2440:/usr/avr/include/avr/power.h **** 
2441:/usr/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|
2442:/usr/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|(
2443:/usr/avr/include/avr/power.h **** 
2444:/usr/avr/include/avr/power.h **** #else
2445:/usr/avr/include/avr/power.h **** 
2446:/usr/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|
2447:/usr/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|(
2448:/usr/avr/include/avr/power.h **** 
2449:/usr/avr/include/avr/power.h **** #endif
2450:/usr/avr/include/avr/power.h **** 
2451:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATtiny48__) \
2452:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny88__)
2453:/usr/avr/include/avr/power.h **** 
2454:/usr/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
2455:/usr/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
2456:/usr/avr/include/avr/power.h **** 
2457:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
2458:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
2459:/usr/avr/include/avr/power.h **** 
2460:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
2461:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
2462:/usr/avr/include/avr/power.h **** 
2463:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
2464:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
2465:/usr/avr/include/avr/power.h **** 
2466:/usr/avr/include/avr/power.h **** #define power_twi_enable()      (PRR &= (uint8_t)~(1 << PRTWI))
2467:/usr/avr/include/avr/power.h **** #define power_twi_disable()     (PRR |= (uint8_t)(1 << PRTWI))
2468:/usr/avr/include/avr/power.h **** 
2469:/usr/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)|(1
2470:/usr/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<
2471:/usr/avr/include/avr/power.h **** 
2472:/usr/avr/include/avr/power.h ****   
2473:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATtiny24__) \
2474:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny24A__) \
2475:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny44__) \
2476:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny44A__) \
2477:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny84__) \
2478:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny84A__) \
2479:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny25__) \
2480:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny45__) \
2481:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny85__) \
2482:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny261__) \
2483:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny261A__) \
2484:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny461__) \
2485:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny461A__) \
2486:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny861__) \
2487:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny861A__) \
2488:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny43U__)
2489:/usr/avr/include/avr/power.h **** 
2490:/usr/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
2491:/usr/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
2492:/usr/avr/include/avr/power.h **** 
2493:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
2494:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
2495:/usr/avr/include/avr/power.h **** 
2496:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
2497:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
2498:/usr/avr/include/avr/power.h **** 
2499:/usr/avr/include/avr/power.h **** /* Universal Serial Interface */
2500:/usr/avr/include/avr/power.h **** #define power_usi_enable()      (PRR &= (uint8_t)~(1 << PRUSI))
2501:/usr/avr/include/avr/power.h **** #define power_usi_disable()     (PRR |= (uint8_t)(1 << PRUSI))
2502:/usr/avr/include/avr/power.h **** 
2503:/usr/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRUSI)))
2504:/usr/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRUSI)))
2505:/usr/avr/include/avr/power.h **** 
2506:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATmega1284__)
2507:/usr/avr/include/avr/power.h **** 
2508:/usr/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
2509:/usr/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
2510:/usr/avr/include/avr/power.h **** 
2511:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
2512:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
2513:/usr/avr/include/avr/power.h **** 
2514:/usr/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
2515:/usr/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
2516:/usr/avr/include/avr/power.h **** 
2517:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
2518:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
2519:/usr/avr/include/avr/power.h **** 
2520:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
2521:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
2522:/usr/avr/include/avr/power.h **** 
2523:/usr/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
2524:/usr/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
2525:/usr/avr/include/avr/power.h **** 
2526:/usr/avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
2527:/usr/avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
2528:/usr/avr/include/avr/power.h **** 
2529:/usr/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
2530:/usr/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
2531:/usr/avr/include/avr/power.h **** 
2532:/usr/avr/include/avr/power.h **** #define power_all_enable() \
2533:/usr/avr/include/avr/power.h **** do{ \
2534:/usr/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRU
2535:/usr/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~(1<<PRTIM3); \
2536:/usr/avr/include/avr/power.h **** }while(0)
2537:/usr/avr/include/avr/power.h **** 
2538:/usr/avr/include/avr/power.h **** #define power_all_disable() \
2539:/usr/avr/include/avr/power.h **** do{ \
2540:/usr/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRUS
2541:/usr/avr/include/avr/power.h ****     PRR1 |= (uint8_t)(1<<PRTIM3); \
2542:/usr/avr/include/avr/power.h **** }while(0)
2543:/usr/avr/include/avr/power.h **** 
2544:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATmega1284P__)
2545:/usr/avr/include/avr/power.h **** 
2546:/usr/avr/include/avr/power.h **** 
2547:/usr/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
2548:/usr/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
2549:/usr/avr/include/avr/power.h **** 
2550:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
2551:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
2552:/usr/avr/include/avr/power.h **** 
2553:/usr/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
2554:/usr/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
2555:/usr/avr/include/avr/power.h **** 
2556:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
2557:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
2558:/usr/avr/include/avr/power.h **** 
2559:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
2560:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
2561:/usr/avr/include/avr/power.h **** 
2562:/usr/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
2563:/usr/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
2564:/usr/avr/include/avr/power.h **** 
2565:/usr/avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
2566:/usr/avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
2567:/usr/avr/include/avr/power.h **** 
2568:/usr/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
2569:/usr/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
2570:/usr/avr/include/avr/power.h **** 
2571:/usr/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART1))
2572:/usr/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR0 |= (uint8_t)(1 << PRUSART1))
2573:/usr/avr/include/avr/power.h **** 
2574:/usr/avr/include/avr/power.h **** #define power_all_enable() \
2575:/usr/avr/include/avr/power.h **** do{ \
2576:/usr/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRU
2577:/usr/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~(1<<PRTIM3); \
2578:/usr/avr/include/avr/power.h **** }while(0)
2579:/usr/avr/include/avr/power.h **** 
2580:/usr/avr/include/avr/power.h **** #define power_all_disable() \
2581:/usr/avr/include/avr/power.h **** do{ \
2582:/usr/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRUS
2583:/usr/avr/include/avr/power.h ****     PRR1 |= (uint8_t)(1<<PRTIM3); \
2584:/usr/avr/include/avr/power.h **** }while(0)
2585:/usr/avr/include/avr/power.h **** 
2586:/usr/avr/include/avr/power.h **** 
2587:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATmega32HVB__) \
2588:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega32HVBREVB__) \
2589:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega16HVB__) \
2590:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega16HVBREVB__)
2591:/usr/avr/include/avr/power.h **** 
2592:/usr/avr/include/avr/power.h **** 
2593:/usr/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
2594:/usr/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
2595:/usr/avr/include/avr/power.h **** 
2596:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
2597:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
2598:/usr/avr/include/avr/power.h **** 
2599:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
2600:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
2601:/usr/avr/include/avr/power.h **** 
2602:/usr/avr/include/avr/power.h **** /* Voltage ADC */
2603:/usr/avr/include/avr/power.h **** #define power_vadc_enable()     (PRR0 &= (uint8_t)~(1 << PRVADC))
2604:/usr/avr/include/avr/power.h **** #define power_vadc_disable()    (PRR0 |= (uint8_t)(1 << PRVADC))
2605:/usr/avr/include/avr/power.h **** 
2606:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
2607:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
2608:/usr/avr/include/avr/power.h **** 
2609:/usr/avr/include/avr/power.h **** #define power_vrm_enable()      (PRR0 &= (uint8_t)~(1 << PRVRM))
2610:/usr/avr/include/avr/power.h **** #define power_vrm_disable()     (PRR0 |= (uint8_t)(1 << PRVRM))
2611:/usr/avr/include/avr/power.h **** 
2612:/usr/avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC)|
2613:/usr/avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC)|(
2614:/usr/avr/include/avr/power.h **** 
2615:/usr/avr/include/avr/power.h **** 
2616:/usr/avr/include/avr/power.h **** #elif defined (__AVR_ATA5790__) \
2617:/usr/avr/include/avr/power.h **** || defined (__AVR_ATA5790N__) \
2618:/usr/avr/include/avr/power.h **** || defined (__AVR_ATA5795__)
2619:/usr/avr/include/avr/power.h **** 
2620:/usr/avr/include/avr/power.h **** // Enable the voltage monitor 
2621:/usr/avr/include/avr/power.h **** #define power_vmonitor_enable()          (PRR0 &= (uint8_t)~(1 << PRVM))
2622:/usr/avr/include/avr/power.h **** #define power_vmonitor_disable()         (PRR0 |= (uint8_t)(1 << PRVM))
2623:/usr/avr/include/avr/power.h **** 
2624:/usr/avr/include/avr/power.h **** #define power_irdriver_enable()          (PRR0 &= (uint8_t)~(1 << PRDS))
2625:/usr/avr/include/avr/power.h **** #define power_irdriver_disable()         (PRR0 |= (uint8_t)(1 << PRDS))
2626:/usr/avr/include/avr/power.h **** 
2627:/usr/avr/include/avr/power.h **** #define power_crypto_enable()            (PRR0 &= (uint8_t)~(1 << PRCU))
2628:/usr/avr/include/avr/power.h **** #define power_crypto_disable()           (PRR0 |= (uint8_t)(1 << PRCU))
2629:/usr/avr/include/avr/power.h **** 
2630:/usr/avr/include/avr/power.h **** #define power_timermodulator_enable()    (PRR0 &= (uint8_t)~(1 << PRTM))
2631:/usr/avr/include/avr/power.h **** #define power_timermodulator_disable()   (PRR0 |= (uint8_t)(1 << PRTM))
2632:/usr/avr/include/avr/power.h **** 
2633:/usr/avr/include/avr/power.h **** #define power_timer1_enable()            (PRR0 &= (uint8_t)~(1 << PRT1))
2634:/usr/avr/include/avr/power.h **** #define power_timer1_disable()           (PRR0 |= (uint8_t)(1 << PRT1))
2635:/usr/avr/include/avr/power.h **** 
2636:/usr/avr/include/avr/power.h **** #define power_timer2_enable()            (PRR0 &= (uint8_t)~(1 << PRT2))
2637:/usr/avr/include/avr/power.h **** #define power_timer2_disable()           (PRR0 |= (uint8_t)(1 << PRT2))
2638:/usr/avr/include/avr/power.h **** 
2639:/usr/avr/include/avr/power.h **** #define power_timer3_enable()            (PRR0 &= (uint8_t)~(1 << PRT3))
2640:/usr/avr/include/avr/power.h **** #define power_timer3_disable()           (PRR0 |= (uint8_t)(1 << PRT3))
2641:/usr/avr/include/avr/power.h **** 
2642:/usr/avr/include/avr/power.h **** #define power_spi_enable()               (PRR1 &= (uint8_t)~(1 << PRSPI))
2643:/usr/avr/include/avr/power.h **** #define power_spi_disable()              (PRR1 |= (uint8_t)(1 << PRSPI))
2644:/usr/avr/include/avr/power.h **** 
2645:/usr/avr/include/avr/power.h **** #define power_cinterface_enable()        (PRR1 &= (uint8_t)~(1 << PRCI))
2646:/usr/avr/include/avr/power.h **** #define power_cinterface_disable()       (PRR1 |= (uint8_t)(1 << PRCI))
2647:/usr/avr/include/avr/power.h **** 
2648:/usr/avr/include/avr/power.h **** #if defined(__AVR_ATA5790__) \
2649:/usr/avr/include/avr/power.h **** || defined(__AVR_ATA5790N__)
2650:/usr/avr/include/avr/power.h **** 
2651:/usr/avr/include/avr/power.h **** #define power_lfreceiver_enable()        (PRR0 &= (uint8_t)~(1 << PRLFR))            
2652:/usr/avr/include/avr/power.h **** #define power_lfreceiver_disable()       (PRR0 |= (uint8_t)(1 << PRLFR))            
2653:/usr/avr/include/avr/power.h **** 
2654:/usr/avr/include/avr/power.h **** #define power_all_enable() \
2655:/usr/avr/include/avr/power.h **** do{ \
2656:/usr/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRVM)|(1<<PRDS)|(1<<PRCU)|(1<<PRTM)|(1<<PRT3)|(1<<PRT2)|(1<<PRT1)|(1<<PR
2657:/usr/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRSPI)|(1<<PRCI)); \
2658:/usr/avr/include/avr/power.h **** }while(0)
2659:/usr/avr/include/avr/power.h **** 
2660:/usr/avr/include/avr/power.h **** #define power_all_disable() \
2661:/usr/avr/include/avr/power.h **** do{ \
2662:/usr/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRVM)|(1<<PRDS)|(1<<PRCU)|(1<<PRTM)|(1<<PRT3)|(1<<PRT2)|(1<<PRT1)|(1<<PRL
2663:/usr/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRSPI)|(1<<PRCI)); \
2664:/usr/avr/include/avr/power.h **** }while(0)
2665:/usr/avr/include/avr/power.h **** 
2666:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATA5795__)
2667:/usr/avr/include/avr/power.h **** 
2668:/usr/avr/include/avr/power.h **** #define power_all_enable() \
2669:/usr/avr/include/avr/power.h **** do{ \
2670:/usr/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRVM)|(1<<PRDS)|(1<<PRCU)|(1<<PRTM)|(1<<PRT3)|(1<<PRT2)|(1<<PRT1)); \
2671:/usr/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRSPI)|(1<<PRCI)); \
2672:/usr/avr/include/avr/power.h **** }while(0)
2673:/usr/avr/include/avr/power.h **** 
2674:/usr/avr/include/avr/power.h **** #define power_all_disable() \
2675:/usr/avr/include/avr/power.h **** do{ \
2676:/usr/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRVM)|(1<<PRDS)|(1<<PRCU)|(1<<PRTM)|(1<<PRT3)|(1<<PRT2)|(1<<PRT1)); \
2677:/usr/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRSPI)|(1<<PRCI)); \
2678:/usr/avr/include/avr/power.h **** }while(0)
2679:/usr/avr/include/avr/power.h **** 
2680:/usr/avr/include/avr/power.h **** #endif
2681:/usr/avr/include/avr/power.h **** 
2682:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATmega64HVE__) \
2683:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega64HVE2__) 
2684:/usr/avr/include/avr/power.h **** 
2685:/usr/avr/include/avr/power.h **** #define power_lin_enable()      (PRR0 &= (uint8_t)~(1 << PRLIN))
2686:/usr/avr/include/avr/power.h **** #define power_lin_disable()     (PRR0 |= (uint8_t)(1 << PRLIN))
2687:/usr/avr/include/avr/power.h **** 
2688:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
2689:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
2690:/usr/avr/include/avr/power.h **** 
2691:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
2692:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
2693:/usr/avr/include/avr/power.h **** 
2694:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
2695:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
2696:/usr/avr/include/avr/power.h **** 
2697:/usr/avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRLIN)|(1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)))
2698:/usr/avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRLIN)|(1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)))
2699:/usr/avr/include/avr/power.h **** 
2700:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATA5831__)
2701:/usr/avr/include/avr/power.h **** 
2702:/usr/avr/include/avr/power.h **** #define power_clock_output_enable()     (PRR0 &= (uint8_t)~(1 << PRCO))
2703:/usr/avr/include/avr/power.h **** #define power_clock_output_disable()    (PRR0 |= (uint8_t)(1 << PRCO))
2704:/usr/avr/include/avr/power.h **** 
2705:/usr/avr/include/avr/power.h **** #define power_voltage_monitor_enable()  (PRR0 &= (uint8_t)~(1 << PRVM))
2706:/usr/avr/include/avr/power.h **** #define power_voltage_monitor_disable() (PRR0 |= (uint8_t)(1 << PRVM))
2707:/usr/avr/include/avr/power.h **** 
2708:/usr/avr/include/avr/power.h **** #define power_crc_enable()              (PRR0 &= (uint8_t)~(1 << PRCRC))
2709:/usr/avr/include/avr/power.h **** #define power_crc_disable()             (PRR0 |= (uint8_t)(1 << PRCRC))
2710:/usr/avr/include/avr/power.h **** 
2711:/usr/avr/include/avr/power.h **** #define power_transmit_dsp_control_enable()     (PRR0 &= (uint8_t)~(1 << PRTXDC))
2712:/usr/avr/include/avr/power.h **** #define power_transmit_dsp_control_disable()    (PRR0 |= (uint8_t)(1 << PRTXDC))
2713:/usr/avr/include/avr/power.h **** 
2714:/usr/avr/include/avr/power.h **** #define power_receive_dsp_control_enable()      (PRR0 &= (uint8_t)~(1 << PRRXDC))
2715:/usr/avr/include/avr/power.h **** #define power_receive_dsp_control_disable()     (PRR0 |= (uint8_t)(1 << PRRXDC))
2716:/usr/avr/include/avr/power.h **** 
2717:/usr/avr/include/avr/power.h **** #define power_spi_enable()              (PRR0 &= (uint8_t)~(1 << PRSPI))
2718:/usr/avr/include/avr/power.h **** #define power_spi_disable()             (PRR0 |= (uint8_t)(1 << PRSPI))
2719:/usr/avr/include/avr/power.h **** 
2720:/usr/avr/include/avr/power.h **** #define power_timer1_enable()           (PRR1 &= (uint8_t)~(1 << PRT1))
2721:/usr/avr/include/avr/power.h **** #define power_timer1_disable()          (PRR1 |= (uint8_t)(1 << PRT1))
2722:/usr/avr/include/avr/power.h **** 
2723:/usr/avr/include/avr/power.h **** #define power_timer2_enable()           (PRR1 &= (uint8_t)~(1 << PRT2))
2724:/usr/avr/include/avr/power.h **** #define power_timer2_disable()          (PRR1 |= (uint8_t)(1 << PRT2))
2725:/usr/avr/include/avr/power.h **** 
2726:/usr/avr/include/avr/power.h **** #define power_timer3_enable()           (PRR1 &= (uint8_t)~(1 << PRT3))
2727:/usr/avr/include/avr/power.h **** #define power_timer3_disable()          (PRR1 |= (uint8_t)(1 << PRT3))
2728:/usr/avr/include/avr/power.h **** 
2729:/usr/avr/include/avr/power.h **** #define power_timer4_enable()           (PRR1 &= (uint8_t)~(1 << PRT4))
2730:/usr/avr/include/avr/power.h **** #define power_timer4_disable()          (PRR1 |= (uint8_t)(1 << PRT4))
2731:/usr/avr/include/avr/power.h **** 
2732:/usr/avr/include/avr/power.h **** #define power_timer5_enable()           (PRR1 &= (uint8_t)~(1 << PRT5))
2733:/usr/avr/include/avr/power.h **** #define power_timer5_disable()          (PRR1 |= (uint8_t)(1 << PRT5))
2734:/usr/avr/include/avr/power.h **** 
2735:/usr/avr/include/avr/power.h **** #define power_sequencer_state_machine_enable()  (PRR2 &= (uint8_t)~(1 << PRSSM))
2736:/usr/avr/include/avr/power.h **** #define power_sequencer_state_machine_disable() (PRR2 |= (uint8_t)(1 << PRSSM))
2737:/usr/avr/include/avr/power.h **** 
2738:/usr/avr/include/avr/power.h **** #define power_tx_modulator_enable()     (PRR2 &= (uint8_t)~(1 << PRTM))
2739:/usr/avr/include/avr/power.h **** #define power_tx_modulator_disable()    (PRR2 |= (uint8_t)(1 << PRTM))
2740:/usr/avr/include/avr/power.h **** 
2741:/usr/avr/include/avr/power.h **** #define power_rssi_buffer_enable()      (PRR2 &= (uint8_t)~(1 << PRRS))
2742:/usr/avr/include/avr/power.h **** #define power_rssi_buffer_disable()     (PRR2 |= (uint8_t)(1 << PRRS))
2743:/usr/avr/include/avr/power.h **** 
2744:/usr/avr/include/avr/power.h **** #define power_id_scan_enable()          (PRR2 &= (uint8_t)~(1 << PRIDS))
2745:/usr/avr/include/avr/power.h **** #define power_id_scan_disable()         (PRR2 |= (uint8_t)(1 << PRIDS))
2746:/usr/avr/include/avr/power.h **** 
2747:/usr/avr/include/avr/power.h **** #define power_data_fifo_enable()        (PRR2 &= (uint8_t)~(1 << PRDF))
2748:/usr/avr/include/avr/power.h **** #define power_data_fifo_disable()       (PRR2 |= (uint8_t)(1 << PRDF))
2749:/usr/avr/include/avr/power.h **** 
2750:/usr/avr/include/avr/power.h **** #define power_preamble_rssi_fifo_enable()       (PRR2 &= (uint8_t)~(1 << PRSF))
2751:/usr/avr/include/avr/power.h **** #define power_preamble_rssi_fifo_disable()      (PRR2 |= (uint8_t)(1 << PRSF))
2752:/usr/avr/include/avr/power.h **** 
2753:/usr/avr/include/avr/power.h **** #define power_rx_buffer_A_enable()      (PRR2 &= (uint8_t)~(1 << PRXA))
2754:/usr/avr/include/avr/power.h **** #define power_rx_buffer_A_disable()     (PRR2 |= (uint8_t)(1 << PRXA))
2755:/usr/avr/include/avr/power.h **** 
2756:/usr/avr/include/avr/power.h **** #define power_rx_buffer_B_enable()      (PRR2 &= (uint8_t)~(1 << PRXB))
2757:/usr/avr/include/avr/power.h **** #define power_rx_buffer_B_disable()     (PRR2 |= (uint8_t)(1 << PRXB))
2758:/usr/avr/include/avr/power.h **** 
2759:/usr/avr/include/avr/power.h **** #define power_all_enable() \
2760:/usr/avr/include/avr/power.h **** do{ \
2761:/usr/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1 << PRCO) | (1 << PRVM) | (1 << PRCRC) | (1 << PRTXDC) | (1 << PRRXDC) | (
2762:/usr/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1 << PRT1) | (1 << PRT2) | (1 << PRT3) | (1 << PRT4) | (1 << PRT5)); \
2763:/usr/avr/include/avr/power.h ****     PRR2 &= (uint8_t)~((1 << PRSSM) | (1 << PRTM) | (1 << PRRS) | (1 << PRIDS) | (1 << PRDF) | (1 <
2764:/usr/avr/include/avr/power.h **** }while(0)
2765:/usr/avr/include/avr/power.h **** 
2766:/usr/avr/include/avr/power.h **** #define power_all_disable() \
2767:/usr/avr/include/avr/power.h **** do{ \
2768:/usr/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1 << PRCO) | (1 << PRVM) | (1 << PRCRC) | (1 << PRTXDC) | (1 << PRRXDC) | (1
2769:/usr/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1 << PRT1) | (1 << PRT2) | (1 << PRT3) | (1 << PRT4) | (1 << PRT5)); \
2770:/usr/avr/include/avr/power.h ****     PRR2 |= (uint8_t)((1 << PRSSM) | (1 << PRTM) | (1 << PRRS) | (1 << PRIDS) | (1 << PRDF) | (1 <<
2771:/usr/avr/include/avr/power.h **** }while(0)
2772:/usr/avr/include/avr/power.h **** 
2773:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATmega16M1__) \
2774:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega32C1__) \
2775:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega32M1__) \
2776:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega64C1__) \
2777:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega64M1__)
2778:/usr/avr/include/avr/power.h **** 
2779:/usr/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
2780:/usr/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
2781:/usr/avr/include/avr/power.h **** 
2782:/usr/avr/include/avr/power.h **** #define power_lin_enable()      (PRR &= (uint8_t)~(1 << PRLIN))
2783:/usr/avr/include/avr/power.h **** #define power_lin_disable()     (PRR |= (uint8_t)(1 << PRLIN))
2784:/usr/avr/include/avr/power.h **** 
2785:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
2786:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
2787:/usr/avr/include/avr/power.h **** 
2788:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
2789:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
2790:/usr/avr/include/avr/power.h **** 
2791:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
2792:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
2793:/usr/avr/include/avr/power.h **** 
2794:/usr/avr/include/avr/power.h **** #define power_psc_enable()      (PRR &= (uint8_t)~(1 << PRPSC))
2795:/usr/avr/include/avr/power.h **** #define power_psc_disable()     (PRR |= (uint8_t)(1 << PRPSC))
2796:/usr/avr/include/avr/power.h **** 
2797:/usr/avr/include/avr/power.h **** #define power_can_enable()      (PRR &= (uint8_t)~(1 << PRCAN))
2798:/usr/avr/include/avr/power.h **** #define power_can_disable()     (PRR |= (uint8_t)(1 << PRCAN))
2799:/usr/avr/include/avr/power.h **** 
2800:/usr/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRLIN)|(1<<PRSPI)|(1<<PRTIM0)|(1<
2801:/usr/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRLIN)|(1<<PRSPI)|(1<<PRTIM0)|(1<<
2802:/usr/avr/include/avr/power.h **** 
2803:/usr/avr/include/avr/power.h **** 
2804:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATtiny167__) \
2805:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny87__) \
2806:/usr/avr/include/avr/power.h **** || defined(__AVR_ATA5505__) \
2807:/usr/avr/include/avr/power.h **** || defined(__AVR_ATA5272__)
2808:/usr/avr/include/avr/power.h **** 
2809:/usr/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
2810:/usr/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
2811:/usr/avr/include/avr/power.h **** 
2812:/usr/avr/include/avr/power.h **** #define power_usi_enable()      (PRR &= (uint8_t)~(1 << PRUSI))
2813:/usr/avr/include/avr/power.h **** #define power_usi_disable()     (PRR |= (uint8_t)(1 << PRUSI))
2814:/usr/avr/include/avr/power.h **** 
2815:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
2816:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
2817:/usr/avr/include/avr/power.h **** 
2818:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
2819:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
2820:/usr/avr/include/avr/power.h **** 
2821:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
2822:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
2823:/usr/avr/include/avr/power.h **** 
2824:/usr/avr/include/avr/power.h **** #define power_lin_enable()      (PRR &= (uint8_t)~(1 << PRLIN))
2825:/usr/avr/include/avr/power.h **** #define power_lin_disable()     (PRR |= (uint8_t)(1 << PRLIN))
2826:/usr/avr/include/avr/power.h **** 
2827:/usr/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRUSI)|(1<<PRTIM0)|(1<<PRTIM1)|(1
2828:/usr/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRUSI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<
2829:/usr/avr/include/avr/power.h **** 
2830:/usr/avr/include/avr/power.h **** 
2831:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATtiny1634__)
2832:/usr/avr/include/avr/power.h **** 
2833:/usr/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
2834:/usr/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
2835:/usr/avr/include/avr/power.h **** 
2836:/usr/avr/include/avr/power.h **** #define power_usart0_enable()      (PRR &= (uint8_t)~(1 << PRUSART0))
2837:/usr/avr/include/avr/power.h **** #define power_usart0_disable()     (PRR |= (uint8_t)(1 << PRUSART0))
2838:/usr/avr/include/avr/power.h **** 
2839:/usr/avr/include/avr/power.h **** #define power_usart1_enable()      (PRR &= (uint8_t)~(1 << PRUSART1))
2840:/usr/avr/include/avr/power.h **** #define power_usart1_disable()     (PRR |= (uint8_t)(1 << PRUSART1))
2841:/usr/avr/include/avr/power.h **** 
2842:/usr/avr/include/avr/power.h **** #define power_usi_enable()      (PRR &= (uint8_t)~(1 << PRUSI))
2843:/usr/avr/include/avr/power.h **** #define power_usi_disable()     (PRR |= (uint8_t)(1 << PRUSI))
2844:/usr/avr/include/avr/power.h **** 
2845:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
2846:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
2847:/usr/avr/include/avr/power.h **** 
2848:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
2849:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
2850:/usr/avr/include/avr/power.h **** 
2851:/usr/avr/include/avr/power.h **** #define power_twi_enable()      (PRR &= (uint8_t)~(1 << PRTWI))
2852:/usr/avr/include/avr/power.h **** #define power_twi_disable()     (PRR |= (uint8_t)(1 << PRTWI))
2853:/usr/avr/include/avr/power.h **** 
2854:/usr/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1 << PRTWI)|(1 << PRUSI)|(1 << PRTIM0)|(1 << PR
2855:/usr/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1 << PRTWI)|(1 << PRUSI)|(1 << PRTIM0)|(1 << PRT
2856:/usr/avr/include/avr/power.h **** 
2857:/usr/avr/include/avr/power.h **** 
2858:/usr/avr/include/avr/power.h **** #elif defined(__AVR_AT90USB82__) \
2859:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90USB162__) \
2860:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega8U2__) \
2861:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega16U2__) \
2862:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__)
2863:/usr/avr/include/avr/power.h **** 
2864:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
2865:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
2866:/usr/avr/include/avr/power.h **** 
2867:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
2868:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
2869:/usr/avr/include/avr/power.h **** 
2870:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
2871:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
2872:/usr/avr/include/avr/power.h **** 
2873:/usr/avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
2874:/usr/avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
2875:/usr/avr/include/avr/power.h **** 
2876:/usr/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
2877:/usr/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
2878:/usr/avr/include/avr/power.h **** 
2879:/usr/avr/include/avr/power.h **** #define power_all_enable() \
2880:/usr/avr/include/avr/power.h **** do{ \
2881:/usr/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)); \
2882:/usr/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRUSB)|(1<<PRUSART1)); \
2883:/usr/avr/include/avr/power.h **** }while(0)
2884:/usr/avr/include/avr/power.h **** 
2885:/usr/avr/include/avr/power.h **** #define power_all_disable() \
2886:/usr/avr/include/avr/power.h **** do{ \
2887:/usr/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)); \
2888:/usr/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRUSB)|(1<<PRUSART1)); \
2889:/usr/avr/include/avr/power.h **** }while(0)
2890:/usr/avr/include/avr/power.h **** 
2891:/usr/avr/include/avr/power.h **** 
2892:/usr/avr/include/avr/power.h **** #elif defined(__AVR_AT90SCR100__)
2893:/usr/avr/include/avr/power.h **** 
2894:/usr/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
2895:/usr/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
2896:/usr/avr/include/avr/power.h **** 
2897:/usr/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
2898:/usr/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
2899:/usr/avr/include/avr/power.h **** 
2900:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
2901:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
2902:/usr/avr/include/avr/power.h **** 
2903:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
2904:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
2905:/usr/avr/include/avr/power.h **** 
2906:/usr/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
2907:/usr/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
2908:/usr/avr/include/avr/power.h **** 
2909:/usr/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
2910:/usr/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
2911:/usr/avr/include/avr/power.h **** 
2912:/usr/avr/include/avr/power.h **** #define power_usbh_enable()     (PRR1 &= (uint8_t)~(1 << PRUSBH))
2913:/usr/avr/include/avr/power.h **** #define power_usbh_disable()    (PRR1 |= (uint8_t)(1 << PRUSBH))
2914:/usr/avr/include/avr/power.h **** 
2915:/usr/avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
2916:/usr/avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
2917:/usr/avr/include/avr/power.h **** 
2918:/usr/avr/include/avr/power.h **** #define power_hsspi_enable()    (PRR1 &= (uint8_t)~(1 << PRHSSPI))
2919:/usr/avr/include/avr/power.h **** #define power_hsspi_disable()   (PRR1 |= (uint8_t)(1 << PRHSSPI))
2920:/usr/avr/include/avr/power.h **** 
2921:/usr/avr/include/avr/power.h **** #define power_sci_enable()      (PRR1 &= (uint8_t)~(1 << PRSCI))
2922:/usr/avr/include/avr/power.h **** #define power_sci_disable()     (PRR1 |= (uint8_t)(1 << PRSCI))
2923:/usr/avr/include/avr/power.h **** 
2924:/usr/avr/include/avr/power.h **** #define power_aes_enable()      (PRR1 &= (uint8_t)~(1 << PRAES))
2925:/usr/avr/include/avr/power.h **** #define power_aes_disable()     (PRR1 |= (uint8_t)(1 << PRAES))
2926:/usr/avr/include/avr/power.h **** 
2927:/usr/avr/include/avr/power.h **** #define power_kb_enable()       (PRR1 &= (uint8_t)~(1 << PRKB))
2928:/usr/avr/include/avr/power.h **** #define power_kb_disable()      (PRR1 |= (uint8_t)(1 << PRKB))
2929:/usr/avr/include/avr/power.h **** 
2930:/usr/avr/include/avr/power.h **** #define power_all_enable() \
2931:/usr/avr/include/avr/power.h **** do{ \
2932:/usr/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRUSART0)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRTIM0)|(1<<PRTIM2)|(1<<PRTWI)); \
2933:/usr/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRUSBH)|(1<<PRUSB)|(1<<PRHSSPI)|(1<<PRSCI)|(1<<PRAES)|(1<<PRKB)); \
2934:/usr/avr/include/avr/power.h **** }while(0)
2935:/usr/avr/include/avr/power.h **** 
2936:/usr/avr/include/avr/power.h **** #define power_all_disable() \
2937:/usr/avr/include/avr/power.h **** do{ \
2938:/usr/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRUSART0)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRTIM0)|(1<<PRTIM2)|(1<<PRTWI)); \
2939:/usr/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRUSBH)|(1<<PRUSB)|(1<<PRHSSPI)|(1<<PRSCI)|(1<<PRAES)|(1<<PRKB)); \
2940:/usr/avr/include/avr/power.h **** }while(0)
2941:/usr/avr/include/avr/power.h **** 
2942:/usr/avr/include/avr/power.h **** 
2943:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATtiny4__) \
2944:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny5__) \
2945:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny9__) \
2946:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny10__) \
2947:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny13A__) \
2948:/usr/avr/include/avr/power.h **** 
2949:/usr/avr/include/avr/power.h **** #define power_adc_enable()   (PRR &= (uint8_t)~(1 << PRADC))
2950:/usr/avr/include/avr/power.h **** #define power_adc_disable()  (PRR |= (uint8_t)(1 << PRADC))
2951:/usr/avr/include/avr/power.h **** 
2952:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
2953:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
2954:/usr/avr/include/avr/power.h **** 
2955:/usr/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRTIM0)))
2956:/usr/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRTIM0)))
2957:/usr/avr/include/avr/power.h **** 
2958:/usr/avr/include/avr/power.h **** 
2959:/usr/avr/include/avr/power.h **** #elif defined(__AVR_ATtiny20__) \
2960:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny40__)
2961:/usr/avr/include/avr/power.h **** 
2962:/usr/avr/include/avr/power.h **** #define power_adc_enable()   (PRR &= (uint8_t)~(1 << PRADC))
2963:/usr/avr/include/avr/power.h **** #define power_adc_disable()  (PRR |= (uint8_t)(1 << PRADC))
2964:/usr/avr/include/avr/power.h **** 
2965:/usr/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
2966:/usr/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
2967:/usr/avr/include/avr/power.h **** 
2968:/usr/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
2969:/usr/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
2970:/usr/avr/include/avr/power.h **** 
2971:/usr/avr/include/avr/power.h **** #define power_spi_enable()   (PRR &= (uint8_t)~(1 << PRSPI))
2972:/usr/avr/include/avr/power.h **** #define power_spi_disable()  (PRR |= (uint8_t)(1 << PRSPI))
2973:/usr/avr/include/avr/power.h **** 
2974:/usr/avr/include/avr/power.h **** #define power_twi_enable()   (PRR &= (uint8_t)~(1 << PRTWI))
2975:/usr/avr/include/avr/power.h **** #define power_twi_disable()  (PRR |= (uint8_t)(1 << PRTWI))
2976:/usr/avr/include/avr/power.h **** 
2977:/usr/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRSPI)|(1
2978:/usr/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRSPI)|(1<
2979:/usr/avr/include/avr/power.h **** 
2980:/usr/avr/include/avr/power.h **** #endif
2981:/usr/avr/include/avr/power.h **** 
2982:/usr/avr/include/avr/power.h **** 
2983:/usr/avr/include/avr/power.h **** #if defined(__AVR_AT90CAN32__) \
2984:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90CAN64__) \
2985:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90CAN128__) \
2986:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90PWM1__) \
2987:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90PWM2__) \
2988:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90PWM2B__) \
2989:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90PWM3__) \
2990:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90PWM3B__) \
2991:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90PWM81__) \
2992:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90PWM161__) \
2993:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90PWM216__) \
2994:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90PWM316__) \
2995:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90SCR100__) \
2996:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90USB646__) \
2997:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90USB647__) \
2998:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90USB82__) \
2999:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90USB1286__) \
3000:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90USB1287__) \
3001:/usr/avr/include/avr/power.h **** || defined(__AVR_AT90USB162__) \
3002:/usr/avr/include/avr/power.h **** || defined(__AVR_ATA5505__) \
3003:/usr/avr/include/avr/power.h **** || defined(__AVR_ATA5272__) \
3004:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega1280__) \
3005:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega1281__) \
3006:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega1284__) \
3007:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega128RFA1__) \
3008:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega128RFR2__) \
3009:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega1284RFR2__) \
3010:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega1284P__) \
3011:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega162__) \
3012:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega164A__) \
3013:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega164P__) \
3014:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega164PA__) \
3015:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega165__) \
3016:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega165A__) \
3017:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega165P__) \
3018:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega165PA__) \
3019:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega168__) \
3020:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega168A__) \
3021:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega168P__) \
3022:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega168PA__) \
3023:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega169__) \
3024:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega169A__) \
3025:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega169P__) \
3026:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega169PA__) \
3027:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega16M1__) \
3028:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega16U2__) \
3029:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega324PA__) \
3030:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega16U4__) \
3031:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega2560__) \
3032:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega2561__) \
3033:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega256RFR2__) \
3034:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega2564RFR2__) \
3035:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega324A__) \
3036:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega324P__) \
3037:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega325__) \
3038:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega325A__) \
3039:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega325P__) \
3040:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega325PA__) \
3041:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega3250__) \
3042:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega3250A__) \
3043:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega3250P__) \
3044:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega3250PA__) \
3045:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega328__) \
3046:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega328P__) \
3047:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega329__) \
3048:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega329A__) \
3049:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega329P__) \
3050:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega329PA__) \
3051:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega3290__) \
3052:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega3290A__) \
3053:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega3290P__) \
3054:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega3290PA__) \
3055:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega32C1__) \
3056:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega32M1__) \
3057:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__) \
3058:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega32U4__) \
3059:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega32U6__) \
3060:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega48__) \
3061:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega48A__) \
3062:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega48PA__) \
3063:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega48P__) \
3064:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega640__) \
3065:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega649P__) \
3066:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega644__) \
3067:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega644A__) \
3068:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega644P__) \
3069:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega644PA__) \
3070:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega645__) \
3071:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega645A__) \
3072:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega645P__) \
3073:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega6450__) \
3074:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega6450A__) \
3075:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega6450P__) \
3076:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega649__) \
3077:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega649A__) \
3078:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega64M1__) \
3079:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega64C1__) \
3080:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega88A__) \
3081:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega88PA__) \
3082:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega6490__) \
3083:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega6490A__) \
3084:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega6490P__) \
3085:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega64RFR2__) \
3086:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega644RFR2__) \
3087:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega88__) \
3088:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega88P__) \
3089:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega8U2__) \
3090:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega16U2__) \
3091:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__) \
3092:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny48__) \
3093:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny88__) \
3094:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny87__) \
3095:/usr/avr/include/avr/power.h **** || defined(__AVR_ATtiny167__) \
3096:/usr/avr/include/avr/power.h **** || defined(__DOXYGEN__)
3097:/usr/avr/include/avr/power.h **** 
3098:/usr/avr/include/avr/power.h **** 
3099:/usr/avr/include/avr/power.h **** /** \addtogroup avr_power
3100:/usr/avr/include/avr/power.h **** 
3101:/usr/avr/include/avr/power.h **** Some of the newer AVRs contain a System Clock Prescale Register (CLKPR) that
3102:/usr/avr/include/avr/power.h **** allows you to decrease the system clock frequency and the power consumption
3103:/usr/avr/include/avr/power.h **** when the need for processing power is low. Below are two macros and an
3104:/usr/avr/include/avr/power.h **** enumerated type that can be used to interface to the Clock Prescale Register.
3105:/usr/avr/include/avr/power.h **** 
3106:/usr/avr/include/avr/power.h **** \note Not all AVR devices have a Clock Prescale Register. On those devices
3107:/usr/avr/include/avr/power.h **** without a Clock Prescale Register, these macros are not available.
3108:/usr/avr/include/avr/power.h **** */
3109:/usr/avr/include/avr/power.h **** 
3110:/usr/avr/include/avr/power.h **** 
3111:/usr/avr/include/avr/power.h **** /** \addtogroup avr_power
3112:/usr/avr/include/avr/power.h **** \code 
3113:/usr/avr/include/avr/power.h **** typedef enum
3114:/usr/avr/include/avr/power.h **** {
3115:/usr/avr/include/avr/power.h ****     clock_div_1 = 0,
3116:/usr/avr/include/avr/power.h ****     clock_div_2 = 1,
3117:/usr/avr/include/avr/power.h ****     clock_div_4 = 2,
3118:/usr/avr/include/avr/power.h ****     clock_div_8 = 3,
3119:/usr/avr/include/avr/power.h ****     clock_div_16 = 4,
3120:/usr/avr/include/avr/power.h ****     clock_div_32 = 5,
3121:/usr/avr/include/avr/power.h ****     clock_div_64 = 6,
3122:/usr/avr/include/avr/power.h ****     clock_div_128 = 7,
3123:/usr/avr/include/avr/power.h ****     clock_div_256 = 8,
3124:/usr/avr/include/avr/power.h ****     clock_div_1_rc = 15, // ATmega128RFA1 only
3125:/usr/avr/include/avr/power.h **** } clock_div_t;
3126:/usr/avr/include/avr/power.h **** \endcode
3127:/usr/avr/include/avr/power.h **** Clock prescaler setting enumerations.
3128:/usr/avr/include/avr/power.h **** 
3129:/usr/avr/include/avr/power.h **** */
3130:/usr/avr/include/avr/power.h **** typedef enum
3131:/usr/avr/include/avr/power.h **** {
3132:/usr/avr/include/avr/power.h ****     clock_div_1 = 0,
3133:/usr/avr/include/avr/power.h ****     clock_div_2 = 1,
3134:/usr/avr/include/avr/power.h ****     clock_div_4 = 2,
3135:/usr/avr/include/avr/power.h ****     clock_div_8 = 3,
3136:/usr/avr/include/avr/power.h ****     clock_div_16 = 4,
3137:/usr/avr/include/avr/power.h ****     clock_div_32 = 5,
3138:/usr/avr/include/avr/power.h ****     clock_div_64 = 6,
3139:/usr/avr/include/avr/power.h ****     clock_div_128 = 7,
3140:/usr/avr/include/avr/power.h ****     clock_div_256 = 8
3141:/usr/avr/include/avr/power.h **** #if defined(__AVR_ATmega128RFA1__) \
3142:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega256RFR2__) \
3143:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega2564RFR2__) \
3144:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega128RFR2__) \
3145:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega1284RFR2__) \
3146:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega64RFR2__) \
3147:/usr/avr/include/avr/power.h **** || defined(__AVR_ATmega644RFR2__)
3148:/usr/avr/include/avr/power.h ****     , clock_div_1_rc = 15
3149:/usr/avr/include/avr/power.h **** #endif
3150:/usr/avr/include/avr/power.h **** } clock_div_t;
3151:/usr/avr/include/avr/power.h **** 
3152:/usr/avr/include/avr/power.h **** 
3153:/usr/avr/include/avr/power.h **** static __inline__ void clock_prescale_set(clock_div_t) __attribute__((__always_inline__));
3154:/usr/avr/include/avr/power.h **** 
3155:/usr/avr/include/avr/power.h **** /** \addtogroup avr_power
3156:/usr/avr/include/avr/power.h **** \code clock_prescale_set(x) \endcode
3157:/usr/avr/include/avr/power.h **** 
3158:/usr/avr/include/avr/power.h **** Set the clock prescaler register select bits, selecting a system clock
3159:/usr/avr/include/avr/power.h **** division setting. This function is inlined, even if compiler
3160:/usr/avr/include/avr/power.h **** optimizations are disabled.
3161:/usr/avr/include/avr/power.h **** 
3162:/usr/avr/include/avr/power.h **** The type of x is clock_div_t.
3163:/usr/avr/include/avr/power.h **** */
3164:/usr/avr/include/avr/power.h **** void clock_prescale_set(clock_div_t __x)
3165:/usr/avr/include/avr/power.h **** {
3166:/usr/avr/include/avr/power.h ****     uint8_t __tmp = _BV(CLKPCE);
3167:/usr/avr/include/avr/power.h ****     __asm__ __volatile__ (
 1381               		.loc 5 3167 0
 1382 0016 90E0      		ldi r25,0
 1383 0018 80E8      		ldi r24,lo8(-128)
 1384               	/* #APP */
 1385               	 ;  3167 "/usr/avr/include/avr/power.h" 1
 1386 001a 0FB6      		in __tmp_reg__,__SREG__
 1387 001c F894      		cli
 1388 001e 8093 6100 		sts 97, r24
 1389 0022 9093 6100 		sts 97, r25
 1390 0026 0FBE      		out __SREG__, __tmp_reg__
 1391               	 ;  0 "" 2
 1392               	/* #NOAPP */
 1393               	.LBE355:
 1394               	.LBE354:
 1395               	.LBE353:
 1396               	.LBE352:
 594:../../tmk_core/protocol/lufa/lufa.c ****     setup_mcu();
 595:../../tmk_core/protocol/lufa/lufa.c ****     keyboard_setup();
 1397               		.loc 1 595 0
 1398 0028 0E94 0000 		call keyboard_setup
 1399               	.LVL112:
 1400               	.LBB356:
 1401               	.LBB357:
 582:../../tmk_core/protocol/lufa/lufa.c **** 
 1402               		.loc 1 582 0
 1403 002c 0E94 0000 		call USB_Disable
 1404               	.LVL113:
 584:../../tmk_core/protocol/lufa/lufa.c **** 
 1405               		.loc 1 584 0
 1406 0030 0E94 0000 		call USB_Init
 1407               	.LVL114:
 1408               	.LBB358:
 1409               	.LBB359:
 1410               	.LBB360:
 1411               		.loc 4 113 0
 1412 0034 8091 E200 		lds r24,226
 1413 0038 8460      		ori r24,lo8(4)
 1414 003a 8093 E200 		sts 226,r24
 1415               	.LBE360:
 1416               	.LBE359:
 1417               	.LBE358:
 588:../../tmk_core/protocol/lufa/lufa.c **** }
 1418               		.loc 1 588 0
 1419 003e 80E0      		ldi r24,lo8(gs(sendchar))
 1420 0040 90E0      		ldi r25,hi8(gs(sendchar))
 1421 0042 0E94 0000 		call print_set_sendchar
 1422               	.LVL115:
 1423               	.LBE357:
 1424               	.LBE356:
 596:../../tmk_core/protocol/lufa/lufa.c ****     setup_usb();
 597:../../tmk_core/protocol/lufa/lufa.c ****     sei();
 1425               		.loc 1 597 0
 1426               	/* #APP */
 1427               	 ;  597 "../../tmk_core/protocol/lufa/lufa.c" 1
 1428 0046 7894      		sei
 1429               	 ;  0 "" 2
 1430               	/* #NOAPP */
 1431               	.L164:
 598:../../tmk_core/protocol/lufa/lufa.c **** 
 599:../../tmk_core/protocol/lufa/lufa.c ****     /* wait for USB startup & debug output */
 600:../../tmk_core/protocol/lufa/lufa.c ****     while (USB_DeviceState != DEVICE_STATE_Configured) {
 1432               		.loc 1 600 0 discriminator 1
 1433 0048 8091 0000 		lds r24,USB_DeviceState
 1434 004c 8430      		cpi r24,lo8(4)
 1435 004e 01F4      		brne .L164
 601:../../tmk_core/protocol/lufa/lufa.c **** #if defined(INTERRUPT_CONTROL_ENDPOINT)
 602:../../tmk_core/protocol/lufa/lufa.c ****         ;
 603:../../tmk_core/protocol/lufa/lufa.c **** #else
 604:../../tmk_core/protocol/lufa/lufa.c ****         USB_USBTask();
 605:../../tmk_core/protocol/lufa/lufa.c **** #endif
 606:../../tmk_core/protocol/lufa/lufa.c ****     }
 607:../../tmk_core/protocol/lufa/lufa.c ****     print("USB configured.\n");
 1436               		.loc 1 607 0
 1437 0050 80E0      		ldi r24,lo8(__c.4792)
 1438 0052 90E0      		ldi r25,hi8(__c.4792)
 1439 0054 0E94 0000 		call xputs
 1440               	.LVL116:
 608:../../tmk_core/protocol/lufa/lufa.c **** 
 609:../../tmk_core/protocol/lufa/lufa.c ****     /* init modules */
 610:../../tmk_core/protocol/lufa/lufa.c ****     keyboard_init();
 1441               		.loc 1 610 0
 1442 0058 0E94 0000 		call keyboard_init
 1443               	.LVL117:
 611:../../tmk_core/protocol/lufa/lufa.c ****     host_set_driver(&lufa_driver);
 1444               		.loc 1 611 0
 1445 005c 80E0      		ldi r24,lo8(lufa_driver)
 1446 005e 90E0      		ldi r25,hi8(lufa_driver)
 1447 0060 0E94 0000 		call host_set_driver
 1448               	.LVL118:
 612:../../tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 613:../../tmk_core/protocol/lufa/lufa.c ****     sleep_led_init();
 614:../../tmk_core/protocol/lufa/lufa.c **** #endif
 615:../../tmk_core/protocol/lufa/lufa.c **** 
 616:../../tmk_core/protocol/lufa/lufa.c ****     print("Keyboard start.\n");
 1449               		.loc 1 616 0
 1450 0064 80E0      		ldi r24,lo8(__c.4794)
 1451 0066 90E0      		ldi r25,hi8(__c.4794)
 1452 0068 0E94 0000 		call xputs
 1453               	.LVL119:
 1454               	.L165:
 617:../../tmk_core/protocol/lufa/lufa.c ****     while (1) {
 618:../../tmk_core/protocol/lufa/lufa.c ****         while (USB_DeviceState == DEVICE_STATE_Suspended) {
 1455               		.loc 1 618 0
 1456 006c 8091 0000 		lds r24,USB_DeviceState
 1457 0070 8530      		cpi r24,lo8(5)
 1458 0072 01F4      		brne .L174
 619:../../tmk_core/protocol/lufa/lufa.c ****             print("[s]");
 1459               		.loc 1 619 0
 1460 0074 80E0      		ldi r24,lo8(__c.4796)
 1461 0076 90E0      		ldi r25,hi8(__c.4796)
 1462 0078 0E94 0000 		call xputs
 1463               	.LVL120:
 620:../../tmk_core/protocol/lufa/lufa.c ****             suspend_power_down();
 1464               		.loc 1 620 0
 1465 007c 0E94 0000 		call suspend_power_down
 1466               	.LVL121:
 621:../../tmk_core/protocol/lufa/lufa.c ****             if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
 1467               		.loc 1 621 0
 1468 0080 8091 0000 		lds r24,USB_Device_RemoteWakeupEnabled
 1469 0084 8823      		tst r24
 1470 0086 01F0      		breq .L165
 1471               		.loc 1 621 0 is_stmt 0 discriminator 1
 1472 0088 0E94 0000 		call suspend_wakeup_condition
 1473               	.LVL122:
 1474 008c 8823      		tst r24
 1475 008e 01F0      		breq .L165
 622:../../tmk_core/protocol/lufa/lufa.c ****                     USB_Device_SendRemoteWakeup();
 1476               		.loc 1 622 0 is_stmt 1
 1477 0090 0E94 0000 		call USB_Device_SendRemoteWakeup
 1478               	.LVL123:
 1479 0094 00C0      		rjmp .L165
 1480               	.L174:
 623:../../tmk_core/protocol/lufa/lufa.c ****             }
 624:../../tmk_core/protocol/lufa/lufa.c ****         }
 625:../../tmk_core/protocol/lufa/lufa.c **** 
 626:../../tmk_core/protocol/lufa/lufa.c ****         keyboard_task();
 1481               		.loc 1 626 0
 1482 0096 0E94 0000 		call keyboard_task
 1483               	.LVL124:
 627:../../tmk_core/protocol/lufa/lufa.c **** 
 628:../../tmk_core/protocol/lufa/lufa.c **** #if !defined(INTERRUPT_CONTROL_ENDPOINT)
 629:../../tmk_core/protocol/lufa/lufa.c ****         USB_USBTask();
 630:../../tmk_core/protocol/lufa/lufa.c **** #endif
 631:../../tmk_core/protocol/lufa/lufa.c ****     }
 1484               		.loc 1 631 0
 1485 009a 00C0      		rjmp .L165
 1486               		.cfi_endproc
 1487               	.LFE121:
 1489               		.section	.progmem.data.__c.4796,"a",@progbits
 1492               	__c.4796:
 1493 0000 5B73 5D00 		.string	"[s]"
 1494               		.section	.progmem.data.__c.4794,"a",@progbits
 1497               	__c.4794:
 1498 0000 4B65 7962 		.string	"Keyboard start.\n"
 1498      6F61 7264 
 1498      2073 7461 
 1498      7274 2E0A 
 1498      00
 1499               		.section	.progmem.data.__c.4792,"a",@progbits
 1502               	__c.4792:
 1503 0000 5553 4220 		.string	"USB configured.\n"
 1503      636F 6E66 
 1503      6967 7572 
 1503      6564 2E0A 
 1503      00
 1504               		.section	.bss.timeouted.4766,"aw",@nobits
 1507               	timeouted.4766:
 1508 0000 00        		.zero	1
 1509               		.section	.bss.count.4696,"aw",@nobits
 1512               	count.4696:
 1513 0000 00        		.zero	1
 1514               		.section	.progmem.data.__c.4690,"a",@progbits
 1517               	__c.4690:
 1518 0000 5B57 5D00 		.string	"[W]"
 1519               		.section	.progmem.data.__c.4686,"a",@progbits
 1522               	__c.4686:
 1523 0000 5B53 5D00 		.string	"[S]"
 1524               		.section	.progmem.data.__c.4682,"a",@progbits
 1527               	__c.4682:
 1528 0000 5B52 5D00 		.string	"[R]"
 1529               		.section	.progmem.data.__c.4677,"a",@progbits
 1532               	__c.4677:
 1533 0000 5B44 5D00 		.string	"[D]"
 1534               		.section	.progmem.data.__c.4672,"a",@progbits
 1537               	__c.4672:
 1538 0000 5B43 5D00 		.string	"[C]"
 1539               		.section	.bss.console_flush,"aw",@nobits
 1542               	console_flush:
 1543 0000 00        		.zero	1
 1544               	.global	lufa_driver
 1545               		.section	.data.lufa_driver,"aw",@progbits
 1548               	lufa_driver:
 1549 0000 0000      		.word	gs(keyboard_leds)
 1550 0002 0000      		.word	gs(send_keyboard)
 1551 0004 0000      		.word	gs(send_mouse)
 1552 0006 0000      		.word	gs(send_system)
 1553 0008 0000      		.word	gs(send_consumer)
 1554               		.section	.bss.keyboard_report_sent,"aw",@nobits
 1557               	keyboard_report_sent:
 1558 0000 0000 0000 		.zero	16
 1558      0000 0000 
 1558      0000 0000 
 1558      0000 0000 
 1559               		.section	.bss.keyboard_led_stats,"aw",@nobits
 1562               	keyboard_led_stats:
 1563 0000 00        		.zero	1
 1564               	.global	keyboard_protocol
 1565               		.section	.data.keyboard_protocol,"aw",@progbits
 1568               	keyboard_protocol:
 1569 0000 01        		.byte	1
 1570               	.global	keyboard_idle
 1571               		.section	.bss.keyboard_idle,"aw",@nobits
 1574               	keyboard_idle:
 1575 0000 00        		.zero	1
 1576               		.text
 1577               	.Letext0:
 1578               		.file 6 "/usr/avr/include/stdint.h"
 1579               		.file 7 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../Device.h"
 1580               		.file 8 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 1581               		.file 9 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Class/Device/../Common/HIDClassCom
 1582               		.file 10 "../../tmk_core/common/report.h"
 1583               		.file 11 "../../tmk_core/common/host_driver.h"
 1584               		.file 12 "../../tmk_core/protocol/lufa/lufa.h"
 1585               		.file 13 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h"
 1586               		.file 14 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 1587               		.file 15 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 1588               		.file 16 "../../tmk_core/common/host.h"
 1589               		.file 17 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h"
 1590               		.file 18 "../../tmk_core/common/suspend.h"
 1591               		.file 19 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/EndpointStream_
 1592               		.file 20 "../../tmk_core/common/action.h"
 1593               		.file 21 "../../tmk_core/common/avr/xprintf.h"
 1594               		.file 22 "../../tmk_core/common/print.h"
 1595               		.file 23 "../../tmk_core/common/keyboard.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 lufa.c
     /tmp/ccHlBGhl.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccHlBGhl.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccHlBGhl.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccHlBGhl.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccHlBGhl.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccHlBGhl.s:12     .text.keyboard_leds:0000000000000000 keyboard_leds
     /tmp/ccHlBGhl.s:1562   .bss.keyboard_led_stats:0000000000000000 keyboard_led_stats
     /tmp/ccHlBGhl.s:30     .text.sendchar:0000000000000000 sendchar
     /tmp/ccHlBGhl.s:1542   .bss.console_flush:0000000000000000 console_flush
     /tmp/ccHlBGhl.s:1507   .bss.timeouted.4766:0000000000000000 timeouted.4766
     /tmp/ccHlBGhl.s:263    .text.send_consumer:0000000000000000 send_consumer
     /tmp/ccHlBGhl.s:379    .text.send_system:0000000000000000 send_system
     /tmp/ccHlBGhl.s:495    .text.send_mouse:0000000000000000 send_mouse
     /tmp/ccHlBGhl.s:579    .text.send_keyboard:0000000000000000 send_keyboard
     /tmp/ccHlBGhl.s:1568   .data.keyboard_protocol:0000000000000000 keyboard_protocol
     /tmp/ccHlBGhl.s:1557   .bss.keyboard_report_sent:0000000000000000 keyboard_report_sent
     /tmp/ccHlBGhl.s:756    .text.EVENT_USB_Device_Connect:0000000000000000 EVENT_USB_Device_Connect
     /tmp/ccHlBGhl.s:1537   .progmem.data.__c.4672:0000000000000000 __c.4672
     /tmp/ccHlBGhl.s:799    .text.EVENT_USB_Device_Disconnect:0000000000000000 EVENT_USB_Device_Disconnect
     /tmp/ccHlBGhl.s:1532   .progmem.data.__c.4677:0000000000000000 __c.4677
     /tmp/ccHlBGhl.s:821    .text.EVENT_USB_Device_Reset:0000000000000000 EVENT_USB_Device_Reset
     /tmp/ccHlBGhl.s:1527   .progmem.data.__c.4682:0000000000000000 __c.4682
     /tmp/ccHlBGhl.s:840    .text.EVENT_USB_Device_Suspend:0000000000000000 EVENT_USB_Device_Suspend
     /tmp/ccHlBGhl.s:1522   .progmem.data.__c.4686:0000000000000000 __c.4686
     /tmp/ccHlBGhl.s:859    .text.EVENT_USB_Device_WakeUp:0000000000000000 EVENT_USB_Device_WakeUp
     /tmp/ccHlBGhl.s:1517   .progmem.data.__c.4690:0000000000000000 __c.4690
     /tmp/ccHlBGhl.s:881    .text.EVENT_USB_Device_StartOfFrame:0000000000000000 EVENT_USB_Device_StartOfFrame
     /tmp/ccHlBGhl.s:1512   .bss.count.4696:0000000000000000 count.4696
     /tmp/ccHlBGhl.s:1019   .text.EVENT_USB_Device_ConfigurationChanged:0000000000000000 EVENT_USB_Device_ConfigurationChanged
     /tmp/ccHlBGhl.s:1080   .text.EVENT_USB_Device_ControlRequest:0000000000000000 EVENT_USB_Device_ControlRequest
     /tmp/ccHlBGhl.s:1574   .bss.keyboard_idle:0000000000000000 keyboard_idle
     /tmp/ccHlBGhl.s:1351   .text.startup.main:0000000000000000 main
     /tmp/ccHlBGhl.s:1502   .progmem.data.__c.4792:0000000000000000 __c.4792
     /tmp/ccHlBGhl.s:1548   .data.lufa_driver:0000000000000000 lufa_driver
     /tmp/ccHlBGhl.s:1497   .progmem.data.__c.4794:0000000000000000 __c.4794
     /tmp/ccHlBGhl.s:1492   .progmem.data.__c.4796:0000000000000000 __c.4796

UNDEFINED SYMBOLS
USB_DeviceState
Endpoint_Write_Stream_LE
keyboard_nkro
xputs
USB_IsInitialized
USB_Disable
USB_Init
suspend_wakeup_init
__udivmodqi4
Endpoint_ConfigureEndpoint_Prv
USB_ControlRequest
Endpoint_Write_Control_Stream_LE
Endpoint_ClearStatusStage
clear_keyboard
keyboard_setup
print_set_sendchar
keyboard_init
host_set_driver
suspend_power_down
USB_Device_RemoteWakeupEnabled
suspend_wakeup_condition
USB_Device_SendRemoteWakeup
keyboard_task
__do_copy_data
__do_clear_bss
