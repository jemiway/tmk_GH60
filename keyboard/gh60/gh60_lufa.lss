
gh60_lufa.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  000055c8  0000565c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000055c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ae  00800138  00800138  00005694  2**0
                  ALLOC
  3 .noinit       00000004  008001e6  008001e6  00005694  2**0
                  ALLOC
  4 .stab         000029e8  00000000  00000000  00005694  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000517  00000000  00000000  0000807c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000020  00000000  00000000  00008593  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000009d0  00000000  00000000  000085b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00010561  00000000  00000000  00008f83  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003ee5  00000000  00000000  000194e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00005294  00000000  00000000  0001d3c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001ba0  00000000  00000000  00022660  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000465b  00000000  00000000  00024200  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00008d14  00000000  00000000  0002885b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000b98  00000000  00000000  0003156f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	0c 94 c1 06 	jmp	0xd82	; 0xd82 <__ctors_end>
       4:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__bad_interrupt>
       8:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__bad_interrupt>
       c:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__bad_interrupt>
      10:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__bad_interrupt>
      14:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__bad_interrupt>
      18:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__bad_interrupt>
      1c:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__bad_interrupt>
      20:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__bad_interrupt>
      24:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__bad_interrupt>
      28:	0c 94 be 0e 	jmp	0x1d7c	; 0x1d7c <__vector_10>
      2c:	0c 94 90 0f 	jmp	0x1f20	; 0x1f20 <__vector_11>
      30:	0c 94 10 1f 	jmp	0x3e20	; 0x3e20 <__vector_12>
      34:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__bad_interrupt>
      3c:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__bad_interrupt>
      40:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__bad_interrupt>
      44:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      48:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__bad_interrupt>
      4c:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__bad_interrupt>
      50:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__bad_interrupt>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	0c 94 78 1f 	jmp	0x3ef0	; 0x3ef0 <__vector_21>
      58:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__bad_interrupt>
      5c:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__bad_interrupt>
      60:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      64:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__bad_interrupt>
      68:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__bad_interrupt>

	ParserData->TotalDeviceReports = 1;
      6c:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__bad_interrupt>
      70:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__bad_interrupt>
      74:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__bad_interrupt>
      78:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__bad_interrupt>
      7c:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__bad_interrupt>
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__bad_interrupt>
      84:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__bad_interrupt>
      88:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__bad_interrupt>
      8c:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      90:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      94:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__bad_interrupt>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      98:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__bad_interrupt>
      9c:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__bad_interrupt>
      a0:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__bad_interrupt>

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      a4:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__bad_interrupt>
      a8:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__bad_interrupt>
      ac:	fd 0f       	add	r31, r29
      ae:	1f 10       	cpse	r1, r15
      b0:	0d 11       	cpse	r16, r13
      b2:	1f 10       	cpse	r1, r15
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      b4:	0d 11       	cpse	r16, r13
      b6:	64 10       	cpse	r6, r4
      b8:	87 10       	cpse	r8, r7
      ba:	0d 11       	cpse	r16, r13
      bc:	dc 10       	cpse	r13, r12
      be:	ef 10       	cpse	r14, r15
      c0:	31 14       	cp	r3, r1
      c2:	31 14       	cp	r3, r1
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
      c4:	60 14       	cp	r6, r0
      c6:	60 14       	cp	r6, r0
      c8:	ba 14       	cp	r11, r10
      ca:	f8 14       	cp	r15, r8
      cc:	01 17       	cp	r16, r17
      ce:	01 17       	cp	r16, r17
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      d0:	11 15       	cp	r17, r1
      d2:	01 17       	cp	r16, r17
      d4:	12 16       	cp	r1, r18
      d6:	12 16       	cp	r1, r18
	{
		uint8_t  HIDReportItem  = *ReportData;
      d8:	d5 16       	cp	r13, r21
      da:	01 17       	cp	r16, r17
      dc:	01 17       	cp	r16, r17
      de:	ec 16       	cp	r14, r28

000000e0 <__trampolines_end>:
      e0:	f1 a6       	std	Z+41, r15	; 0x29
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      e2:	21 8a       	std	Z+17, r2	; 0x11
      e4:	22 8a       	std	Z+18, r2	; 0x12
      e6:	29 13       	cpse	r18, r25
      e8:	f1 a7       	std	Z+41, r31	; 0x29
      ea:	01 8c       	ldd	r0, Z+25	; 0x19
      ec:	02 8c       	ldd	r0, Z+26	; 0x1a
      ee:	04 8c       	ldd	r0, Z+28	; 0x1c
      f0:	08 8c       	ldd	r0, Y+24	; 0x18

000000f2 <keymaps>:
      f2:	29 1e 1f 20 21 22 23 24 25 26 27 2d 2e 2a 2b 14     ).. !"#$%&'-.*+.
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     102:	1a 08 15 17 1c 18 0c 12 13 2f 30 31 39 04 16 07     ........./019...
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     112:	09 0a 0b 0d 0e 0f 33 34 00 28 e1 00 1d 1b 06 19     ......34.(......
     122:	05 11 10 36 37 38 52 e5 e0 e3 e2 00 00 2c 00 00     ...678R......,..
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     132:	00 4c c0 50 51 4f 35 1e 1f 20 21 22 23 24 25 26     .L.PQO5.. !"#$%&
     142:	27 2d 2e 2a 2b 14 1a 09 13 0a 0d 0f 18 1c 33 2f     '-.*+.........3/
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     152:	30 31 2a 04 15 16 17 07 0b 11 08 0c 12 34 00 28     01*..........4.(
     162:	e1 00 1d 1b 06 19 05 0e 10 36 37 38 52 e5 e0 e3     .........678R...
				ReportSize     -= 4;
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     172:	e2 00 00 2c 00 00 00 4c c0 4a 4e 4d 35 1e 1f 20     ...,...L.JNM5.. 
     182:	21 22 23 24 25 26 27 2f 30 2a 2b 34 36 37 13 1c     !"#$%&'/0*+467..
				ReportSize     -= 2;
				ReportData     += 2;
     192:	09 0a 06 15 0f 38 2e 31 39 04 12 08 18 0c 07 0b     .....8.19.......
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
				ReportSize     -= 1;
     1a2:	17 11 16 2d 00 28 e1 00 33 14 0d 0e 1b 05 10 1a     ...-.(..3.......
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1b2:	19 1d 52 e5 e0 e3 e2 00 00 2c 00 00 00 4c c0 e7     ..R......,...L..
     1c2:	65 e4 35 1e 1f 20 21 22 23 24 25 26 27 2d 2e 2a     e.5.. !"#$%&'-.*

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1d2:	2b 14 07 15 1a 05 0d 09 18 13 33 2f 30 31 2a 04     +.........3/01*.
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1e2:	16 0b 17 0a 1c 11 08 12 0c 34 00 28 e1 00 1d 1b     .........4.(....
     1f2:	10 06 19 0e 0f 36 37 38 52 e5 e0 e3 e2 00 00 2c     .....678R......,
			case HID_RI_USAGE_MINIMUM(0):
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
     202:	00 00 00 4c c0 e7 65 e4 01 01 01 01 01 01 01 01     ...L..e.........
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     212:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     222:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     232:	00 01 01 00 01 01 01 01 01 01 01 01 01 01 52 e5     ..............R.
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     242:	01 01 01 00 00 01 00 00 00 01 01 50 51 4f 29 01     ...........PQO).
     252:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     262:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     272:	01 01 01 01 01 01 00 01 01 00 01 01 01 01 01 01     ................
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     282:	01 01 01 01 01 01 01 01 01 00 00 01 00 00 00 01     ................
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     292:	01 01 01 01 35 3a 3b 3c 3d 3e 3f 40 41 42 43 44     ....5:;<=>?@ABCD

				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     2a2:	45 4c 35 01 52 01 01 01 01 01 01 b2 01 4a 49 01     EL5.R........JI.
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     2b2:	01 50 51 4f 01 01 46 47 48 01 01 4d 00 01 01 00     .PQO..FGH..M....
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
				break;

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     2c2:	4c 01 b5 a8 a9 aa 01 4b 4e 4c 4b 01 01 01 01 00     L......KNLK.....
				break;

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2d2:	00 c1 00 00 00 01 01 4a 4e 4d c5 c6 c7 c8 01 01     .......JNM......
				break;

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2e2:	01 01 01 01 01 01 01 01 01 c5 c8 01 01 01 01 01     ................
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2f2:	01 01 01 01 01 01 01 01 01 c7 01 01 01 01 01 01     ................
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     302:	01 01 00 01 01 00 01 01 c6 01 01 01 01 01 01 01     ................
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
     312:	01 01 01 01 01 00 00 01 00 00 00 01 01 01 01 01     ................

00000322 <__c.1942>:
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     322:	0a 00                                               ..

00000324 <__c.1940>:
     324:	25 30 31 36 62 00                                   %016b.

0000032a <__c.1938>:
     32a:	3a 20 00                                            : .

0000032d <__c.1936>:
     32d:	25 30 32 58 00                                      %02X.

00000332 <__c.1933>:
     332:	0a 72 2f 63 20 30 31 32 33 34 35 36 37 38 39 41     .r/c 0123456789A
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     342:	42 43 44 45 46 0a 00                                BCDEF..

00000349 <__c.1911>:
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     349:	0a 00                                               ..

0000034b <__c.1909>:
     34b:	25 30 32 58 00                                      %02X.

00000350 <__c.1907>:
     350:	62 6f 75 6e 63 65 21 3a 20 00                       bounce!: .

0000035a <__c.4796>:
     35a:	5b 73 5d 00                                         [s].

0000035e <__c.4794>:
     35e:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     36e:	00                                                  .

0000036f <__c.4792>:
     36f:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..
     37f:	00                                                  .

00000380 <__c.4690>:
     380:	5b 57 5d 00                                         [W].

00000384 <__c.4686>:
     384:	5b 53 5d 00                                         [S].

00000388 <__c.4682>:
     388:	5b 52 5d 00                                         [R].

0000038c <__c.4677>:
     38c:	5b 44 5d 00                                         [D].

00000390 <__c.4672>:
     390:	5b 43 5d 00                                         [C].

00000394 <ProductString>:
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     394:	0a 03 47 00 48 00 36 00 30 00 00 00                 ..G.H.6.0...

000003a0 <ManufacturerString>:
					}
				}

				ParserData->UsingReportIDs = true;
     3a0:	12 03 67 00 65 00 65 00 6b 00 68 00 61 00 63 00     ..g.e.e.k.h.a.c.

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     3b0:	6b 00 00 00                                         k...

000003b4 <LanguageString>:
     3b4:	04 03 09 04                                         ....

000003b8 <ConfigurationDescriptor>:
				break;
     3b8:	09 02 8d 00 05 01 00 a0 32 09 04 00 00 01 03 01     ........2.......

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     3c8:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3d8:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3e8:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3f8:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
     408:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.

					CurrCollectionPath->Parent = ParentCollectionPath;
				}

				CurrCollectionPath->Type       = ReportItemData;
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     418:	01 00 01 22 20 00 07 05 84 03 20 00 01 07 05 04     ..." ..... .....

				if (UsageListSize)
     428:	03 20 00 01 09 04 04 00 01 03 00 00 00 09 21 11     . ............!.
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     438:	01 00 01 22 39 00 07 05 85 03 10 00 01              ..."9........

00000445 <DeviceDescriptor>:

					for (uint8_t i = 1; i < UsageListSize; i++)
     445:	12 01 10 01 00 00 00 08 ed fe 60 60 01 00 01 02     ..........``....
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     455:	00 01                                               ..

00000457 <NKROReport>:
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     457:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     467:	95 08 75 01 81 02 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     477:	91 02 95 01 75 03 91 01 05 07 19 00 29 77 15 00     ....u.......)w..
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     487:	25 01 95 78 75 01 81 02 c0                          %..xu....

00000490 <ConsoleReport>:
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     490:	06 31 ff 09 74 a1 01 09 75 15 00 25 ff 95 20 75     .1..t...u..%.. u
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4a0:	08 81 02 09 76 15 00 25 ff 95 20 75 08 91 02 c0     ....v..%.. u....

000004b0 <ExtrakeyReport>:
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4b0:	05 01 09 80 a1 01 85 02 16 01 00 26 b7 00 1a 01     ...........&....
     4c0:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4d0:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4e0:	10 95 01 81 00 c0                                   ......

000004e6 <MouseReport>:
     4e6:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
					NewReportItem.CollectionPath = CurrCollectionPath;
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     4f6:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     506:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...

						for (uint8_t i = 1; i < UsageListSize; i++)
     516:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
     526:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

00000533 <KeyboardReport>:
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     533:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     543:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     553:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     563:	19 00 29 ff 15 00 25 ff 95 06 75 08 81 00 c0        ..)...%...u....

00000572 <__c.4447>:
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     572:	0a 00                                               ..

00000574 <__c.4442>:
     574:	25 30 32 58 20 00                                   %02X .

0000057a <__c.4439>:
     57a:	6b 65 79 62 6f 61 72 64 5f 72 65 70 6f 72 74 3a     keyboard_report:

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     58a:	20 00                                                .

0000058c <__c.4784>:
     58c:	0a 00                                               ..

0000058e <__c.4782>:
     58e:	25 30 32 58 00                                      %02X.

00000593 <__c.4780>:
     593:	6b 65 79 62 6f 61 72 64 5f 73 65 74 5f 6c 65 64     keyboard_set_led

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5a3:	3a 20 00                                            : .

000005a6 <__c.4587>:
     5a6:	64 65 6c 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     del_key_bit: can
     5b6:	27 74 20 64 65 6c 3a 20 25 30 32 58 0a 00           't del: %02X..

000005c4 <__c.4582>:
     5c4:	61 64 64 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     add_key_bit: can

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5d4:	27 74 20 61 64 64 3a 20 25 30 32 58 0a 00           't add: %02X..

000005e2 <__c.4724>:
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     5e2:	64 6f 6e 65 2e 0a 00                                done...

000005e9 <__c.4718>:
     5e9:	62 6f 6f 67 6d 61 67 69 63 20 73 63 61 6e 3a 20     boogmagic scan: 
     5f9:	2e 2e 2e 20 00                                      ... .

000005fe <__c.4519>:
     5fe:	29 0a 00                                            )..

00000601 <__c.4517>:
     601:	25 75 00                                            %u.

00000604 <__c.4515>:
     604:	2f 00                                               /.

00000606 <__c.4513>:
     606:	25 75 00                                            %u.

00000609 <__c.4511>:
     609:	5d 28 00                                            ](.

0000060c <__c.4509>:
     60c:	25 64 00                                            %d.

0000060f <__c.4507>:
     60f:	20 00                                                .

00000611 <__c.4505>:
     611:	25 64 00                                            %d.

00000614 <__c.4503>:
     614:	20 00                                                .

00000616 <__c.4501>:
     616:	25 64 00                                            %d.

00000619 <__c.4499>:
     619:	20 00                                                .

0000061b <__c.4497>:
     61b:	25 64 00                                            %d.

0000061e <__c.4495>:
     61e:	7c 00                                               |.

00000620 <__c.4493>:
     620:	25 30 32 58 00                                      %02X.

00000625 <__c.4491>:
     625:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
     635:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
     645:	20 5b 00                                             [.

00000648 <__c.5115>:
     648:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     658:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

00000663 <__c.5112>:
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     663:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     673:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

0000067c <__c.5109>:
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     67c:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     68c:	20 25 64 0a 00                                       %d..

00000691 <__c.5106>:
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     691:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6a1:	64 0a 00                                            d..

000006a4 <__c.5103>:
     6a4:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     6b4:	0a 00                                               ..

000006b6 <__c.5099>:
     6b6:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

000006c5 <__c.5092>:
     6c5:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     6d5:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

000006e0 <__c.5089>:
     6e0:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     6f0:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

000006f9 <__c.5086>:
     6f9:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     709:	20 25 64 0a 00                                       %d..

0000070e <__c.5083>:
     70e:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     71e:	64 0a 00                                            d..

00000721 <__c.5080>:
     721:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     731:	0a 00                                               ..

00000733 <__c.5076>:
     733:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000742 <__c.5069>:
     742:	0a 00                                               ..

00000744 <__c.5067>:
     744:	25 75 00                                            %u.

00000747 <__c.5065>:
     747:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to
     757:	5f 6d 61 78 3a 20 00                                _max: .

0000075e <__c.5063>:
     75e:	0a 00                                               ..

00000760 <__c.5061>:
     760:	25 75 00                                            %u.

00000763 <__c.5059>:
     763:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe
     773:	65 64 3a 20 00                                      ed: .

00000778 <__c.5057>:
     778:	0a 00                                               ..

0000077a <__c.5055>:
     77a:	25 75 00                                            %u.

0000077d <__c.5053>:
     77d:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 
     78d:	00                                                  .

0000078e <__c.5051>:
     78e:	0a 00                                               ..

00000790 <__c.5049>:
     790:	25 75 00                                            %u.

00000793 <__c.5047>:
     793:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

000007a2 <__c.5045>:
     7a2:	0a 00                                               ..

000007a4 <__c.5043>:
     7a4:	25 75 00                                            %u.

000007a7 <__c.5041>:
     7a7:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):
     7b7:	20 00                                                .

000007b9 <__c.5039>:
     7b9:	0a 00                                               ..

000007bb <__c.5037>:
     7bb:	25 75 00                                            %u.

000007be <__c.5035>:
     7be:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):
     7ce:	20 00                                                .

000007d0 <__c.5033>:
     7d0:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

000007de <__c.5153>:
     7de:	4d 3e 00                                            M>.

000007e1 <__c.5151>:
     7e1:	4d 25 64 3e 20 00                                   M%d> .

000007e7 <__c.5149>:
     7e7:	3f 00                                               ?.

000007e9 <__c.5146>:
     7e9:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

000007f6 <__c.5132>:
     7f6:	43 3e 20 00                                         C> .

000007fa <__c.5122>:
     7fa:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     80a:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d
     81a:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w
     82a:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik
     83a:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

00000848 <__c.5120>:
     848:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
     858:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de
     868:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in
     878:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma
     888:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_
     898:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_
     8a8:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe
     8b8:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
     8c8:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
     8d8:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
     8e8:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.
     8f8:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown
     908:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d
     918:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     928:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     938:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

00000943 <__c.5025>:
     943:	3f 00                                               ?.

00000945 <__c.5022>:
     945:	4d 3e 20 00                                         M> .

00000949 <__c.5027>:
     949:	43 3e 20 00                                         C> .

0000094d <__c.5171>:
     94d:	4c 25 64 0a 00                                      L%d..

00000952 <__c.5011>:
     952:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     962:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou
     972:	73 65 6b 65 79 0a 00                                sekey..

00000979 <__c.4835>:
     979:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     989:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     999:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     9a9:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     9b9:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     9c9:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     9d9:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     9e9:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     9f9:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     a09:	72 0a 65 3a 09 65 65 70 72 6f 6d 0a 6e 3a 09 4e     r.e:.eeprom.n:.N
     a19:	4b 52 4f 0a 00                                      KRO..

00000a1e <__c.4930>:
     a1e:	0a 00                                               ..

00000a20 <__c.4928>:
     a20:	25 75 00                                            %u.

00000a23 <__c.4926>:
     a23:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

00000a2b <__c.4924>:
     a2b:	0a 00                                               ..

00000a2d <__c.4922>:
     a2d:	25 75 00                                            %u.

00000a30 <__c.4920>:
     a30:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     a40:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

00000a4c <__c.4918>:
     a4c:	0a 00                                               ..

00000a4e <__c.4916>:
     a4e:	25 75 00                                            %u.

00000a51 <__c.4914>:
     a51:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     a61:	20 00                                                .

00000a63 <__c.4912>:
     a63:	0a 00                                               ..

00000a65 <__c.4910>:
     a65:	25 75 00                                            %u.

00000a68 <__c.4908>:
     a68:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

00000a72 <__c.4906>:
     a72:	0a 00                                               ..

00000a74 <__c.4904>:
     a74:	25 75 00                                            %u.

00000a77 <__c.4902>:
     a77:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     a87:	20 00                                                .

00000a89 <__c.4900>:
     a89:	0a 00                                               ..

00000a8b <__c.4898>:
     a8b:	25 75 00                                            %u.

00000a8e <__c.4896>:
     a8e:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     a9e:	20 00                                                .

00000aa0 <__c.4894>:
     aa0:	0a 00                                               ..

00000aa2 <__c.4892>:
     aa2:	25 75 00                                            %u.

00000aa5 <__c.4890>:
     aa5:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     ab5:	74 72 6f 6c 3a 20 00                                trol: .

00000abc <__c.4888>:
     abc:	0a 00                                               ..

00000abe <__c.4886>:
     abe:	25 75 00                                            %u.

00000ac1 <__c.4884>:
     ac1:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     ad1:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

00000ada <__c.4882>:
     ada:	0a 00                                               ..

00000adc <__c.4880>:
     adc:	25 30 32 58 00                                      %02X.

00000ae1 <__c.4878>:
     ae1:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     af1:	77 3a 20 00                                         w: .

00000af5 <__c.4875>:
     af5:	0a 00                                               ..

00000af7 <__c.4873>:
     af7:	25 75 00                                            %u.

00000afa <__c.4871>:
     afa:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

00000b03 <__c.4869>:
     b03:	0a 00                                               ..

00000b05 <__c.4867>:
     b05:	25 75 00                                            %u.

00000b08 <__c.4865>:
     b08:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

00000b14 <__c.4863>:
     b14:	0a 00                                               ..

00000b16 <__c.4861>:
     b16:	25 75 00                                            %u.

00000b19 <__c.4859>:
     b19:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

00000b23 <__c.4857>:
     b23:	0a 00                                               ..

00000b25 <__c.4855>:
     b25:	25 75 00                                            %u.

00000b28 <__c.4853>:
     b28:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

00000b32 <__c.4851>:
     b32:	0a 00                                               ..

00000b34 <__c.4849>:
     b34:	25 30 32 58 00                                      %02X.

00000b39 <__c.4847>:
     b39:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     b49:	3a 20 00                                            : .

00000b4c <__c.4844>:
     b4c:	0a 00                                               ..

00000b4e <__c.4842>:
     b4e:	25 75 00                                            %u.

00000b51 <__c.4840>:
     b51:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

00000b61 <__c.5006>:
     b61:	3f 00                                               ?.

00000b63 <__c.4997>:
     b63:	4e 4b 52 4f 3a 20 6f 66 66 0a 00                    NKRO: off..

00000b6e <__c.4995>:
     b6e:	4e 4b 52 4f 3a 20 6f 6e 0a 00                       NKRO: on..

00000b78 <__c.4992>:
     b78:	74 69 6d 65 72 5f 63 6f 75 6e 74 3a 20 25 30 34     timer_count: %04
     b88:	6c 58 0a 00                                         lX..

00000b8c <__c.4990>:
     b8c:	6b 65 79 62 6f 61 72 64 5f 6e 6b 72 6f 3a 20 25     keyboard_nkro: %
     b9c:	58 0a 00                                            X..

00000b9f <__c.4988>:
     b9f:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     baf:	58 0a 00                                            X..

00000bb2 <__c.4986>:
     bb2:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     bc2:	6c 3a 20 25 58 0a 00                                l: %X..

00000bc9 <__c.4984>:
     bc9:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     bd9:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

00000be3 <__c.4982>:
     be3:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

00000bf1 <__c.4979>:
     bf1:	47 43 43 3a 20 34 2e 39 2e 32 20 41 56 52 2d 4c     GCC: 4.9.2 AVR-L
     c01:	49 42 43 3a 20 31 2e 38 2e 30 20 41 56 52 5f 41     IBC: 1.8.0 AVR_A
     c11:	52 43 48 3a 20 61 76 72 35 0a 00                    RCH: avr5..

00000c1c <__c.4977>:
     c1c:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 42 4f     OPTIONS: LUFA BO
     c2c:	4f 54 4d 41 47 49 43 20 4d 4f 55 53 45 4b 45 59     OTMAGIC MOUSEKEY
     c3c:	20 45 58 54 52 41 4b 45 59 20 43 4f 4e 53 4f 4c      EXTRAKEY CONSOL
     c4c:	45 20 43 4f 4d 4d 41 4e 44 20 4e 4b 52 4f 20 34     E COMMAND NKRO 4
     c5c:	30 39 36 0a 00                                      096..

00000c61 <__c.4975>:
     c61:	42 55 49 4c 44 3a 20 75 6e 6b 6e 6f 77 6e 20 28     BUILD: unknown (
     c71:	31 39 3a 35 38 3a 35 38 20 46 65 62 20 32 35 20     19:58:58 Feb 25 
     c81:	32 30 31 38 29 0a 00                                2018)..

00000c88 <__c.4973>:
     c88:	56 49 44 3a 20 30 78 46 45 45 44 28 67 65 65 6b     VID: 0xFEED(geek
     c98:	68 61 63 6b 29 20 50 49 44 3a 20 30 78 36 30 36     hack) PID: 0x606
     ca8:	30 28 47 48 36 30 29 20 56 45 52 3a 20 30 78 30     0(GH60) VER: 0x0
     cb8:	30 30 31 0a 00                                      001..

00000cbd <__c.4971>:
     cbd:	44 45 53 43 3a 20 74 2e 6d 2e 6b 2e 20 6b 65 79     DESC: t.m.k. key
     ccd:	62 6f 61 72 64 20 66 69 72 6d 77 61 72 65 20 66     board firmware f
     cdd:	6f 72 20 47 48 36 30 0a 00                          or GH60..

00000ce6 <__c.4969>:
     ce6:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

00000cf5 <__c.4966>:
     cf5:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

00000d02 <__c.4964>:
     d02:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

00000d0e <__c.4961>:
     d0e:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

00000d1e <__c.4959>:
     d1e:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

00000d2d <__c.4956>:
     d2d:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

00000d3b <__c.4954>:
     d3b:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

00000d48 <__c.4951>:
     d48:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000d54 <__c.4949>:
     d54:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000d61 <__c.4946>:
     d61:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     d71:	00                                                  .

00000d72 <__c.4943>:
     d72:	43 3e 20 00                                         C> .

00000d76 <__c.4937>:
     d76:	65 65 63 6f 6e 66 69 67 3a 0a 00 00                 eeconfig:...

00000d82 <__ctors_end>:
     d82:	11 24       	eor	r1, r1
     d84:	1f be       	out	0x3f, r1	; 63
     d86:	cf ef       	ldi	r28, 0xFF	; 255
     d88:	da e0       	ldi	r29, 0x0A	; 10
     d8a:	de bf       	out	0x3e, r29	; 62
     d8c:	cd bf       	out	0x3d, r28	; 61

00000d8e <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     d8e:	04 b6       	in	r0, 0x34	; 52
     d90:	03 fe       	sbrs	r0, 3
     d92:	24 c0       	rjmp	.+72     	; 0xddc <__do_copy_data>
     d94:	80 91 e6 01 	lds	r24, 0x01E6
     d98:	90 91 e7 01 	lds	r25, 0x01E7
     d9c:	a0 91 e8 01 	lds	r26, 0x01E8
     da0:	b0 91 e9 01 	lds	r27, 0x01E9
     da4:	87 30       	cpi	r24, 0x07	; 7
     da6:	90 4b       	sbci	r25, 0xB0	; 176
     da8:	a7 40       	sbci	r26, 0x07	; 7
     daa:	b0 4b       	sbci	r27, 0xB0	; 176
     dac:	b9 f4       	brne	.+46     	; 0xddc <__do_copy_data>
        reset_key = 0;
     dae:	10 92 e6 01 	sts	0x01E6, r1
     db2:	10 92 e7 01 	sts	0x01E7, r1
     db6:	10 92 e8 01 	sts	0x01E8, r1
     dba:	10 92 e9 01 	sts	0x01E9, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     dbe:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     dc0:	84 b7       	in	r24, 0x34	; 52
     dc2:	87 7f       	andi	r24, 0xF7	; 247
     dc4:	84 bf       	out	0x34, r24	; 52
        wdt_disable();
     dc6:	88 e1       	ldi	r24, 0x18	; 24
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	f8 94       	cli
     dcc:	80 93 60 00 	sts	0x0060, r24
     dd0:	10 92 60 00 	sts	0x0060, r1
     dd4:	0f be       	out	0x3f, r0	; 63

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     dd6:	e0 e0       	ldi	r30, 0x00	; 0
     dd8:	f8 e3       	ldi	r31, 0x38	; 56
     dda:	09 95       	icall

00000ddc <__do_copy_data>:
     ddc:	11 e0       	ldi	r17, 0x01	; 1
     dde:	a0 e0       	ldi	r26, 0x00	; 0
     de0:	b1 e0       	ldi	r27, 0x01	; 1
     de2:	e8 ec       	ldi	r30, 0xC8	; 200
     de4:	f5 e5       	ldi	r31, 0x55	; 85
     de6:	02 c0       	rjmp	.+4      	; 0xdec <__do_copy_data+0x10>
     de8:	05 90       	lpm	r0, Z+
     dea:	0d 92       	st	X+, r0
     dec:	a8 33       	cpi	r26, 0x38	; 56
     dee:	b1 07       	cpc	r27, r17
     df0:	d9 f7       	brne	.-10     	; 0xde8 <__do_copy_data+0xc>

00000df2 <__do_clear_bss>:
     df2:	11 e0       	ldi	r17, 0x01	; 1
     df4:	a8 e3       	ldi	r26, 0x38	; 56
     df6:	b1 e0       	ldi	r27, 0x01	; 1
     df8:	01 c0       	rjmp	.+2      	; 0xdfc <.do_clear_bss_start>

00000dfa <.do_clear_bss_loop>:
     dfa:	1d 92       	st	X+, r1

00000dfc <.do_clear_bss_start>:
     dfc:	a6 3e       	cpi	r26, 0xE6	; 230
     dfe:	b1 07       	cpc	r27, r17
     e00:	e1 f7       	brne	.-8      	; 0xdfa <.do_clear_bss_loop>
     e02:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <main>
     e06:	0c 94 e2 2a 	jmp	0x55c4	; 0x55c4 <_exit>

00000e0a <__bad_interrupt>:
     e0a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000e0e <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     e0e:	ff 93       	push	r31
	push	ZL
     e10:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     e12:	e0 91 38 01 	lds	r30, 0x0138
	lds	ZH, xfunc_out+1	;/
     e16:	f0 91 39 01 	lds	r31, 0x0139
	sbiw	ZL, 0		;Skip if null
     e1a:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     e1c:	09 f0       	breq	.+2      	; 0xe20 <xputc+0x12>
	icall
     e1e:	09 95       	icall
2:	pop	ZL
     e20:	ef 91       	pop	r30
	pop	ZH
     e22:	ff 91       	pop	r31
	ret
     e24:	08 95       	ret

00000e26 <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     e26:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     e28:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     e2a:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     e2c:	11 f0       	breq	.+4      	; 0xe32 <xputs+0xc>
	rcall	xputc
     e2e:	ef df       	rcall	.-34     	; 0xe0e <xputc>
	rjmp	1b
     e30:	fb cf       	rjmp	.-10     	; 0xe28 <xputs+0x2>
2:	ret
     e32:	08 95       	ret

00000e34 <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     e34:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     e36:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     e38:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     e3a:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     e3c:	0c c0       	rjmp	.+24     	; 0xe56 <xitoa+0x22>
	neg	r20		;
     e3e:	41 95       	neg	r20
	sbrs	r25, 7		;
     e40:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     e42:	09 c0       	rjmp	.+18     	; 0xe56 <xitoa+0x22>
	ldi	r30, '-'	;
     e44:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     e46:	60 95       	com	r22
	com	r23		;
     e48:	70 95       	com	r23
	com	r24		;
     e4a:	80 95       	com	r24
	com	r25		;
     e4c:	90 95       	com	r25
	adc	r22, r1		;
     e4e:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     e50:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     e52:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     e54:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     e56:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <xitoa+0x2a>
	neg	r18		;
     e5a:	21 95       	neg	r18
	ldi	r19, '0'	;/
     e5c:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     e5e:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     e60:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     e62:	66 0f       	add	r22, r22
	rol	r23		;
     e64:	77 1f       	adc	r23, r23
	rol	r24		;
     e66:	88 1f       	adc	r24, r24
	rol	r25		;
     e68:	99 1f       	adc	r25, r25
	rol	r26		;
     e6a:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     e6c:	a4 17       	cp	r26, r20
	brcs	3f		;
     e6e:	10 f0       	brcs	.+4      	; 0xe74 <xitoa+0x40>
	sub	r26, r20	;
     e70:	a4 1b       	sub	r26, r20
	inc	r22		;
     e72:	63 95       	inc	r22
3:	dec	r21		;
     e74:	5a 95       	dec	r21
	brne	2b		;/
     e76:	a9 f7       	brne	.-22     	; 0xe62 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     e78:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     e7a:	08 f0       	brcs	.+2      	; 0xe7e <xitoa+0x4a>
	subi	r26, -7		;
     e7c:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     e7e:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     e80:	af 93       	push	r26
	inc	r31		;/
     e82:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     e84:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     e86:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     e88:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     e8a:	91 05       	cpc	r25, r1
	brne	1b		;/
     e8c:	41 f7       	brne	.-48     	; 0xe5e <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     e8e:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     e90:	11 f4       	brne	.+4      	; 0xe96 <xitoa+0x62>
	push	r30		;
     e92:	ef 93       	push	r30
	inc	r31		;/
     e94:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     e96:	f2 17       	cp	r31, r18
	brcc	6f		;
     e98:	18 f4       	brcc	.+6      	; 0xea0 <xitoa+0x6c>
	push	r19		;
     e9a:	3f 93       	push	r19
	inc	r31		;
     e9c:	f3 95       	inc	r31
	rjmp	5b		;/
     e9e:	fb cf       	rjmp	.-10     	; 0xe96 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     ea0:	8f 91       	pop	r24
	rcall	xputc		;
     ea2:	b5 df       	rcall	.-150    	; 0xe0e <xputc>
	dec	r31		;
     ea4:	fa 95       	dec	r31
	brne	6b		;/
     ea6:	e1 f7       	brne	.-8      	; 0xea0 <xitoa+0x6c>

	ret
     ea8:	08 95       	ret

00000eaa <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     eaa:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     eac:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     eae:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     eb0:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     eb2:	21 f0       	breq	.+8      	; 0xebc <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     eb4:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     eb6:	19 f0       	breq	.+6      	; 0xebe <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     eb8:	aa df       	rcall	.-172    	; 0xe0e <xputc>
	rjmp	0b		;/
     eba:	f9 cf       	rjmp	.-14     	; 0xeae <xvprintf+0x4>
90:	ret
     ebc:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     ebe:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     ec0:	e8 94       	clt
	_LPMI	r21		;Get flags
     ec2:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     ec4:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     ec6:	c1 f3       	breq	.-16     	; 0xeb8 <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     ec8:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     eca:	11 f4       	brne	.+4      	; 0xed0 <xvprintf+0x26>
	set			;/
     ecc:	68 94       	set
22:	_LPMI	r21		;Get width
     ece:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     ed0:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     ed2:	48 f4       	brcc	.+18     	; 0xee6 <xvprintf+0x3c>
	subi	r21, '0'	;
     ed4:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     ed6:	90 f3       	brcs	.-28     	; 0xebc <xvprintf+0x12>
	lsl	r18		;
     ed8:	22 0f       	add	r18, r18
	mov	r0, r18		;
     eda:	02 2e       	mov	r0, r18
	lsl	r18		;
     edc:	22 0f       	add	r18, r18
	lsl	r18		;
     ede:	22 0f       	add	r18, r18
	add	r18, r0		;
     ee0:	20 0d       	add	r18, r0
	add	r18, r21	;
     ee2:	25 0f       	add	r18, r21
	rjmp	22b		;/
     ee4:	f4 cf       	rjmp	.-24     	; 0xece <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     ee6:	0e f4       	brtc	.+2      	; 0xeea <xvprintf+0x40>
	neg	r18		;
     ee8:	21 95       	neg	r18
25:	ld	r24, Y+		;
     eea:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     eec:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     eee:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     ef0:	19 f3       	breq	.-58     	; 0xeb8 <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     ef2:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     ef4:	29 f1       	breq	.+74     	; 0xf40 <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     ef6:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     ef8:	59 f1       	breq	.+86     	; 0xf50 <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     efa:	bc 01       	movw	r22, r24
	clr	r24		;
     efc:	88 27       	eor	r24, r24
	clr	r25		;
     efe:	99 27       	eor	r25, r25
	clt			;/
     f00:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     f02:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     f04:	21 f4       	brne	.+8      	; 0xf0e <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     f06:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     f08:	99 91       	ld	r25, Y+
	set			;
     f0a:	68 94       	set
	_LPMI	r21		;/
     f0c:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     f0e:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     f10:	39 f4       	brne	.+14     	; 0xf20 <xvprintf+0x76>
	ldi	r20, -10	;
     f12:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     f14:	7e f0       	brts	.+30     	; 0xf34 <xvprintf+0x8a>
	sbrs	r23, 7		;
     f16:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     f18:	0d c0       	rjmp	.+26     	; 0xf34 <xvprintf+0x8a>
	ldi	r24, -1		;
     f1a:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     f1c:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     f1e:	0a c0       	rjmp	.+20     	; 0xf34 <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     f20:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     f22:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     f24:	39 f0       	breq	.+14     	; 0xf34 <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     f26:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     f28:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     f2a:	21 f0       	breq	.+8      	; 0xf34 <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     f2c:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     f2e:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     f30:	09 f0       	breq	.+2      	; 0xf34 <xvprintf+0x8a>
	ret			;abort
     f32:	08 95       	ret
40:	push	ZH		;Output the value
     f34:	ff 93       	push	r31
	push	ZL		;
     f36:	ef 93       	push	r30
	rcall	xitoa		;
     f38:	7d df       	rcall	.-262    	; 0xe34 <xitoa>
42:	pop	ZL		;
     f3a:	ef 91       	pop	r30
	pop	ZH		;
     f3c:	ff 91       	pop	r31
	rjmp	0b		;/
     f3e:	b7 cf       	rjmp	.-146    	; 0xeae <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     f40:	ff 93       	push	r31
	push	ZL
     f42:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     f44:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     f46:	81 91       	ld	r24, Z+
	cpi	r24, 0
     f48:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     f4a:	b9 f3       	breq	.-18     	; 0xf3a <xvprintf+0x90>
	rcall	xputc
     f4c:	60 df       	rcall	.-320    	; 0xe0e <xputc>
	rjmp	51b
     f4e:	fb cf       	rjmp	.-10     	; 0xf46 <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     f50:	ff 93       	push	r31
	push	ZL
     f52:	ef 93       	push	r30
	rcall	xputs
     f54:	68 df       	rcall	.-304    	; 0xe26 <xputs>
	rjmp	42b
     f56:	f1 cf       	rjmp	.-30     	; 0xf3a <xvprintf+0x90>

00000f58 <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
     f58:	df 93       	push	r29
	push	YL
     f5a:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     f5c:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     f5e:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     f60:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     f62:	a3 df       	rcall	.-186    	; 0xeaa <xvprintf>
	pop	YL
     f64:	cf 91       	pop	r28
	pop	YH
     f66:	df 91       	pop	r29
	ret
     f68:	08 95       	ret

00000f6a <keymap_key_to_keycode>:


/* translates key to keycode */
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
    return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
     f6a:	9e e0       	ldi	r25, 0x0E	; 14
     f6c:	79 9f       	mul	r23, r25
     f6e:	f0 01       	movw	r30, r0
     f70:	11 24       	eor	r1, r1
     f72:	96 e4       	ldi	r25, 0x46	; 70
     f74:	89 9f       	mul	r24, r25
     f76:	e0 0d       	add	r30, r0
     f78:	f1 1d       	adc	r31, r1
     f7a:	11 24       	eor	r1, r1
     f7c:	e6 0f       	add	r30, r22
     f7e:	f1 1d       	adc	r31, r1
     f80:	ee 50       	subi	r30, 0x0E	; 14
     f82:	ff 4f       	sbci	r31, 0xFF	; 255
     f84:	84 91       	lpm	r24, Z
}
     f86:	08 95       	ret

00000f88 <keymap_fn_to_action>:

/* translates Fn keycode to action */
action_t keymap_fn_to_action(uint8_t keycode)
{
    return (action_t){ .code = pgm_read_word(&fn_actions[FN_INDEX(keycode)]) };
     f88:	e8 2f       	mov	r30, r24
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	ee 0f       	add	r30, r30
     f8e:	ff 1f       	adc	r31, r31
     f90:	e0 5a       	subi	r30, 0xA0	; 160
     f92:	f0 40       	sbci	r31, 0x00	; 0
}
     f94:	85 91       	lpm	r24, Z+
     f96:	94 91       	lpm	r25, Z
     f98:	08 95       	ret

00000f9a <unselect_rows>:
 * pin: D0  D1  D2  D3  D5
 */
static void unselect_rows(void)
{
    // Hi-Z(DDR:0, PORT:0) to unselect
    DDRD  &= ~0b00101111;
     f9a:	8a b1       	in	r24, 0x0a	; 10
     f9c:	80 7d       	andi	r24, 0xD0	; 208
     f9e:	8a b9       	out	0x0a, r24	; 10
    PORTD &= ~0b00101111;
     fa0:	8b b1       	in	r24, 0x0b	; 11
     fa2:	80 7d       	andi	r24, 0xD0	; 208
     fa4:	8b b9       	out	0x0b, r24	; 11
     fa6:	08 95       	ret

00000fa8 <matrix_init>:
}

void matrix_init(void)
{
    // initialize row and col
    unselect_rows();
     fa8:	0e 94 cd 07 	call	0xf9a	; 0xf9a <unselect_rows>
 * pin:                                 B7                      (Rev.B)
 */
static void  init_cols(void)
{
    // Input with pull-up(DDR:0, PORT:1)
    DDRF  &= ~(1<<0 | 1<<1);
     fac:	80 b3       	in	r24, 0x10	; 16
     fae:	8c 7f       	andi	r24, 0xFC	; 252
     fb0:	80 bb       	out	0x10, r24	; 16
    PORTF |=  (1<<0 | 1<<1);
     fb2:	81 b3       	in	r24, 0x11	; 17
     fb4:	83 60       	ori	r24, 0x03	; 3
     fb6:	81 bb       	out	0x11, r24	; 17
    DDRE  &= ~(1<<6);
     fb8:	6e 98       	cbi	0x0d, 6	; 13
    PORTE |=  (1<<6);
     fba:	76 9a       	sbi	0x0e, 6	; 14
    DDRD  &= ~(1<<7 | 1<<6 | 1<<4);
     fbc:	8a b1       	in	r24, 0x0a	; 10
     fbe:	8f 72       	andi	r24, 0x2F	; 47
     fc0:	8a b9       	out	0x0a, r24	; 10
    PORTD |=  (1<<7 | 1<<6 | 1<<4);
     fc2:	8b b1       	in	r24, 0x0b	; 11
     fc4:	80 6d       	ori	r24, 0xD0	; 208
     fc6:	8b b9       	out	0x0b, r24	; 11
    DDRC  &= ~(1<<7 | 1<<6);
     fc8:	87 b1       	in	r24, 0x07	; 7
     fca:	8f 73       	andi	r24, 0x3F	; 63
     fcc:	87 b9       	out	0x07, r24	; 7
    PORTC |=  (1<<7 | 1<<6);
     fce:	88 b1       	in	r24, 0x08	; 8
     fd0:	80 6c       	ori	r24, 0xC0	; 192
     fd2:	88 b9       	out	0x08, r24	; 8
    DDRB  &= ~(1<<7 | 1<<6 | 1<< 5 | 1<<4 | 1<<3 | 1<<1 | 1<<0);
     fd4:	84 b1       	in	r24, 0x04	; 4
     fd6:	84 70       	andi	r24, 0x04	; 4
     fd8:	84 b9       	out	0x04, r24	; 4
    PORTB |=  (1<<7 | 1<<6 | 1<< 5 | 1<<4 | 1<<3 | 1<<1 | 1<<0);
     fda:	85 b1       	in	r24, 0x05	; 5
     fdc:	8b 6f       	ori	r24, 0xFB	; 251
     fde:	85 b9       	out	0x05, r24	; 5
     fe0:	e4 e4       	ldi	r30, 0x44	; 68
     fe2:	f1 e0       	ldi	r31, 0x01	; 1
     fe4:	aa e3       	ldi	r26, 0x3A	; 58
     fe6:	b1 e0       	ldi	r27, 0x01	; 1
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
     fe8:	11 92       	st	Z+, r1
     fea:	11 92       	st	Z+, r1
        matrix_debouncing[i] = 0;
     fec:	1d 92       	st	X+, r1
     fee:	1d 92       	st	X+, r1
    // initialize row and col
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	ee 34       	cpi	r30, 0x4E	; 78
     ff4:	f8 07       	cpc	r31, r24
     ff6:	c1 f7       	brne	.-16     	; 0xfe8 <matrix_init+0x40>
        matrix[i] = 0;
        matrix_debouncing[i] = 0;
    }
}
     ff8:	08 95       	ret

00000ffa <matrix_scan>:

uint8_t matrix_scan(void)
{
     ffa:	bf 92       	push	r11
     ffc:	cf 92       	push	r12
     ffe:	df 92       	push	r13
    1000:	ef 92       	push	r14
    1002:	ff 92       	push	r15
    1004:	0f 93       	push	r16
    1006:	1f 93       	push	r17
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
    100c:	0a e3       	ldi	r16, 0x3A	; 58
    100e:	11 e0       	ldi	r17, 0x01	; 1
    1010:	e8 01       	movw	r28, r16
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    1012:	b1 2c       	mov	r11, r1
    1014:	dd 24       	eor	r13, r13
    1016:	d3 94       	inc	r13
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
            }
            debouncing = DEBOUNCE;
    1018:	a5 e0       	ldi	r26, 0x05	; 5
    101a:	ca 2e       	mov	r12, r26
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
    101c:	bb e4       	ldi	r27, 0x4B	; 75
    101e:	eb 2e       	mov	r14, r27
    1020:	b3 e0       	ldi	r27, 0x03	; 3
    1022:	fb 2e       	mov	r15, r27
}

static void select_row(uint8_t row)
{
    // Output low(DDR:1, PORT:0) to select
    switch (row) {
    1024:	82 e0       	ldi	r24, 0x02	; 2
    1026:	b8 16       	cp	r11, r24
    1028:	91 f0       	breq	.+36     	; 0x104e <matrix_scan+0x54>
    102a:	8b 15       	cp	r24, r11
    102c:	20 f0       	brcs	.+8      	; 0x1036 <matrix_scan+0x3c>
    102e:	91 e0       	ldi	r25, 0x01	; 1
    1030:	b9 16       	cp	r11, r25
    1032:	51 f0       	breq	.+20     	; 0x1048 <matrix_scan+0x4e>
    1034:	06 c0       	rjmp	.+12     	; 0x1042 <matrix_scan+0x48>
    1036:	a3 e0       	ldi	r26, 0x03	; 3
    1038:	ba 16       	cp	r11, r26
    103a:	61 f0       	breq	.+24     	; 0x1054 <matrix_scan+0x5a>
    103c:	b4 e0       	ldi	r27, 0x04	; 4
    103e:	bb 16       	cp	r11, r27
    1040:	61 f0       	breq	.+24     	; 0x105a <matrix_scan+0x60>
        case 0:
            DDRD  |= (1<<0);
    1042:	50 9a       	sbi	0x0a, 0	; 10
            PORTD &= ~(1<<0);
    1044:	58 98       	cbi	0x0b, 0	; 11
    1046:	0b c0       	rjmp	.+22     	; 0x105e <matrix_scan+0x64>
            break;
        case 1:
            DDRD  |= (1<<1);
    1048:	51 9a       	sbi	0x0a, 1	; 10
            PORTD &= ~(1<<1);
    104a:	59 98       	cbi	0x0b, 1	; 11
    104c:	08 c0       	rjmp	.+16     	; 0x105e <matrix_scan+0x64>
            break;
        case 2:
            DDRD  |= (1<<2);
    104e:	52 9a       	sbi	0x0a, 2	; 10
            PORTD &= ~(1<<2);
    1050:	5a 98       	cbi	0x0b, 2	; 11
    1052:	05 c0       	rjmp	.+10     	; 0x105e <matrix_scan+0x64>
            break;
        case 3:
            DDRD  |= (1<<3);
    1054:	53 9a       	sbi	0x0a, 3	; 10
            PORTD &= ~(1<<3);
    1056:	5b 98       	cbi	0x0b, 3	; 11
    1058:	02 c0       	rjmp	.+4      	; 0x105e <matrix_scan+0x64>
            break;
        case 4:
            DDRD  |= (1<<5);
    105a:	55 9a       	sbi	0x0a, 5	; 10
            PORTD &= ~(1<<5);
    105c:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    105e:	80 ea       	ldi	r24, 0xA0	; 160
    1060:	8a 95       	dec	r24
    1062:	f1 f7       	brne	.-4      	; 0x1060 <matrix_scan+0x66>
    PORTB |=  (1<<7 | 1<<6 | 1<< 5 | 1<<4 | 1<<3 | 1<<1 | 1<<0);
}

static matrix_row_t read_cols(void)
{
    return (PINF&(1<<0) ? 0 : (1<<0)) |
    1064:	8f b1       	in	r24, 0x0f	; 15
    1066:	81 70       	andi	r24, 0x01	; 1
    1068:	8d 25       	eor	r24, r13
    106a:	90 e0       	ldi	r25, 0x00	; 0
           (PINF&(1<<1) ? 0 : (1<<1)) |
    106c:	79 99       	sbic	0x0f, 1	; 15
    106e:	03 c0       	rjmp	.+6      	; 0x1076 <matrix_scan+0x7c>
    1070:	22 e0       	ldi	r18, 0x02	; 2
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	02 c0       	rjmp	.+4      	; 0x107a <matrix_scan+0x80>
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    PORTB |=  (1<<7 | 1<<6 | 1<< 5 | 1<<4 | 1<<3 | 1<<1 | 1<<0);
}

static matrix_row_t read_cols(void)
{
    return (PINF&(1<<0) ? 0 : (1<<0)) |
    107a:	82 2b       	or	r24, r18
    107c:	93 2b       	or	r25, r19
           (PINF&(1<<1) ? 0 : (1<<1)) |
           (PINE&(1<<6) ? 0 : (1<<2)) |
    107e:	66 99       	sbic	0x0c, 6	; 12
    1080:	03 c0       	rjmp	.+6      	; 0x1088 <matrix_scan+0x8e>
    1082:	24 e0       	ldi	r18, 0x04	; 4
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	02 c0       	rjmp	.+4      	; 0x108c <matrix_scan+0x92>
    1088:	20 e0       	ldi	r18, 0x00	; 0
    108a:	30 e0       	ldi	r19, 0x00	; 0
}

static matrix_row_t read_cols(void)
{
    return (PINF&(1<<0) ? 0 : (1<<0)) |
           (PINF&(1<<1) ? 0 : (1<<1)) |
    108c:	ac 01       	movw	r20, r24
    108e:	42 2b       	or	r20, r18
    1090:	53 2b       	or	r21, r19
           (PINE&(1<<6) ? 0 : (1<<2)) |
           (PINC&(1<<7) ? 0 : (1<<3)) |
    1092:	26 b1       	in	r18, 0x06	; 6
    1094:	33 27       	eor	r19, r19
    1096:	27 fd       	sbrc	r18, 7
    1098:	30 95       	com	r19
    109a:	20 95       	com	r18
    109c:	30 95       	com	r19
    109e:	c9 01       	movw	r24, r18
    10a0:	88 27       	eor	r24, r24
    10a2:	99 0f       	add	r25, r25
    10a4:	88 1f       	adc	r24, r24
    10a6:	99 27       	eor	r25, r25
    10a8:	f3 e0       	ldi	r31, 0x03	; 3
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	fa 95       	dec	r31
    10b0:	e1 f7       	brne	.-8      	; 0x10aa <matrix_scan+0xb0>

static matrix_row_t read_cols(void)
{
    return (PINF&(1<<0) ? 0 : (1<<0)) |
           (PINF&(1<<1) ? 0 : (1<<1)) |
           (PINE&(1<<6) ? 0 : (1<<2)) |
    10b2:	84 2b       	or	r24, r20
    10b4:	95 2b       	or	r25, r21
           (PINC&(1<<7) ? 0 : (1<<3)) |
           (PINC&(1<<6) ? 0 : (1<<4)) |
    10b6:	36 99       	sbic	0x06, 6	; 6
    10b8:	03 c0       	rjmp	.+6      	; 0x10c0 <matrix_scan+0xc6>
    10ba:	e0 e1       	ldi	r30, 0x10	; 16
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <matrix_scan+0xca>
    10c0:	e0 e0       	ldi	r30, 0x00	; 0
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
static matrix_row_t read_cols(void)
{
    return (PINF&(1<<0) ? 0 : (1<<0)) |
           (PINF&(1<<1) ? 0 : (1<<1)) |
           (PINE&(1<<6) ? 0 : (1<<2)) |
           (PINC&(1<<7) ? 0 : (1<<3)) |
    10c4:	8e 2b       	or	r24, r30
    10c6:	9f 2b       	or	r25, r31
           (PINC&(1<<6) ? 0 : (1<<4)) |
           (PINB&(1<<6) ? 0 : (1<<5)) |
    10c8:	1e 99       	sbic	0x03, 6	; 3
    10ca:	03 c0       	rjmp	.+6      	; 0x10d2 <matrix_scan+0xd8>
    10cc:	e0 e2       	ldi	r30, 0x20	; 32
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <matrix_scan+0xdc>
    10d2:	e0 e0       	ldi	r30, 0x00	; 0
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
{
    return (PINF&(1<<0) ? 0 : (1<<0)) |
           (PINF&(1<<1) ? 0 : (1<<1)) |
           (PINE&(1<<6) ? 0 : (1<<2)) |
           (PINC&(1<<7) ? 0 : (1<<3)) |
           (PINC&(1<<6) ? 0 : (1<<4)) |
    10d6:	8e 2b       	or	r24, r30
    10d8:	9f 2b       	or	r25, r31
           (PINB&(1<<6) ? 0 : (1<<5)) |
           (PIND&(1<<4) ? 0 : (1<<6)) |
    10da:	4c 99       	sbic	0x09, 4	; 9
    10dc:	03 c0       	rjmp	.+6      	; 0x10e4 <matrix_scan+0xea>
    10de:	60 e4       	ldi	r22, 0x40	; 64
    10e0:	70 e0       	ldi	r23, 0x00	; 0
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <matrix_scan+0xee>
    10e4:	60 e0       	ldi	r22, 0x00	; 0
    10e6:	70 e0       	ldi	r23, 0x00	; 0
    return (PINF&(1<<0) ? 0 : (1<<0)) |
           (PINF&(1<<1) ? 0 : (1<<1)) |
           (PINE&(1<<6) ? 0 : (1<<2)) |
           (PINC&(1<<7) ? 0 : (1<<3)) |
           (PINC&(1<<6) ? 0 : (1<<4)) |
           (PINB&(1<<6) ? 0 : (1<<5)) |
    10e8:	86 2b       	or	r24, r22
    10ea:	97 2b       	or	r25, r23
           (PIND&(1<<4) ? 0 : (1<<6)) |
           (PINB&(1<<1) ? 0 : (1<<7)) |
    10ec:	19 99       	sbic	0x03, 1	; 3
    10ee:	03 c0       	rjmp	.+6      	; 0x10f6 <matrix_scan+0xfc>
    10f0:	20 e8       	ldi	r18, 0x80	; 128
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <matrix_scan+0x100>
    10f6:	20 e0       	ldi	r18, 0x00	; 0
    10f8:	30 e0       	ldi	r19, 0x00	; 0
           (PINF&(1<<1) ? 0 : (1<<1)) |
           (PINE&(1<<6) ? 0 : (1<<2)) |
           (PINC&(1<<7) ? 0 : (1<<3)) |
           (PINC&(1<<6) ? 0 : (1<<4)) |
           (PINB&(1<<6) ? 0 : (1<<5)) |
           (PIND&(1<<4) ? 0 : (1<<6)) |
    10fa:	ac 01       	movw	r20, r24
    10fc:	42 2b       	or	r20, r18
    10fe:	53 2b       	or	r21, r19
           (PINB&(1<<1) ? 0 : (1<<7)) |
           ((PINB&(1<<0) && PINB&(1<<7)) ? 0 : (1<<8)) |     // Rev.A and B
    1100:	18 9b       	sbis	0x03, 0	; 3
    1102:	0e c0       	rjmp	.+28     	; 0x1120 <matrix_scan+0x126>
    1104:	23 b1       	in	r18, 0x03	; 3
    1106:	33 27       	eor	r19, r19
    1108:	27 fd       	sbrc	r18, 7
    110a:	30 95       	com	r19
    110c:	20 95       	com	r18
    110e:	30 95       	com	r19
    1110:	c9 01       	movw	r24, r18
    1112:	88 27       	eor	r24, r24
    1114:	99 0f       	add	r25, r25
    1116:	88 1f       	adc	r24, r24
    1118:	99 27       	eor	r25, r25
    111a:	98 2f       	mov	r25, r24
    111c:	88 27       	eor	r24, r24
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <matrix_scan+0x12a>
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	91 e0       	ldi	r25, 0x01	; 1
           (PINE&(1<<6) ? 0 : (1<<2)) |
           (PINC&(1<<7) ? 0 : (1<<3)) |
           (PINC&(1<<6) ? 0 : (1<<4)) |
           (PINB&(1<<6) ? 0 : (1<<5)) |
           (PIND&(1<<4) ? 0 : (1<<6)) |
           (PINB&(1<<1) ? 0 : (1<<7)) |
    1124:	84 2b       	or	r24, r20
    1126:	95 2b       	or	r25, r21
           ((PINB&(1<<0) && PINB&(1<<7)) ? 0 : (1<<8)) |     // Rev.A and B
           (PINB&(1<<5) ? 0 : (1<<9)) |
    1128:	1d 99       	sbic	0x03, 5	; 3
    112a:	03 c0       	rjmp	.+6      	; 0x1132 <matrix_scan+0x138>
    112c:	40 e0       	ldi	r20, 0x00	; 0
    112e:	52 e0       	ldi	r21, 0x02	; 2
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <matrix_scan+0x13c>
    1132:	40 e0       	ldi	r20, 0x00	; 0
    1134:	50 e0       	ldi	r21, 0x00	; 0
           (PINC&(1<<7) ? 0 : (1<<3)) |
           (PINC&(1<<6) ? 0 : (1<<4)) |
           (PINB&(1<<6) ? 0 : (1<<5)) |
           (PIND&(1<<4) ? 0 : (1<<6)) |
           (PINB&(1<<1) ? 0 : (1<<7)) |
           ((PINB&(1<<0) && PINB&(1<<7)) ? 0 : (1<<8)) |     // Rev.A and B
    1136:	84 2b       	or	r24, r20
    1138:	95 2b       	or	r25, r21
           (PINB&(1<<5) ? 0 : (1<<9)) |
           (PINB&(1<<4) ? 0 : (1<<10)) |
    113a:	1c 99       	sbic	0x03, 4	; 3
    113c:	03 c0       	rjmp	.+6      	; 0x1144 <matrix_scan+0x14a>
    113e:	40 e0       	ldi	r20, 0x00	; 0
    1140:	54 e0       	ldi	r21, 0x04	; 4
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <matrix_scan+0x14e>
    1144:	40 e0       	ldi	r20, 0x00	; 0
    1146:	50 e0       	ldi	r21, 0x00	; 0
           (PINC&(1<<6) ? 0 : (1<<4)) |
           (PINB&(1<<6) ? 0 : (1<<5)) |
           (PIND&(1<<4) ? 0 : (1<<6)) |
           (PINB&(1<<1) ? 0 : (1<<7)) |
           ((PINB&(1<<0) && PINB&(1<<7)) ? 0 : (1<<8)) |     // Rev.A and B
           (PINB&(1<<5) ? 0 : (1<<9)) |
    1148:	84 2b       	or	r24, r20
    114a:	95 2b       	or	r25, r21
           (PINB&(1<<4) ? 0 : (1<<10)) |
           (PIND&(1<<7) ? 0 : (1<<11)) |
    114c:	49 b1       	in	r20, 0x09	; 9
    114e:	55 27       	eor	r21, r21
    1150:	47 fd       	sbrc	r20, 7
    1152:	50 95       	com	r21
    1154:	40 95       	com	r20
    1156:	50 95       	com	r21
    1158:	9a 01       	movw	r18, r20
    115a:	22 27       	eor	r18, r18
    115c:	33 0f       	add	r19, r19
    115e:	22 1f       	adc	r18, r18
    1160:	33 27       	eor	r19, r19
    1162:	32 2f       	mov	r19, r18
    1164:	22 27       	eor	r18, r18
    1166:	33 0f       	add	r19, r19
    1168:	33 0f       	add	r19, r19
    116a:	33 0f       	add	r19, r19
           (PINB&(1<<6) ? 0 : (1<<5)) |
           (PIND&(1<<4) ? 0 : (1<<6)) |
           (PINB&(1<<1) ? 0 : (1<<7)) |
           ((PINB&(1<<0) && PINB&(1<<7)) ? 0 : (1<<8)) |     // Rev.A and B
           (PINB&(1<<5) ? 0 : (1<<9)) |
           (PINB&(1<<4) ? 0 : (1<<10)) |
    116c:	28 2b       	or	r18, r24
    116e:	39 2b       	or	r19, r25
           (PIND&(1<<7) ? 0 : (1<<11)) |
           (PIND&(1<<6) ? 0 : (1<<12)) |
    1170:	4e 99       	sbic	0x09, 6	; 9
    1172:	03 c0       	rjmp	.+6      	; 0x117a <matrix_scan+0x180>
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	90 e1       	ldi	r25, 0x10	; 16
    1178:	02 c0       	rjmp	.+4      	; 0x117e <matrix_scan+0x184>
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	90 e0       	ldi	r25, 0x00	; 0
           (PIND&(1<<4) ? 0 : (1<<6)) |
           (PINB&(1<<1) ? 0 : (1<<7)) |
           ((PINB&(1<<0) && PINB&(1<<7)) ? 0 : (1<<8)) |     // Rev.A and B
           (PINB&(1<<5) ? 0 : (1<<9)) |
           (PINB&(1<<4) ? 0 : (1<<10)) |
           (PIND&(1<<7) ? 0 : (1<<11)) |
    117e:	28 2b       	or	r18, r24
    1180:	39 2b       	or	r19, r25
           (PIND&(1<<6) ? 0 : (1<<12)) |
           (PINB&(1<<3) ? 0 : (1<<13));
    1182:	1b 99       	sbic	0x03, 3	; 3
    1184:	03 c0       	rjmp	.+6      	; 0x118c <matrix_scan+0x192>
    1186:	40 e0       	ldi	r20, 0x00	; 0
    1188:	50 e2       	ldi	r21, 0x20	; 32
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <matrix_scan+0x196>
    118c:	40 e0       	ldi	r20, 0x00	; 0
    118e:	50 e0       	ldi	r21, 0x00	; 0
           (PINB&(1<<1) ? 0 : (1<<7)) |
           ((PINB&(1<<0) && PINB&(1<<7)) ? 0 : (1<<8)) |     // Rev.A and B
           (PINB&(1<<5) ? 0 : (1<<9)) |
           (PINB&(1<<4) ? 0 : (1<<10)) |
           (PIND&(1<<7) ? 0 : (1<<11)) |
           (PIND&(1<<6) ? 0 : (1<<12)) |
    1190:	24 2b       	or	r18, r20
    1192:	35 2b       	or	r19, r21
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
    1194:	88 81       	ld	r24, Y
    1196:	99 81       	ldd	r25, Y+1	; 0x01
    1198:	82 17       	cp	r24, r18
    119a:	93 07       	cpc	r25, r19
    119c:	41 f1       	breq	.+80     	; 0x11ee <matrix_scan+0x1f4>
            matrix_debouncing[i] = cols;
    119e:	39 83       	std	Y+1, r19	; 0x01
    11a0:	28 83       	st	Y, r18
            if (debouncing) {
    11a2:	80 91 00 01 	lds	r24, 0x0100
    11a6:	88 23       	and	r24, r24
    11a8:	01 f1       	breq	.+64     	; 0x11ea <matrix_scan+0x1f0>
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
    11aa:	80 91 c7 01 	lds	r24, 0x01C7
    11ae:	80 ff       	sbrs	r24, 0
    11b0:	04 c0       	rjmp	.+8      	; 0x11ba <matrix_scan+0x1c0>
    11b2:	80 e5       	ldi	r24, 0x50	; 80
    11b4:	93 e0       	ldi	r25, 0x03	; 3
    11b6:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    11ba:	80 91 c7 01 	lds	r24, 0x01C7
    11be:	80 ff       	sbrs	r24, 0
    11c0:	0c c0       	rjmp	.+24     	; 0x11da <matrix_scan+0x1e0>
    11c2:	80 91 00 01 	lds	r24, 0x0100
    11c6:	1f 92       	push	r1
    11c8:	8f 93       	push	r24
    11ca:	ff 92       	push	r15
    11cc:	ef 92       	push	r14
    11ce:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	80 91 c7 01 	lds	r24, 0x01C7
    11de:	80 ff       	sbrs	r24, 0
    11e0:	04 c0       	rjmp	.+8      	; 0x11ea <matrix_scan+0x1f0>
    11e2:	89 e4       	ldi	r24, 0x49	; 73
    11e4:	93 e0       	ldi	r25, 0x03	; 3
    11e6:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
            }
            debouncing = DEBOUNCE;
    11ea:	c0 92 00 01 	sts	0x0100, r12
        }
        unselect_rows();
    11ee:	0e 94 cd 07 	call	0xf9a	; 0xf9a <unselect_rows>
    }
}

uint8_t matrix_scan(void)
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    11f2:	b3 94       	inc	r11
    11f4:	22 96       	adiw	r28, 0x02	; 2
    11f6:	95 e0       	ldi	r25, 0x05	; 5
    11f8:	b9 12       	cpse	r11, r25
    11fa:	14 cf       	rjmp	.-472    	; 0x1024 <matrix_scan+0x2a>
            debouncing = DEBOUNCE;
        }
        unselect_rows();
    }

    if (debouncing) {
    11fc:	80 91 00 01 	lds	r24, 0x0100
    1200:	88 23       	and	r24, r24
    1202:	c1 f0       	breq	.+48     	; 0x1234 <matrix_scan+0x23a>
        if (--debouncing) {
    1204:	81 50       	subi	r24, 0x01	; 1
    1206:	80 93 00 01 	sts	0x0100, r24
    120a:	88 23       	and	r24, r24
    120c:	39 f0       	breq	.+14     	; 0x121c <matrix_scan+0x222>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    120e:	af e9       	ldi	r26, 0x9F	; 159
    1210:	bf e0       	ldi	r27, 0x0F	; 15
    1212:	11 97       	sbiw	r26, 0x01	; 1
    1214:	f1 f7       	brne	.-4      	; 0x1212 <matrix_scan+0x218>
    1216:	00 c0       	rjmp	.+0      	; 0x1218 <matrix_scan+0x21e>
    1218:	00 00       	nop
    121a:	0c c0       	rjmp	.+24     	; 0x1234 <matrix_scan+0x23a>
    121c:	e4 e4       	ldi	r30, 0x44	; 68
    121e:	f1 e0       	ldi	r31, 0x01	; 1
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
                matrix[i] = matrix_debouncing[i];
    1220:	d8 01       	movw	r26, r16
    1222:	8d 91       	ld	r24, X+
    1224:	9d 91       	ld	r25, X+
    1226:	8d 01       	movw	r16, r26
    1228:	81 93       	st	Z+, r24
    122a:	91 93       	st	Z+, r25

    if (debouncing) {
        if (--debouncing) {
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    122c:	b1 e0       	ldi	r27, 0x01	; 1
    122e:	04 34       	cpi	r16, 0x44	; 68
    1230:	1b 07       	cpc	r17, r27
    1232:	b1 f7       	brne	.-20     	; 0x1220 <matrix_scan+0x226>
            }
        }
    }

    return 1;
}
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	df 91       	pop	r29
    1238:	cf 91       	pop	r28
    123a:	1f 91       	pop	r17
    123c:	0f 91       	pop	r16
    123e:	ff 90       	pop	r15
    1240:	ef 90       	pop	r14
    1242:	df 90       	pop	r13
    1244:	cf 90       	pop	r12
    1246:	bf 90       	pop	r11
    1248:	08 95       	ret

0000124a <matrix_get_row>:
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
    124a:	e8 2f       	mov	r30, r24
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	ee 0f       	add	r30, r30
    1250:	ff 1f       	adc	r31, r31
    1252:	ec 5b       	subi	r30, 0xBC	; 188
    1254:	fe 4f       	sbci	r31, 0xFE	; 254
}
    1256:	80 81       	ld	r24, Z
    1258:	91 81       	ldd	r25, Z+1	; 0x01
    125a:	08 95       	ret

0000125c <matrix_print>:

void matrix_print(void)
{
    125c:	cf 92       	push	r12
    125e:	df 92       	push	r13
    1260:	ef 92       	push	r14
    1262:	ff 92       	push	r15
    1264:	0f 93       	push	r16
    1266:	1f 93       	push	r17
    1268:	cf 93       	push	r28
    126a:	df 93       	push	r29
    print("\nr/c 0123456789ABCDEF\n");
    126c:	82 e3       	ldi	r24, 0x32	; 50
    126e:	93 e0       	ldi	r25, 0x03	; 3
    1270:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    1274:	84 e4       	ldi	r24, 0x44	; 68
    1276:	e8 2e       	mov	r14, r24
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	f8 2e       	mov	r15, r24
    127c:	c0 e0       	ldi	r28, 0x00	; 0
    127e:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    1280:	9d e2       	ldi	r25, 0x2D	; 45
    1282:	c9 2e       	mov	r12, r25
    1284:	93 e0       	ldi	r25, 0x03	; 3
    1286:	d9 2e       	mov	r13, r25
        pbin_reverse16(matrix_get_row(row));
    1288:	04 e2       	ldi	r16, 0x24	; 36
    128a:	13 e0       	ldi	r17, 0x03	; 3

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    128c:	df 93       	push	r29
    128e:	cf 93       	push	r28
    1290:	df 92       	push	r13
    1292:	cf 92       	push	r12
    1294:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
    1298:	8a e2       	ldi	r24, 0x2A	; 42
    129a:	93 e0       	ldi	r25, 0x03	; 3
    129c:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
        pbin_reverse16(matrix_get_row(row));
    12a0:	f7 01       	movw	r30, r14
    12a2:	81 91       	ld	r24, Z+
    12a4:	91 91       	ld	r25, Z+
    12a6:	7f 01       	movw	r14, r30
    12a8:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <bitrev16>
    12ac:	9f 93       	push	r25
    12ae:	8f 93       	push	r24
    12b0:	1f 93       	push	r17
    12b2:	0f 93       	push	r16
    12b4:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
        print("\n");
    12b8:	82 e2       	ldi	r24, 0x22	; 34
    12ba:	93 e0       	ldi	r25, 0x03	; 3
    12bc:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    12c0:	21 96       	adiw	r28, 0x01	; 1
}

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    12c2:	8d b7       	in	r24, 0x3d	; 61
    12c4:	9e b7       	in	r25, 0x3e	; 62
    12c6:	08 96       	adiw	r24, 0x08	; 8
    12c8:	0f b6       	in	r0, 0x3f	; 63
    12ca:	f8 94       	cli
    12cc:	9e bf       	out	0x3e, r25	; 62
    12ce:	0f be       	out	0x3f, r0	; 63
    12d0:	8d bf       	out	0x3d, r24	; 61
    12d2:	c5 30       	cpi	r28, 0x05	; 5
    12d4:	d1 05       	cpc	r29, r1
    12d6:	d1 f6       	brne	.-76     	; 0x128c <matrix_print+0x30>
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
        print("\n");
    }
}
    12d8:	df 91       	pop	r29
    12da:	cf 91       	pop	r28
    12dc:	1f 91       	pop	r17
    12de:	0f 91       	pop	r16
    12e0:	ff 90       	pop	r15
    12e2:	ef 90       	pop	r14
    12e4:	df 90       	pop	r13
    12e6:	cf 90       	pop	r12
    12e8:	08 95       	ret

000012ea <led_set>:
#include "led.h"


void led_set(uint8_t usb_led)
{
    if (usb_led & (1<<USB_LED_CAPS_LOCK)) {
    12ea:	81 ff       	sbrs	r24, 1
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <led_set+0x8>
        // output low
        DDRB |= (1<<2);
    12ee:	22 9a       	sbi	0x04, 2	; 4
    12f0:	01 c0       	rjmp	.+2      	; 0x12f4 <led_set+0xa>
        PORTB &= ~(1<<2);
    } else {
        // Hi-Z
        DDRB &= ~(1<<2);
    12f2:	22 98       	cbi	0x04, 2	; 4
        PORTB &= ~(1<<2);
    12f4:	2a 98       	cbi	0x05, 2	; 5
    12f6:	08 95       	ret

000012f8 <keyboard_leds>:
 * Host driver 
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    12f8:	80 91 61 01 	lds	r24, 0x0161
    12fc:	08 95       	ret

000012fe <sendchar>:
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);
    12fe:	9f b7       	in	r25, 0x3f	; 63
    1300:	f8 94       	cli
    1302:	10 92 50 01 	sts	0x0150, r1
    1306:	9f bf       	out	0x3f, r25	; 63

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1308:	90 91 dd 01 	lds	r25, 0x01DD
    130c:	94 30       	cpi	r25, 0x04	; 4
    130e:	09 f0       	breq	.+2      	; 0x1312 <sendchar+0x14>
    1310:	57 c0       	rjmp	.+174    	; 0x13c0 <sendchar+0xc2>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1312:	90 91 e9 00 	lds	r25, 0x00E9
    1316:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1318:	30 91 ec 00 	lds	r19, 0x00EC
    131c:	23 2f       	mov	r18, r19
    131e:	21 70       	andi	r18, 0x01	; 1
    1320:	30 fd       	sbrc	r19, 0
    1322:	20 e8       	ldi	r18, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1324:	92 2b       	or	r25, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1326:	24 e0       	ldi	r18, 0x04	; 4
    1328:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    132c:	20 91 eb 00 	lds	r18, 0x00EB
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1330:	20 ff       	sbrs	r18, 0
    1332:	43 c0       	rjmp	.+134    	; 0x13ba <sendchar+0xbc>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1334:	20 91 ee 00 	lds	r18, 0x00EE
    1338:	27 ff       	sbrs	r18, 7
    133a:	3f c0       	rjmp	.+126    	; 0x13ba <sendchar+0xbc>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
    133c:	20 91 4e 01 	lds	r18, 0x014E
    1340:	22 23       	and	r18, r18
    1342:	21 f0       	breq	.+8      	; 0x134c <sendchar+0x4e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1344:	20 91 e8 00 	lds	r18, 0x00E8
    1348:	25 ff       	sbrs	r18, 5
    134a:	37 c0       	rjmp	.+110    	; 0x13ba <sendchar+0xbc>
        goto ERROR_EXIT;
    }

    timeouted = false;
    134c:	10 92 4e 01 	sts	0x014E, r1

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
    1350:	26 e0       	ldi	r18, 0x06	; 6
    1352:	30 91 e8 00 	lds	r19, 0x00E8
    1356:	35 fd       	sbrc	r19, 5
    1358:	15 c0       	rjmp	.+42     	; 0x1384 <sendchar+0x86>
        if (USB_DeviceState != DEVICE_STATE_Configured) {
    135a:	30 91 dd 01 	lds	r19, 0x01DD
    135e:	34 30       	cpi	r19, 0x04	; 4
    1360:	61 f5       	brne	.+88     	; 0x13ba <sendchar+0xbc>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1362:	30 91 eb 00 	lds	r19, 0x00EB
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
    1366:	35 fd       	sbrc	r19, 5
    1368:	28 c0       	rjmp	.+80     	; 0x13ba <sendchar+0xbc>
    136a:	21 50       	subi	r18, 0x01	; 1
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
    136c:	21 f4       	brne	.+8      	; 0x1376 <sendchar+0x78>
            timeouted = true;
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	80 93 4e 01 	sts	0x014E, r24
            goto ERROR_EXIT;
    1374:	22 c0       	rjmp	.+68     	; 0x13ba <sendchar+0xbc>
    1376:	ef e9       	ldi	r30, 0x9F	; 159
    1378:	ff e0       	ldi	r31, 0x0F	; 15
    137a:	31 97       	sbiw	r30, 0x01	; 1
    137c:	f1 f7       	brne	.-4      	; 0x137a <sendchar+0x7c>
    137e:	00 c0       	rjmp	.+0      	; 0x1380 <sendchar+0x82>
    1380:	00 00       	nop
    1382:	e7 cf       	rjmp	.-50     	; 0x1352 <sendchar+0x54>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1384:	80 93 f1 00 	sts	0x00F1, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1388:	80 91 e8 00 	lds	r24, 0x00E8
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed()) {
    138c:	85 fd       	sbrc	r24, 5
    138e:	0a c0       	rjmp	.+20     	; 0x13a4 <sendchar+0xa6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1390:	80 91 e8 00 	lds	r24, 0x00E8
        while (!(Endpoint_IsINReady()));
    1394:	80 ff       	sbrs	r24, 0
    1396:	fc cf       	rjmp	.-8      	; 0x1390 <sendchar+0x92>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1398:	80 91 e8 00 	lds	r24, 0x00E8
    139c:	8e 77       	andi	r24, 0x7E	; 126
    139e:	80 93 e8 00 	sts	0x00E8, r24
    13a2:	06 c0       	rjmp	.+12     	; 0x13b0 <sendchar+0xb2>
        Endpoint_ClearIN();
    } else {
        CONSOLE_FLUSH_SET(true);
    13a4:	8f b7       	in	r24, 0x3f	; 63
    13a6:	f8 94       	cli
    13a8:	21 e0       	ldi	r18, 0x01	; 1
    13aa:	20 93 50 01 	sts	0x0150, r18
    13ae:	8f bf       	out	0x3f, r24	; 63
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13b0:	9f 70       	andi	r25, 0x0F	; 15
    13b2:	90 93 e9 00 	sts	0x00E9, r25
    }

    Endpoint_SelectEndpoint(ep);
    return 0;
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	08 95       	ret
    13ba:	9f 70       	andi	r25, 0x0F	; 15
    13bc:	90 93 e9 00 	sts	0x00E9, r25
    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);

    if (USB_DeviceState != DEVICE_STATE_Configured)
        return -1;
    13c0:	8f ef       	ldi	r24, 0xFF	; 255
    Endpoint_SelectEndpoint(ep);
    return 0;
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
    13c2:	08 95       	ret

000013c4 <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
    13c4:	cf 93       	push	r28
    13c6:	df 93       	push	r29
    13c8:	00 d0       	rcall	.+0      	; 0x13ca <send_consumer+0x6>
    13ca:	1f 92       	push	r1
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
    13d0:	9c 01       	movw	r18, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    13d2:	80 91 dd 01 	lds	r24, 0x01DD
    13d6:	84 30       	cpi	r24, 0x04	; 4
    13d8:	19 f5       	brne	.+70     	; 0x1420 <send_consumer+0x5c>
        return;

    report_extra_t r = {
    13da:	93 e0       	ldi	r25, 0x03	; 3
    13dc:	99 83       	std	Y+1, r25	; 0x01
    13de:	3b 83       	std	Y+3, r19	; 0x03
    13e0:	2a 83       	std	Y+2, r18	; 0x02
    13e2:	90 93 e9 00 	sts	0x00E9, r25
    13e6:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    13e8:	90 91 e8 00 	lds	r25, 0x00E8
    13ec:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    13ee:	95 fd       	sbrc	r25, 5
    13f0:	06 c0       	rjmp	.+12     	; 0x13fe <send_consumer+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13f2:	95 ed       	ldi	r25, 0xD5	; 213
    13f4:	9a 95       	dec	r25
    13f6:	f1 f7       	brne	.-4      	; 0x13f4 <send_consumer+0x30>
    13f8:	00 00       	nop
    13fa:	81 11       	cpse	r24, r1
    13fc:	f5 cf       	rjmp	.-22     	; 0x13e8 <send_consumer+0x24>
    13fe:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    1402:	85 ff       	sbrs	r24, 5
    1404:	0d c0       	rjmp	.+26     	; 0x1420 <send_consumer+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    1406:	40 e0       	ldi	r20, 0x00	; 0
    1408:	50 e0       	ldi	r21, 0x00	; 0
    140a:	63 e0       	ldi	r22, 0x03	; 3
    140c:	70 e0       	ldi	r23, 0x00	; 0
    140e:	ce 01       	movw	r24, r28
    1410:	01 96       	adiw	r24, 0x01	; 1
    1412:	0e 94 ae 0c 	call	0x195c	; 0x195c <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1416:	80 91 e8 00 	lds	r24, 0x00E8
    141a:	8e 77       	andi	r24, 0x7E	; 126
    141c:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	df 91       	pop	r29
    1428:	cf 91       	pop	r28
    142a:	08 95       	ret

0000142c <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
    142c:	cf 93       	push	r28
    142e:	df 93       	push	r29
    1430:	00 d0       	rcall	.+0      	; 0x1432 <send_system+0x6>
    1432:	1f 92       	push	r1
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1438:	20 91 dd 01 	lds	r18, 0x01DD
    143c:	24 30       	cpi	r18, 0x04	; 4
    143e:	21 f5       	brne	.+72     	; 0x1488 <send_system+0x5c>
        return;

    report_extra_t r = {
    1440:	22 e0       	ldi	r18, 0x02	; 2
    1442:	29 83       	std	Y+1, r18	; 0x01
    1444:	9b 83       	std	Y+3, r25	; 0x03
    1446:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1448:	83 e0       	ldi	r24, 0x03	; 3
    144a:	80 93 e9 00 	sts	0x00E9, r24
    144e:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1450:	90 91 e8 00 	lds	r25, 0x00E8
    1454:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1456:	95 fd       	sbrc	r25, 5
    1458:	06 c0       	rjmp	.+12     	; 0x1466 <send_system+0x3a>
    145a:	95 ed       	ldi	r25, 0xD5	; 213
    145c:	9a 95       	dec	r25
    145e:	f1 f7       	brne	.-4      	; 0x145c <send_system+0x30>
    1460:	00 00       	nop
    1462:	81 11       	cpse	r24, r1
    1464:	f5 cf       	rjmp	.-22     	; 0x1450 <send_system+0x24>
    1466:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    146a:	85 ff       	sbrs	r24, 5
    146c:	0d c0       	rjmp	.+26     	; 0x1488 <send_system+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    146e:	40 e0       	ldi	r20, 0x00	; 0
    1470:	50 e0       	ldi	r21, 0x00	; 0
    1472:	63 e0       	ldi	r22, 0x03	; 3
    1474:	70 e0       	ldi	r23, 0x00	; 0
    1476:	ce 01       	movw	r24, r28
    1478:	01 96       	adiw	r24, 0x01	; 1
    147a:	0e 94 ae 0c 	call	0x195c	; 0x195c <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    147e:	80 91 e8 00 	lds	r24, 0x00E8
    1482:	8e 77       	andi	r24, 0x7E	; 126
    1484:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	df 91       	pop	r29
    1490:	cf 91       	pop	r28
    1492:	08 95       	ret

00001494 <send_mouse>:
static void send_mouse(report_mouse_t *report)
{
#ifdef MOUSE_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1494:	20 91 dd 01 	lds	r18, 0x01DD
    1498:	24 30       	cpi	r18, 0x04	; 4
    149a:	f1 f4       	brne	.+60     	; 0x14d8 <send_mouse+0x44>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    149c:	22 e0       	ldi	r18, 0x02	; 2
    149e:	20 93 e9 00 	sts	0x00E9, r18
    14a2:	2f ef       	ldi	r18, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    14a4:	30 91 e8 00 	lds	r19, 0x00E8
    14a8:	21 50       	subi	r18, 0x01	; 1

    /* Select the Mouse Report Endpoint */
    Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    14aa:	35 fd       	sbrc	r19, 5
    14ac:	06 c0       	rjmp	.+12     	; 0x14ba <send_mouse+0x26>
    14ae:	35 ed       	ldi	r19, 0xD5	; 213
    14b0:	3a 95       	dec	r19
    14b2:	f1 f7       	brne	.-4      	; 0x14b0 <send_mouse+0x1c>
    14b4:	00 00       	nop
    14b6:	21 11       	cpse	r18, r1
    14b8:	f5 cf       	rjmp	.-22     	; 0x14a4 <send_mouse+0x10>
    14ba:	20 91 e8 00 	lds	r18, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    14be:	25 ff       	sbrs	r18, 5
    14c0:	0b c0       	rjmp	.+22     	; 0x14d8 <send_mouse+0x44>

    /* Write Mouse Report Data */
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    14c2:	40 e0       	ldi	r20, 0x00	; 0
    14c4:	50 e0       	ldi	r21, 0x00	; 0
    14c6:	65 e0       	ldi	r22, 0x05	; 5
    14c8:	70 e0       	ldi	r23, 0x00	; 0
    14ca:	0e 94 ae 0c 	call	0x195c	; 0x195c <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    14ce:	80 91 e8 00 	lds	r24, 0x00E8
    14d2:	8e 77       	andi	r24, 0x7E	; 126
    14d4:	80 93 e8 00 	sts	0x00E8, r24
    14d8:	08 95       	ret

000014da <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
    14da:	cf 93       	push	r28
    14dc:	df 93       	push	r29
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    14de:	20 91 dd 01 	lds	r18, 0x01DD
    14e2:	24 30       	cpi	r18, 0x04	; 4
    14e4:	09 f0       	breq	.+2      	; 0x14e8 <send_keyboard+0xe>
    14e6:	48 c0       	rjmp	.+144    	; 0x1578 <send_keyboard+0x9e>
    14e8:	ec 01       	movw	r28, r24
        return;

    /* Select the Keyboard Report Endpoint */
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    14ea:	80 91 0b 01 	lds	r24, 0x010B
    14ee:	88 23       	and	r24, r24
    14f0:	e1 f0       	breq	.+56     	; 0x152a <send_keyboard+0x50>
    14f2:	80 91 0c 01 	lds	r24, 0x010C
    14f6:	88 23       	and	r24, r24
    14f8:	c1 f0       	breq	.+48     	; 0x152a <send_keyboard+0x50>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    14fa:	85 e0       	ldi	r24, 0x05	; 5
    14fc:	80 93 e9 00 	sts	0x00E9, r24
    1500:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1502:	90 91 e8 00 	lds	r25, 0x00E8
    1506:	81 50       	subi	r24, 0x01	; 1
        /* Report protocol - NKRO */
        Endpoint_SelectEndpoint(NKRO_IN_EPNUM);

        /* Check if write ready for a polling interval around 1ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
    1508:	95 fd       	sbrc	r25, 5
    150a:	06 c0       	rjmp	.+12     	; 0x1518 <send_keyboard+0x3e>
    150c:	95 e1       	ldi	r25, 0x15	; 21
    150e:	9a 95       	dec	r25
    1510:	f1 f7       	brne	.-4      	; 0x150e <send_keyboard+0x34>
    1512:	00 00       	nop
    1514:	81 11       	cpse	r24, r1
    1516:	f5 cf       	rjmp	.-22     	; 0x1502 <send_keyboard+0x28>
    1518:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    151c:	85 ff       	sbrs	r24, 5
    151e:	2c c0       	rjmp	.+88     	; 0x1578 <send_keyboard+0x9e>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
    1520:	40 e0       	ldi	r20, 0x00	; 0
    1522:	50 e0       	ldi	r21, 0x00	; 0
    1524:	60 e1       	ldi	r22, 0x10	; 16
    1526:	70 e0       	ldi	r23, 0x00	; 0
    1528:	17 c0       	rjmp	.+46     	; 0x1558 <send_keyboard+0x7e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	80 93 e9 00 	sts	0x00E9, r24
    1530:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1532:	90 91 e8 00 	lds	r25, 0x00E8
    1536:	81 50       	subi	r24, 0x01	; 1
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1538:	95 fd       	sbrc	r25, 5
    153a:	06 c0       	rjmp	.+12     	; 0x1548 <send_keyboard+0x6e>
    153c:	95 ed       	ldi	r25, 0xD5	; 213
    153e:	9a 95       	dec	r25
    1540:	f1 f7       	brne	.-4      	; 0x153e <send_keyboard+0x64>
    1542:	00 00       	nop
    1544:	81 11       	cpse	r24, r1
    1546:	f5 cf       	rjmp	.-22     	; 0x1532 <send_keyboard+0x58>
    1548:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    154c:	85 ff       	sbrs	r24, 5
    154e:	14 c0       	rjmp	.+40     	; 0x1578 <send_keyboard+0x9e>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    1550:	40 e0       	ldi	r20, 0x00	; 0
    1552:	50 e0       	ldi	r21, 0x00	; 0
    1554:	68 e0       	ldi	r22, 0x08	; 8
    1556:	70 e0       	ldi	r23, 0x00	; 0
    1558:	ce 01       	movw	r24, r28
    155a:	0e 94 ae 0c 	call	0x195c	; 0x195c <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    155e:	80 91 e8 00 	lds	r24, 0x00E8
    1562:	8e 77       	andi	r24, 0x7E	; 126
    1564:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    1568:	80 e1       	ldi	r24, 0x10	; 16
    156a:	fe 01       	movw	r30, r28
    156c:	a1 e5       	ldi	r26, 0x51	; 81
    156e:	b1 e0       	ldi	r27, 0x01	; 1
    1570:	01 90       	ld	r0, Z+
    1572:	0d 92       	st	X+, r0
    1574:	8a 95       	dec	r24
    1576:	e1 f7       	brne	.-8      	; 0x1570 <send_keyboard+0x96>
}
    1578:	df 91       	pop	r29
    157a:	cf 91       	pop	r28
    157c:	08 95       	ret

0000157e <EVENT_USB_Device_Connect>:
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    157e:	80 e9       	ldi	r24, 0x90	; 144
    1580:	93 e0       	ldi	r25, 0x03	; 3
    1582:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    /* For battery powered device */
    if (!USB_IsInitialized) {
    1586:	80 91 dc 01 	lds	r24, 0x01DC
    158a:	81 11       	cpse	r24, r1
    158c:	09 c0       	rjmp	.+18     	; 0x15a0 <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    158e:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <USB_Disable>
        USB_Init();
    1592:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    1596:	80 91 e2 00 	lds	r24, 0x00E2
    159a:	84 60       	ori	r24, 0x04	; 4
    159c:	80 93 e2 00 	sts	0x00E2, r24
    15a0:	08 95       	ret

000015a2 <EVENT_USB_Device_Disconnect>:
    }
}

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    15a2:	8c e8       	ldi	r24, 0x8C	; 140
    15a4:	93 e0       	ldi	r25, 0x03	; 3
    15a6:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    /* For battery powered device */
    USB_IsInitialized = false;
    15aa:	10 92 dc 01 	sts	0x01DC, r1
    15ae:	08 95       	ret

000015b0 <EVENT_USB_Device_Reset>:
*/
}

void EVENT_USB_Device_Reset(void)
{
    print("[R]");
    15b0:	88 e8       	ldi	r24, 0x88	; 136
    15b2:	93 e0       	ldi	r25, 0x03	; 3
    15b4:	0c 94 13 07 	jmp	0xe26	; 0xe26 <xputs>

000015b8 <EVENT_USB_Device_Suspend>:
}

void EVENT_USB_Device_Suspend()
{
    print("[S]");
    15b8:	84 e8       	ldi	r24, 0x84	; 132
    15ba:	93 e0       	ldi	r25, 0x03	; 3
    15bc:	0c 94 13 07 	jmp	0xe26	; 0xe26 <xputs>

000015c0 <EVENT_USB_Device_WakeUp>:
#endif
}

void EVENT_USB_Device_WakeUp()
{
    print("[W]");
    15c0:	80 e8       	ldi	r24, 0x80	; 128
    15c2:	93 e0       	ldi	r25, 0x03	; 3
    15c4:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    suspend_wakeup_init();
    15c8:	0c 94 0e 1f 	jmp	0x3e1c	; 0x3e1c <suspend_wakeup_init>

000015cc <EVENT_USB_Device_StartOfFrame>:

// called every 1ms
void EVENT_USB_Device_StartOfFrame(void)
{
    static uint8_t count;
    if (++count % 50) return;
    15cc:	20 91 4f 01 	lds	r18, 0x014F
    15d0:	2f 5f       	subi	r18, 0xFF	; 255
    15d2:	82 2f       	mov	r24, r18
    15d4:	62 e3       	ldi	r22, 0x32	; 50
    15d6:	0e 94 77 2a 	call	0x54ee	; 0x54ee <__udivmodqi4>
    15da:	99 23       	and	r25, r25
    15dc:	19 f0       	breq	.+6      	; 0x15e4 <EVENT_USB_Device_StartOfFrame+0x18>
    15de:	20 93 4f 01 	sts	0x014F, r18
    15e2:	08 95       	ret
    count = 0;
    15e4:	10 92 4f 01 	sts	0x014F, r1

    if (!console_flush) return;
    15e8:	80 91 50 01 	lds	r24, 0x0150
    15ec:	88 23       	and	r24, r24
    15ee:	71 f1       	breq	.+92     	; 0x164c <EVENT_USB_Device_StartOfFrame+0x80>
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
    15f0:	80 91 dd 01 	lds	r24, 0x01DD
    15f4:	84 30       	cpi	r24, 0x04	; 4
    15f6:	41 f5       	brne	.+80     	; 0x1648 <EVENT_USB_Device_StartOfFrame+0x7c>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    15f8:	80 91 e9 00 	lds	r24, 0x00E9
    15fc:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    15fe:	20 91 ec 00 	lds	r18, 0x00EC
    1602:	92 2f       	mov	r25, r18
    1604:	91 70       	andi	r25, 0x01	; 1
    1606:	20 fd       	sbrc	r18, 0
    1608:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    160a:	89 2b       	or	r24, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    160c:	94 e0       	ldi	r25, 0x04	; 4
    160e:	90 93 e9 00 	sts	0x00E9, r25
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1612:	90 91 eb 00 	lds	r25, 0x00EB
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1616:	90 ff       	sbrs	r25, 0
    1618:	14 c0       	rjmp	.+40     	; 0x1642 <EVENT_USB_Device_StartOfFrame+0x76>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    161a:	90 91 ee 00 	lds	r25, 0x00EE
    161e:	97 ff       	sbrs	r25, 7
    1620:	10 c0       	rjmp	.+32     	; 0x1642 <EVENT_USB_Device_StartOfFrame+0x76>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1622:	90 91 e8 00 	lds	r25, 0x00E8
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
    1626:	95 ff       	sbrs	r25, 5
    1628:	03 c0       	rjmp	.+6      	; 0x1630 <EVENT_USB_Device_StartOfFrame+0x64>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    162a:	10 92 f1 00 	sts	0x00F1, r1
    162e:	f9 cf       	rjmp	.-14     	; 0x1622 <EVENT_USB_Device_StartOfFrame+0x56>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1630:	90 91 e8 00 	lds	r25, 0x00E8
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
    1634:	90 ff       	sbrs	r25, 0
    1636:	05 c0       	rjmp	.+10     	; 0x1642 <EVENT_USB_Device_StartOfFrame+0x76>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1638:	90 91 e8 00 	lds	r25, 0x00E8
    163c:	9e 77       	andi	r25, 0x7E	; 126
    163e:	90 93 e8 00 	sts	0x00E8, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1642:	8f 70       	andi	r24, 0x0F	; 15
    1644:	80 93 e9 00 	sts	0x00E9, r24
    if (++count % 50) return;
    count = 0;

    if (!console_flush) return;
    Console_Task();
    console_flush = false;
    1648:	10 92 50 01 	sts	0x0150, r1
    164c:	08 95       	ret

0000164e <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    164e:	42 e0       	ldi	r20, 0x02	; 2
    1650:	61 ec       	ldi	r22, 0xC1	; 193
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <Endpoint_ConfigureEndpoint_Prv>
    1658:	42 e0       	ldi	r20, 0x02	; 2
    165a:	61 ec       	ldi	r22, 0xC1	; 193
    165c:	82 e0       	ldi	r24, 0x02	; 2
    165e:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <Endpoint_ConfigureEndpoint_Prv>
    1662:	42 e0       	ldi	r20, 0x02	; 2
    1664:	61 ec       	ldi	r22, 0xC1	; 193
    1666:	83 e0       	ldi	r24, 0x03	; 3
    1668:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <Endpoint_ConfigureEndpoint_Prv>
    166c:	42 e2       	ldi	r20, 0x22	; 34
    166e:	61 ec       	ldi	r22, 0xC1	; 193
    1670:	84 e0       	ldi	r24, 0x04	; 4
    1672:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <Endpoint_ConfigureEndpoint_Prv>
    1676:	42 e1       	ldi	r20, 0x12	; 18
    1678:	61 ec       	ldi	r22, 0xC1	; 193
    167a:	85 e0       	ldi	r24, 0x05	; 5
    167c:	0c 94 bd 0d 	jmp	0x1b7a	; 0x1b7a <Endpoint_ConfigureEndpoint_Prv>

00001680 <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    1680:	80 91 df 01 	lds	r24, 0x01DF
    1684:	83 30       	cpi	r24, 0x03	; 3
    1686:	09 f4       	brne	.+2      	; 0x168a <EVENT_USB_Device_ControlRequest+0xa>
    1688:	55 c0       	rjmp	.+170    	; 0x1734 <EVENT_USB_Device_ControlRequest+0xb4>
    168a:	30 f4       	brcc	.+12     	; 0x1698 <EVENT_USB_Device_ControlRequest+0x18>
    168c:	81 30       	cpi	r24, 0x01	; 1
    168e:	71 f0       	breq	.+28     	; 0x16ac <EVENT_USB_Device_ControlRequest+0x2c>
    1690:	82 30       	cpi	r24, 0x02	; 2
    1692:	09 f4       	brne	.+2      	; 0x1696 <EVENT_USB_Device_ControlRequest+0x16>
    1694:	8e c0       	rjmp	.+284    	; 0x17b2 <EVENT_USB_Device_ControlRequest+0x132>
    1696:	08 95       	ret
    1698:	8a 30       	cpi	r24, 0x0A	; 10
    169a:	09 f4       	brne	.+2      	; 0x169e <EVENT_USB_Device_ControlRequest+0x1e>
    169c:	7a c0       	rjmp	.+244    	; 0x1792 <EVENT_USB_Device_ControlRequest+0x112>
    169e:	8b 30       	cpi	r24, 0x0B	; 11
    16a0:	09 f4       	brne	.+2      	; 0x16a4 <EVENT_USB_Device_ControlRequest+0x24>
    16a2:	60 c0       	rjmp	.+192    	; 0x1764 <EVENT_USB_Device_ControlRequest+0xe4>
    16a4:	89 30       	cpi	r24, 0x09	; 9
    16a6:	09 f0       	breq	.+2      	; 0x16aa <EVENT_USB_Device_ControlRequest+0x2a>
    16a8:	9c c0       	rjmp	.+312    	; 0x17e2 <EVENT_USB_Device_ControlRequest+0x162>
    16aa:	20 c0       	rjmp	.+64     	; 0x16ec <EVENT_USB_Device_ControlRequest+0x6c>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    16ac:	80 91 de 01 	lds	r24, 0x01DE
    16b0:	81 3a       	cpi	r24, 0xA1	; 161
    16b2:	09 f0       	breq	.+2      	; 0x16b6 <EVENT_USB_Device_ControlRequest+0x36>
    16b4:	96 c0       	rjmp	.+300    	; 0x17e2 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    16b6:	80 91 e8 00 	lds	r24, 0x00E8
    16ba:	87 7f       	andi	r24, 0xF7	; 247
    16bc:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    16c0:	80 91 e2 01 	lds	r24, 0x01E2
    16c4:	90 91 e3 01 	lds	r25, 0x01E3
    16c8:	89 2b       	or	r24, r25
    16ca:	21 f4       	brne	.+8      	; 0x16d4 <EVENT_USB_Device_ControlRequest+0x54>
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
                    ReportSize = sizeof(keyboard_report_sent);
    16cc:	60 e1       	ldi	r22, 0x10	; 16

                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
    16ce:	81 e5       	ldi	r24, 0x51	; 81
    16d0:	91 e0       	ldi	r25, 0x01	; 1
    16d2:	03 c0       	rjmp	.+6      	; 0x16da <EVENT_USB_Device_ControlRequest+0x5a>
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;
    16d4:	60 e0       	ldi	r22, 0x00	; 0
/** Event handler for the USB_ControlRequest event.
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	90 e0       	ldi	r25, 0x00	; 0
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    16da:	70 e0       	ldi	r23, 0x00	; 0
    16dc:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    16e0:	80 91 e8 00 	lds	r24, 0x00E8
    16e4:	8b 77       	andi	r24, 0x7B	; 123
    16e6:	80 93 e8 00 	sts	0x00E8, r24
    16ea:	08 95       	ret
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    16ec:	80 91 de 01 	lds	r24, 0x01DE
    16f0:	81 32       	cpi	r24, 0x21	; 33
    16f2:	09 f0       	breq	.+2      	; 0x16f6 <EVENT_USB_Device_ControlRequest+0x76>
    16f4:	76 c0       	rjmp	.+236    	; 0x17e2 <EVENT_USB_Device_ControlRequest+0x162>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    16f6:	80 91 e2 01 	lds	r24, 0x01E2
    16fa:	90 91 e3 01 	lds	r25, 0x01E3
    16fe:	00 97       	sbiw	r24, 0x00	; 0
    1700:	19 f0       	breq	.+6      	; 0x1708 <EVENT_USB_Device_ControlRequest+0x88>
    1702:	04 97       	sbiw	r24, 0x04	; 4
    1704:	09 f0       	breq	.+2      	; 0x1708 <EVENT_USB_Device_ControlRequest+0x88>
    1706:	6d c0       	rjmp	.+218    	; 0x17e2 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1708:	80 91 e8 00 	lds	r24, 0x00E8
    170c:	87 7f       	andi	r24, 0xF7	; 247
    170e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1712:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    1716:	82 fd       	sbrc	r24, 2
    1718:	05 c0       	rjmp	.+10     	; 0x1724 <EVENT_USB_Device_ControlRequest+0xa4>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    171a:	80 91 dd 01 	lds	r24, 0x01DD
    171e:	81 11       	cpse	r24, r1
    1720:	f8 cf       	rjmp	.-16     	; 0x1712 <EVENT_USB_Device_ControlRequest+0x92>
    1722:	5f c0       	rjmp	.+190    	; 0x17e2 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1724:	80 91 f1 00 	lds	r24, 0x00F1
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    1728:	80 93 61 01 	sts	0x0161, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    172c:	80 91 e8 00 	lds	r24, 0x00E8
    1730:	8b 77       	andi	r24, 0x7B	; 123
    1732:	53 c0       	rjmp	.+166    	; 0x17da <EVENT_USB_Device_ControlRequest+0x15a>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1734:	80 91 de 01 	lds	r24, 0x01DE
    1738:	81 3a       	cpi	r24, 0xA1	; 161
    173a:	09 f0       	breq	.+2      	; 0x173e <EVENT_USB_Device_ControlRequest+0xbe>
    173c:	52 c0       	rjmp	.+164    	; 0x17e2 <EVENT_USB_Device_ControlRequest+0x162>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    173e:	80 91 e2 01 	lds	r24, 0x01E2
    1742:	90 91 e3 01 	lds	r25, 0x01E3
    1746:	89 2b       	or	r24, r25
    1748:	09 f0       	breq	.+2      	; 0x174c <EVENT_USB_Device_ControlRequest+0xcc>
    174a:	4b c0       	rjmp	.+150    	; 0x17e2 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    174c:	80 91 e8 00 	lds	r24, 0x00E8
    1750:	87 7f       	andi	r24, 0xF7	; 247
    1752:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1756:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    175a:	80 ff       	sbrs	r24, 0
    175c:	fc cf       	rjmp	.-8      	; 0x1756 <EVENT_USB_Device_ControlRequest+0xd6>
                    Endpoint_Write_8(keyboard_protocol);
    175e:	80 91 0b 01 	lds	r24, 0x010B
    1762:	36 c0       	rjmp	.+108    	; 0x17d0 <EVENT_USB_Device_ControlRequest+0x150>
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1764:	80 91 de 01 	lds	r24, 0x01DE
    1768:	81 32       	cpi	r24, 0x21	; 33
    176a:	d9 f5       	brne	.+118    	; 0x17e2 <EVENT_USB_Device_ControlRequest+0x162>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    176c:	80 91 e2 01 	lds	r24, 0x01E2
    1770:	90 91 e3 01 	lds	r25, 0x01E3
    1774:	89 2b       	or	r24, r25
    1776:	a9 f5       	brne	.+106    	; 0x17e2 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1778:	80 91 e8 00 	lds	r24, 0x00E8
    177c:	87 7f       	andi	r24, 0xF7	; 247
    177e:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    1782:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <Endpoint_ClearStatusStage>

                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    1786:	80 91 e0 01 	lds	r24, 0x01E0
    178a:	80 93 0b 01 	sts	0x010B, r24
                    clear_keyboard();
    178e:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <clear_keyboard>
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1792:	80 91 de 01 	lds	r24, 0x01DE
    1796:	81 32       	cpi	r24, 0x21	; 33
    1798:	21 f5       	brne	.+72     	; 0x17e2 <EVENT_USB_Device_ControlRequest+0x162>
    179a:	80 91 e8 00 	lds	r24, 0x00E8
    179e:	87 7f       	andi	r24, 0xF7	; 247
    17a0:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    17a4:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    17a8:	80 91 e1 01 	lds	r24, 0x01E1
    17ac:	80 93 62 01 	sts	0x0162, r24
    17b0:	08 95       	ret
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    17b2:	80 91 de 01 	lds	r24, 0x01DE
    17b6:	81 3a       	cpi	r24, 0xA1	; 161
    17b8:	a1 f4       	brne	.+40     	; 0x17e2 <EVENT_USB_Device_ControlRequest+0x162>
    17ba:	80 91 e8 00 	lds	r24, 0x00E8
    17be:	87 7f       	andi	r24, 0xF7	; 247
    17c0:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    17c4:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    17c8:	80 ff       	sbrs	r24, 0
    17ca:	fc cf       	rjmp	.-8      	; 0x17c4 <EVENT_USB_Device_ControlRequest+0x144>
                Endpoint_Write_8(keyboard_idle);
    17cc:	80 91 62 01 	lds	r24, 0x0162
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    17d0:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    17d4:	80 91 e8 00 	lds	r24, 0x00E8
    17d8:	8e 77       	andi	r24, 0x7E	; 126
    17da:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    17de:	0c 94 f2 0d 	jmp	0x1be4	; 0x1be4 <Endpoint_ClearStatusStage>
    17e2:	08 95       	ret

000017e4 <main>:
 * main
 ******************************************************************************/
static void setup_mcu(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    17e4:	84 b7       	in	r24, 0x34	; 52
    17e6:	87 7f       	andi	r24, 0xF7	; 247
    17e8:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
    17ea:	88 e1       	ldi	r24, 0x18	; 24
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	80 93 60 00 	sts	0x0060, r24
    17f4:	10 92 60 00 	sts	0x0060, r1
    17f8:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	80 e8       	ldi	r24, 0x80	; 128
    17fe:	0f b6       	in	r0, 0x3f	; 63
    1800:	f8 94       	cli
    1802:	80 93 61 00 	sts	0x0061, r24
    1806:	90 93 61 00 	sts	0x0061, r25
    180a:	0f be       	out	0x3f, r0	; 63

int main(void)  __attribute__ ((weak));
int main(void)
{
    setup_mcu();
    keyboard_setup();
    180c:	0e 94 b7 11 	call	0x236e	; 0x236e <keyboard_setup>
}

static void setup_usb(void)
{
    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    1810:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <USB_Disable>

    USB_Init();
    1814:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <USB_Init>
    1818:	80 91 e2 00 	lds	r24, 0x00E2
    181c:	84 60       	ori	r24, 0x04	; 4
    181e:	80 93 e2 00 	sts	0x00E2, r24

    // for Console_Task
    USB_Device_EnableSOFEvents();
    print_set_sendchar(sendchar);
    1822:	8f e7       	ldi	r24, 0x7F	; 127
    1824:	99 e0       	ldi	r25, 0x09	; 9
    1826:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <print_set_sendchar>
int main(void)
{
    setup_mcu();
    keyboard_setup();
    setup_usb();
    sei();
    182a:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    182c:	80 91 dd 01 	lds	r24, 0x01DD
    1830:	84 30       	cpi	r24, 0x04	; 4
    1832:	e1 f7       	brne	.-8      	; 0x182c <main+0x48>
        ;
#else
        USB_USBTask();
#endif
    }
    print("USB configured.\n");
    1834:	8f e6       	ldi	r24, 0x6F	; 111
    1836:	93 e0       	ldi	r25, 0x03	; 3
    1838:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>

    /* init modules */
    keyboard_init();
    183c:	0e 94 b9 11 	call	0x2372	; 0x2372 <keyboard_init>
    host_set_driver(&lufa_driver);
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	91 e0       	ldi	r25, 0x01	; 1
    1844:	0e 94 25 11 	call	0x224a	; 0x224a <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    1848:	8e e5       	ldi	r24, 0x5E	; 94
    184a:	93 e0       	ldi	r25, 0x03	; 3
    184c:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    1850:	80 91 dd 01 	lds	r24, 0x01DD
    1854:	85 30       	cpi	r24, 0x05	; 5
    1856:	89 f4       	brne	.+34     	; 0x187a <main+0x96>
            print("[s]");
    1858:	8a e5       	ldi	r24, 0x5A	; 90
    185a:	93 e0       	ldi	r25, 0x03	; 3
    185c:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
            suspend_power_down();
    1860:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <suspend_power_down>
            if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    1864:	80 91 db 01 	lds	r24, 0x01DB
    1868:	88 23       	and	r24, r24
    186a:	91 f3       	breq	.-28     	; 0x1850 <main+0x6c>
    186c:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <suspend_wakeup_condition>
    1870:	88 23       	and	r24, r24
    1872:	71 f3       	breq	.-36     	; 0x1850 <main+0x6c>
                    USB_Device_SendRemoteWakeup();
    1874:	0e 94 98 0c 	call	0x1930	; 0x1930 <USB_Device_SendRemoteWakeup>
    1878:	eb cf       	rjmp	.-42     	; 0x1850 <main+0x6c>
            }
        }

        keyboard_task();
    187a:	0e 94 e7 11 	call	0x23ce	; 0x23ce <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
#endif
    }
    187e:	e8 cf       	rjmp	.-48     	; 0x1850 <main+0x6c>

00001880 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    1880:	29 2f       	mov	r18, r25
    1882:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    1884:	23 30       	cpi	r18, 0x03	; 3
    1886:	31 05       	cpc	r19, r1
    1888:	c9 f0       	breq	.+50     	; 0x18bc <CALLBACK_USB_GetDescriptor+0x3c>
    188a:	64 f4       	brge	.+24     	; 0x18a4 <CALLBACK_USB_GetDescriptor+0x24>
    188c:	21 30       	cpi	r18, 0x01	; 1
    188e:	31 05       	cpc	r19, r1
    1890:	81 f0       	breq	.+32     	; 0x18b2 <CALLBACK_USB_GetDescriptor+0x32>
    1892:	22 30       	cpi	r18, 0x02	; 2
    1894:	31 05       	cpc	r19, r1
    1896:	09 f0       	breq	.+2      	; 0x189a <CALLBACK_USB_GetDescriptor+0x1a>
    1898:	43 c0       	rjmp	.+134    	; 0x1920 <CALLBACK_USB_GetDescriptor+0xa0>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    189a:	8d e8       	ldi	r24, 0x8D	; 141
    189c:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
    189e:	28 eb       	ldi	r18, 0xB8	; 184
    18a0:	33 e0       	ldi	r19, 0x03	; 3
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
    18a2:	42 c0       	rjmp	.+132    	; 0x1928 <CALLBACK_USB_GetDescriptor+0xa8>
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    18a4:	21 32       	cpi	r18, 0x21	; 33
    18a6:	31 05       	cpc	r19, r1
    18a8:	f1 f0       	breq	.+60     	; 0x18e6 <CALLBACK_USB_GetDescriptor+0x66>
    18aa:	22 32       	cpi	r18, 0x22	; 34
    18ac:	31 05       	cpc	r19, r1
    18ae:	41 f1       	breq	.+80     	; 0x1900 <CALLBACK_USB_GetDescriptor+0x80>
    18b0:	37 c0       	rjmp	.+110    	; 0x1920 <CALLBACK_USB_GetDescriptor+0xa0>
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    18b2:	82 e1       	ldi	r24, 0x12	; 18
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
    18b6:	25 e4       	ldi	r18, 0x45	; 69
    18b8:	34 e0       	ldi	r19, 0x04	; 4
    18ba:	36 c0       	rjmp	.+108    	; 0x1928 <CALLBACK_USB_GetDescriptor+0xa8>
    18bc:	99 27       	eor	r25, r25
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    18be:	81 30       	cpi	r24, 0x01	; 1
    18c0:	91 05       	cpc	r25, r1
    18c2:	41 f0       	breq	.+16     	; 0x18d4 <CALLBACK_USB_GetDescriptor+0x54>
    18c4:	82 30       	cpi	r24, 0x02	; 2
    18c6:	91 05       	cpc	r25, r1
    18c8:	41 f0       	breq	.+16     	; 0x18da <CALLBACK_USB_GetDescriptor+0x5a>
    18ca:	89 2b       	or	r24, r25
    18cc:	49 f5       	brne	.+82     	; 0x1920 <CALLBACK_USB_GetDescriptor+0xa0>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    18ce:	e4 eb       	ldi	r30, 0xB4	; 180
    18d0:	f3 e0       	ldi	r31, 0x03	; 3
    18d2:	05 c0       	rjmp	.+10     	; 0x18de <CALLBACK_USB_GetDescriptor+0x5e>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    18d4:	e0 ea       	ldi	r30, 0xA0	; 160
    18d6:	f3 e0       	ldi	r31, 0x03	; 3
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <CALLBACK_USB_GetDescriptor+0x5e>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    18da:	e4 e9       	ldi	r30, 0x94	; 148
    18dc:	f3 e0       	ldi	r31, 0x03	; 3
    18de:	84 91       	lpm	r24, Z
    18e0:	90 e0       	ldi	r25, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
    18e2:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
    18e4:	21 c0       	rjmp	.+66     	; 0x1928 <CALLBACK_USB_GetDescriptor+0xa8>
    18e6:	65 30       	cpi	r22, 0x05	; 5
    18e8:	d8 f4       	brcc	.+54     	; 0x1920 <CALLBACK_USB_GetDescriptor+0xa0>
    18ea:	e6 2f       	mov	r30, r22
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	ee 0f       	add	r30, r30
    18f0:	ff 1f       	adc	r31, r31
    18f2:	ec 5d       	subi	r30, 0xDC	; 220
    18f4:	fe 4f       	sbci	r31, 0xFE	; 254
    18f6:	20 81       	ld	r18, Z
    18f8:	31 81       	ldd	r19, Z+1	; 0x01
    18fa:	89 e0       	ldi	r24, 0x09	; 9
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	14 c0       	rjmp	.+40     	; 0x1928 <CALLBACK_USB_GetDescriptor+0xa8>
    1900:	65 30       	cpi	r22, 0x05	; 5
    1902:	70 f4       	brcc	.+28     	; 0x1920 <CALLBACK_USB_GetDescriptor+0xa0>
    1904:	70 e0       	ldi	r23, 0x00	; 0
    1906:	fb 01       	movw	r30, r22
    1908:	ee 0f       	add	r30, r30
    190a:	ff 1f       	adc	r31, r31
    190c:	e6 5e       	subi	r30, 0xE6	; 230
    190e:	fe 4f       	sbci	r31, 0xFE	; 254
    1910:	20 81       	ld	r18, Z
    1912:	31 81       	ldd	r19, Z+1	; 0x01
    1914:	fb 01       	movw	r30, r22
    1916:	eb 5e       	subi	r30, 0xEB	; 235
    1918:	fe 4f       	sbci	r31, 0xFE	; 254
    191a:	80 81       	ld	r24, Z
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	04 c0       	rjmp	.+8      	; 0x1928 <CALLBACK_USB_GetDescriptor+0xa8>
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    1928:	fa 01       	movw	r30, r20
    192a:	31 83       	std	Z+1, r19	; 0x01
    192c:	20 83       	st	Z, r18
    return Size;
}
    192e:	08 95       	ret

00001930 <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1930:	80 e1       	ldi	r24, 0x10	; 16
    1932:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1934:	82 e1       	ldi	r24, 0x12	; 18
    1936:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    1938:	09 b4       	in	r0, 0x29	; 41
    193a:	00 fe       	sbrs	r0, 0
    193c:	fd cf       	rjmp	.-6      	; 0x1938 <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    193e:	80 91 d8 00 	lds	r24, 0x00D8
    1942:	8f 7d       	andi	r24, 0xDF	; 223
    1944:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    1948:	80 91 e0 00 	lds	r24, 0x00E0
    194c:	82 60       	ori	r24, 0x02	; 2
    194e:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
    1952:	80 91 e0 00 	lds	r24, 0x00E0
    1956:	81 fd       	sbrc	r24, 1
    1958:	fc cf       	rjmp	.-8      	; 0x1952 <USB_Device_SendRemoteWakeup+0x22>
}
    195a:	08 95       	ret

0000195c <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    195c:	cf 92       	push	r12
    195e:	df 92       	push	r13
    1960:	ef 92       	push	r14
    1962:	ff 92       	push	r15
    1964:	0f 93       	push	r16
    1966:	1f 93       	push	r17
    1968:	cf 93       	push	r28
    196a:	df 93       	push	r29
    196c:	ec 01       	movw	r28, r24
    196e:	8b 01       	movw	r16, r22
    1970:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1972:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <Endpoint_WaitUntilReady>
    1976:	81 11       	cpse	r24, r1
    1978:	33 c0       	rjmp	.+102    	; 0x19e0 <Endpoint_Write_Stream_LE+0x84>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    197a:	c1 14       	cp	r12, r1
    197c:	d1 04       	cpc	r13, r1
    197e:	39 f0       	breq	.+14     	; 0x198e <Endpoint_Write_Stream_LE+0x32>
	{
		Length -= *BytesProcessed;
    1980:	f6 01       	movw	r30, r12
    1982:	80 81       	ld	r24, Z
    1984:	91 81       	ldd	r25, Z+1	; 0x01
    1986:	08 1b       	sub	r16, r24
    1988:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    198a:	c8 0f       	add	r28, r24
    198c:	d9 1f       	adc	r29, r25

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    198e:	e1 2c       	mov	r14, r1
    1990:	f1 2c       	mov	r15, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1992:	01 15       	cp	r16, r1
    1994:	11 05       	cpc	r17, r1
    1996:	19 f1       	breq	.+70     	; 0x19de <Endpoint_Write_Stream_LE+0x82>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1998:	80 91 e8 00 	lds	r24, 0x00E8
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    199c:	85 fd       	sbrc	r24, 5
    199e:	16 c0       	rjmp	.+44     	; 0x19cc <Endpoint_Write_Stream_LE+0x70>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    19a0:	80 91 e8 00 	lds	r24, 0x00E8
    19a4:	8e 77       	andi	r24, 0x7E	; 126
    19a6:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    19aa:	c1 14       	cp	r12, r1
    19ac:	d1 04       	cpc	r13, r1
    19ae:	49 f0       	breq	.+18     	; 0x19c2 <Endpoint_Write_Stream_LE+0x66>
			{
				*BytesProcessed += BytesInTransfer;
    19b0:	f6 01       	movw	r30, r12
    19b2:	80 81       	ld	r24, Z
    19b4:	91 81       	ldd	r25, Z+1	; 0x01
    19b6:	e8 0e       	add	r14, r24
    19b8:	f9 1e       	adc	r15, r25
    19ba:	f1 82       	std	Z+1, r15	; 0x01
    19bc:	e0 82       	st	Z, r14
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    19be:	85 e0       	ldi	r24, 0x05	; 5
    19c0:	0f c0       	rjmp	.+30     	; 0x19e0 <Endpoint_Write_Stream_LE+0x84>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    19c2:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <Endpoint_WaitUntilReady>
    19c6:	88 23       	and	r24, r24
    19c8:	21 f3       	breq	.-56     	; 0x1992 <Endpoint_Write_Stream_LE+0x36>
    19ca:	0a c0       	rjmp	.+20     	; 0x19e0 <Endpoint_Write_Stream_LE+0x84>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    19cc:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    19ce:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    19d2:	01 50       	subi	r16, 0x01	; 1
    19d4:	11 09       	sbc	r17, r1
			BytesInTransfer++;
    19d6:	ff ef       	ldi	r31, 0xFF	; 255
    19d8:	ef 1a       	sub	r14, r31
    19da:	ff 0a       	sbc	r15, r31
    19dc:	da cf       	rjmp	.-76     	; 0x1992 <Endpoint_Write_Stream_LE+0x36>
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    19de:	80 e0       	ldi	r24, 0x00	; 0
}
    19e0:	df 91       	pop	r29
    19e2:	cf 91       	pop	r28
    19e4:	1f 91       	pop	r17
    19e6:	0f 91       	pop	r16
    19e8:	ff 90       	pop	r15
    19ea:	ef 90       	pop	r14
    19ec:	df 90       	pop	r13
    19ee:	cf 90       	pop	r12
    19f0:	08 95       	ret

000019f2 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    19f2:	20 91 e4 01 	lds	r18, 0x01E4
    19f6:	30 91 e5 01 	lds	r19, 0x01E5
    19fa:	26 17       	cp	r18, r22
    19fc:	37 07       	cpc	r19, r23
    19fe:	48 f0       	brcs	.+18     	; 0x1a12 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1a00:	61 15       	cp	r22, r1
    1a02:	71 05       	cpc	r23, r1
    1a04:	39 f4       	brne	.+14     	; 0x1a14 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a06:	20 91 e8 00 	lds	r18, 0x00E8
    1a0a:	2e 77       	andi	r18, 0x7E	; 126
    1a0c:	20 93 e8 00 	sts	0x00E8, r18
    1a10:	01 c0       	rjmp	.+2      	; 0x1a14 <Endpoint_Write_Control_Stream_LE+0x22>
    1a12:	b9 01       	movw	r22, r18
    1a14:	40 e0       	ldi	r20, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1a16:	61 15       	cp	r22, r1
    1a18:	71 05       	cpc	r23, r1
    1a1a:	a9 f1       	breq	.+106    	; 0x1a86 <Endpoint_Write_Control_Stream_LE+0x94>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a1c:	20 91 dd 01 	lds	r18, 0x01DD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a20:	22 23       	and	r18, r18
    1a22:	09 f4       	brne	.+2      	; 0x1a26 <Endpoint_Write_Control_Stream_LE+0x34>
    1a24:	43 c0       	rjmp	.+134    	; 0x1aac <Endpoint_Write_Control_Stream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a26:	25 30       	cpi	r18, 0x05	; 5
    1a28:	09 f4       	brne	.+2      	; 0x1a2c <Endpoint_Write_Control_Stream_LE+0x3a>
    1a2a:	42 c0       	rjmp	.+132    	; 0x1ab0 <Endpoint_Write_Control_Stream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a2c:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1a30:	23 fd       	sbrc	r18, 3
    1a32:	40 c0       	rjmp	.+128    	; 0x1ab4 <Endpoint_Write_Control_Stream_LE+0xc2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a34:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1a38:	22 fd       	sbrc	r18, 2
    1a3a:	32 c0       	rjmp	.+100    	; 0x1aa0 <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a3c:	20 91 e8 00 	lds	r18, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1a40:	20 ff       	sbrs	r18, 0
    1a42:	e9 cf       	rjmp	.-46     	; 0x1a16 <Endpoint_Write_Control_Stream_LE+0x24>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1a44:	40 91 f3 00 	lds	r20, 0x00F3
    1a48:	20 91 f2 00 	lds	r18, 0x00F2
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	34 2b       	or	r19, r20
    1a50:	fc 01       	movw	r30, r24
    1a52:	cf 01       	movw	r24, r30
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1a54:	61 15       	cp	r22, r1
    1a56:	71 05       	cpc	r23, r1
    1a58:	59 f0       	breq	.+22     	; 0x1a70 <Endpoint_Write_Control_Stream_LE+0x7e>
    1a5a:	28 30       	cpi	r18, 0x08	; 8
    1a5c:	31 05       	cpc	r19, r1
    1a5e:	40 f4       	brcc	.+16     	; 0x1a70 <Endpoint_Write_Control_Stream_LE+0x7e>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1a60:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1a62:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1a66:	61 50       	subi	r22, 0x01	; 1
    1a68:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1a6a:	2f 5f       	subi	r18, 0xFF	; 255
    1a6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a6e:	f1 cf       	rjmp	.-30     	; 0x1a52 <Endpoint_Write_Control_Stream_LE+0x60>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1a70:	41 e0       	ldi	r20, 0x01	; 1
    1a72:	28 30       	cpi	r18, 0x08	; 8
    1a74:	31 05       	cpc	r19, r1
    1a76:	09 f0       	breq	.+2      	; 0x1a7a <Endpoint_Write_Control_Stream_LE+0x88>
    1a78:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a7a:	20 91 e8 00 	lds	r18, 0x00E8
    1a7e:	2e 77       	andi	r18, 0x7E	; 126
    1a80:	20 93 e8 00 	sts	0x00E8, r18
    1a84:	c8 cf       	rjmp	.-112    	; 0x1a16 <Endpoint_Write_Control_Stream_LE+0x24>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1a86:	41 11       	cpse	r20, r1
    1a88:	c9 cf       	rjmp	.-110    	; 0x1a1c <Endpoint_Write_Control_Stream_LE+0x2a>
    1a8a:	0a c0       	rjmp	.+20     	; 0x1aa0 <Endpoint_Write_Control_Stream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a8c:	80 91 dd 01 	lds	r24, 0x01DD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a90:	88 23       	and	r24, r24
    1a92:	61 f0       	breq	.+24     	; 0x1aac <Endpoint_Write_Control_Stream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a94:	85 30       	cpi	r24, 0x05	; 5
    1a96:	61 f0       	breq	.+24     	; 0x1ab0 <Endpoint_Write_Control_Stream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a98:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1a9c:	83 fd       	sbrc	r24, 3
    1a9e:	0a c0       	rjmp	.+20     	; 0x1ab4 <Endpoint_Write_Control_Stream_LE+0xc2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1aa0:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1aa4:	82 ff       	sbrs	r24, 2
    1aa6:	f2 cf       	rjmp	.-28     	; 0x1a8c <Endpoint_Write_Control_Stream_LE+0x9a>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1aac:	82 e0       	ldi	r24, 0x02	; 2
    1aae:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1ab0:	83 e0       	ldi	r24, 0x03	; 3
    1ab2:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1ab6:	08 95       	ret

00001ab8 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1ab8:	20 91 e4 01 	lds	r18, 0x01E4
    1abc:	30 91 e5 01 	lds	r19, 0x01E5
    1ac0:	26 17       	cp	r18, r22
    1ac2:	37 07       	cpc	r19, r23
    1ac4:	48 f0       	brcs	.+18     	; 0x1ad8 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1ac6:	61 15       	cp	r22, r1
    1ac8:	71 05       	cpc	r23, r1
    1aca:	39 f4       	brne	.+14     	; 0x1ada <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1acc:	20 91 e8 00 	lds	r18, 0x00E8
    1ad0:	2e 77       	andi	r18, 0x7E	; 126
    1ad2:	20 93 e8 00 	sts	0x00E8, r18
    1ad6:	01 c0       	rjmp	.+2      	; 0x1ada <Endpoint_Write_Control_PStream_LE+0x22>
    1ad8:	b9 01       	movw	r22, r18
    1ada:	fc 01       	movw	r30, r24
    1adc:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1ade:	61 15       	cp	r22, r1
    1ae0:	71 05       	cpc	r23, r1
    1ae2:	91 f1       	breq	.+100    	; 0x1b48 <Endpoint_Write_Control_PStream_LE+0x90>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1ae4:	80 91 dd 01 	lds	r24, 0x01DD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1ae8:	88 23       	and	r24, r24
    1aea:	09 f4       	brne	.+2      	; 0x1aee <Endpoint_Write_Control_PStream_LE+0x36>
    1aec:	40 c0       	rjmp	.+128    	; 0x1b6e <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1aee:	85 30       	cpi	r24, 0x05	; 5
    1af0:	09 f4       	brne	.+2      	; 0x1af4 <Endpoint_Write_Control_PStream_LE+0x3c>
    1af2:	3f c0       	rjmp	.+126    	; 0x1b72 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1af4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1af8:	83 fd       	sbrc	r24, 3
    1afa:	3d c0       	rjmp	.+122    	; 0x1b76 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1afc:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1b00:	82 fd       	sbrc	r24, 2
    1b02:	2f c0       	rjmp	.+94     	; 0x1b62 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b04:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1b08:	80 ff       	sbrs	r24, 0
    1b0a:	e9 cf       	rjmp	.-46     	; 0x1ade <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1b0c:	20 91 f3 00 	lds	r18, 0x00F3
    1b10:	80 91 f2 00 	lds	r24, 0x00F2
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1b18:	61 15       	cp	r22, r1
    1b1a:	71 05       	cpc	r23, r1
    1b1c:	59 f0       	breq	.+22     	; 0x1b34 <Endpoint_Write_Control_PStream_LE+0x7c>
    1b1e:	88 30       	cpi	r24, 0x08	; 8
    1b20:	91 05       	cpc	r25, r1
    1b22:	40 f4       	brcc	.+16     	; 0x1b34 <Endpoint_Write_Control_PStream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1b24:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1b26:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1b2a:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1b2c:	61 50       	subi	r22, 0x01	; 1
    1b2e:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1b30:	01 96       	adiw	r24, 0x01	; 1
    1b32:	f2 cf       	rjmp	.-28     	; 0x1b18 <Endpoint_Write_Control_PStream_LE+0x60>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1b34:	21 e0       	ldi	r18, 0x01	; 1
    1b36:	08 97       	sbiw	r24, 0x08	; 8
    1b38:	09 f0       	breq	.+2      	; 0x1b3c <Endpoint_Write_Control_PStream_LE+0x84>
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b3c:	80 91 e8 00 	lds	r24, 0x00E8
    1b40:	8e 77       	andi	r24, 0x7E	; 126
    1b42:	80 93 e8 00 	sts	0x00E8, r24
    1b46:	cb cf       	rjmp	.-106    	; 0x1ade <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1b48:	21 11       	cpse	r18, r1
    1b4a:	cc cf       	rjmp	.-104    	; 0x1ae4 <Endpoint_Write_Control_PStream_LE+0x2c>
    1b4c:	0a c0       	rjmp	.+20     	; 0x1b62 <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1b4e:	80 91 dd 01 	lds	r24, 0x01DD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1b52:	88 23       	and	r24, r24
    1b54:	61 f0       	breq	.+24     	; 0x1b6e <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1b56:	85 30       	cpi	r24, 0x05	; 5
    1b58:	61 f0       	breq	.+24     	; 0x1b72 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1b5a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1b5e:	83 fd       	sbrc	r24, 3
    1b60:	0a c0       	rjmp	.+20     	; 0x1b76 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b62:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1b66:	82 ff       	sbrs	r24, 2
    1b68:	f2 cf       	rjmp	.-28     	; 0x1b4e <Endpoint_Write_Control_PStream_LE+0x96>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1b6e:	82 e0       	ldi	r24, 0x02	; 2
    1b70:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1b72:	83 e0       	ldi	r24, 0x03	; 3
    1b74:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1b76:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1b78:	08 95       	ret

00001b7a <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1b7a:	98 2f       	mov	r25, r24
    1b7c:	97 30       	cpi	r25, 0x07	; 7
    1b7e:	58 f5       	brcc	.+86     	; 0x1bd6 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b80:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    1b84:	98 17       	cp	r25, r24
    1b86:	39 f0       	breq	.+14     	; 0x1b96 <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    1b88:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    1b8c:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    1b90:	50 91 f0 00 	lds	r21, 0x00F0
    1b94:	03 c0       	rjmp	.+6      	; 0x1b9c <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    1b96:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    1b98:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    1b9a:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    1b9c:	21 ff       	sbrs	r18, 1
    1b9e:	19 c0       	rjmp	.+50     	; 0x1bd2 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    1ba0:	30 91 eb 00 	lds	r19, 0x00EB
    1ba4:	3e 7f       	andi	r19, 0xFE	; 254
    1ba6:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    1baa:	30 91 ed 00 	lds	r19, 0x00ED
    1bae:	3d 7f       	andi	r19, 0xFD	; 253
    1bb0:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    1bb4:	30 91 eb 00 	lds	r19, 0x00EB
    1bb8:	31 60       	ori	r19, 0x01	; 1
    1bba:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    1bbe:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    1bc2:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    1bc6:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1bca:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    1bce:	27 ff       	sbrs	r18, 7
    1bd0:	07 c0       	rjmp	.+14     	; 0x1be0 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1bd2:	9f 5f       	subi	r25, 0xFF	; 255
    1bd4:	d3 cf       	rjmp	.-90     	; 0x1b7c <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1bd6:	8f 70       	andi	r24, 0x0F	; 15
    1bd8:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    1be0:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    1be2:	08 95       	ret

00001be4 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1be4:	80 91 de 01 	lds	r24, 0x01DE
    1be8:	87 ff       	sbrs	r24, 7
    1bea:	11 c0       	rjmp	.+34     	; 0x1c0e <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1bec:	80 91 e8 00 	lds	r24, 0x00E8
	{
		while (!(Endpoint_IsOUTReceived()))
    1bf0:	82 fd       	sbrc	r24, 2
    1bf2:	05 c0       	rjmp	.+10     	; 0x1bfe <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1bf4:	80 91 dd 01 	lds	r24, 0x01DD
    1bf8:	81 11       	cpse	r24, r1
    1bfa:	f8 cf       	rjmp	.-16     	; 0x1bec <Endpoint_ClearStatusStage+0x8>
    1bfc:	11 c0       	rjmp	.+34     	; 0x1c20 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1bfe:	80 91 e8 00 	lds	r24, 0x00E8
    1c02:	8b 77       	andi	r24, 0x7B	; 123
    1c04:	0b c0       	rjmp	.+22     	; 0x1c1c <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1c06:	80 91 dd 01 	lds	r24, 0x01DD
    1c0a:	88 23       	and	r24, r24
    1c0c:	49 f0       	breq	.+18     	; 0x1c20 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1c0e:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1c12:	80 ff       	sbrs	r24, 0
    1c14:	f8 cf       	rjmp	.-16     	; 0x1c06 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c16:	80 91 e8 00 	lds	r24, 0x00E8
    1c1a:	8e 77       	andi	r24, 0x7E	; 126
    1c1c:	80 93 e8 00 	sts	0x00E8, r24
    1c20:	08 95       	ret

00001c22 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1c22:	20 91 e4 00 	lds	r18, 0x00E4
    1c26:	30 91 e5 00 	lds	r19, 0x00E5
    1c2a:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1c2c:	40 91 ec 00 	lds	r20, 0x00EC
    1c30:	84 2f       	mov	r24, r20
    1c32:	81 70       	andi	r24, 0x01	; 1
    1c34:	40 ff       	sbrs	r20, 0
    1c36:	22 c0       	rjmp	.+68     	; 0x1c7c <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1c38:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1c3c:	80 fd       	sbrc	r24, 0
    1c3e:	1c c0       	rjmp	.+56     	; 0x1c78 <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1c40:	80 91 dd 01 	lds	r24, 0x01DD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1c44:	88 23       	and	r24, r24
    1c46:	91 f0       	breq	.+36     	; 0x1c6c <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1c48:	85 30       	cpi	r24, 0x05	; 5
    1c4a:	91 f0       	breq	.+36     	; 0x1c70 <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1c4c:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1c50:	85 fd       	sbrc	r24, 5
    1c52:	10 c0       	rjmp	.+32     	; 0x1c74 <Endpoint_WaitUntilReady+0x52>
    1c54:	40 91 e4 00 	lds	r20, 0x00E4
    1c58:	50 91 e5 00 	lds	r21, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1c5c:	42 17       	cp	r20, r18
    1c5e:	53 07       	cpc	r21, r19
    1c60:	29 f3       	breq	.-54     	; 0x1c2c <Endpoint_WaitUntilReady+0xa>
    1c62:	9a 01       	movw	r18, r20
    1c64:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1c66:	11 f7       	brne	.-60     	; 0x1c2c <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    1c68:	84 e0       	ldi	r24, 0x04	; 4
    1c6a:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1c6c:	82 e0       	ldi	r24, 0x02	; 2
    1c6e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1c70:	83 e0       	ldi	r24, 0x03	; 3
    1c72:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1c7c:	40 91 e8 00 	lds	r20, 0x00E8
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1c80:	42 ff       	sbrs	r20, 2
    1c82:	de cf       	rjmp	.-68     	; 0x1c40 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1c84:	08 95       	ret

00001c86 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1c86:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1c8a:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1c8e:	e0 ee       	ldi	r30, 0xE0	; 224
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	81 60       	ori	r24, 0x01	; 1
    1c96:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1c98:	e8 ed       	ldi	r30, 0xD8	; 216
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	8f 77       	andi	r24, 0x7F	; 127
    1ca0:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1ca2:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1ca4:	a7 ed       	ldi	r26, 0xD7	; 215
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	8c 91       	ld	r24, X
    1caa:	8e 7f       	andi	r24, 0xFE	; 254
    1cac:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1cae:	80 81       	ld	r24, Z
    1cb0:	8f 7e       	andi	r24, 0xEF	; 239
    1cb2:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1cb4:	10 92 dc 01 	sts	0x01DC, r1
    1cb8:	08 95       	ret

00001cba <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    1cba:	0f 93       	push	r16
    1cbc:	1f 93       	push	r17
    1cbe:	cf 93       	push	r28
    1cc0:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1cc2:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1cc6:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1cca:	c8 ed       	ldi	r28, 0xD8	; 216
    1ccc:	d0 e0       	ldi	r29, 0x00	; 0
    1cce:	88 81       	ld	r24, Y
    1cd0:	8f 77       	andi	r24, 0x7F	; 127
    1cd2:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    1cd4:	88 81       	ld	r24, Y
    1cd6:	80 68       	ori	r24, 0x80	; 128
    1cd8:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1cda:	88 81       	ld	r24, Y
    1cdc:	8f 7d       	andi	r24, 0xDF	; 223
    1cde:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1ce0:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1ce2:	10 92 dd 01 	sts	0x01DD, r1
	USB_Device_ConfigurationNumber  = 0;
    1ce6:	10 92 d9 01 	sts	0x01D9, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1cea:	10 92 db 01 	sts	0x01DB, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1cee:	10 92 da 01 	sts	0x01DA, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1cf2:	00 ee       	ldi	r16, 0xE0	; 224
    1cf4:	10 e0       	ldi	r17, 0x00	; 0
    1cf6:	f8 01       	movw	r30, r16
    1cf8:	80 81       	ld	r24, Z
    1cfa:	8b 7f       	andi	r24, 0xFB	; 251
    1cfc:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1cfe:	88 81       	ld	r24, Y
    1d00:	81 60       	ori	r24, 0x01	; 1
    1d02:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1d04:	42 e0       	ldi	r20, 0x02	; 2
    1d06:	60 e0       	ldi	r22, 0x00	; 0
    1d08:	80 e0       	ldi	r24, 0x00	; 0
    1d0a:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1d0e:	e1 ee       	ldi	r30, 0xE1	; 225
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	80 81       	ld	r24, Z
    1d14:	8e 7f       	andi	r24, 0xFE	; 254
    1d16:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1d18:	e2 ee       	ldi	r30, 0xE2	; 226
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 81       	ld	r24, Z
    1d1e:	81 60       	ori	r24, 0x01	; 1
    1d20:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1d22:	80 81       	ld	r24, Z
    1d24:	88 60       	ori	r24, 0x08	; 8
    1d26:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1d28:	f8 01       	movw	r30, r16
    1d2a:	80 81       	ld	r24, Z
    1d2c:	8e 7f       	andi	r24, 0xFE	; 254
    1d2e:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1d30:	88 81       	ld	r24, Y
    1d32:	80 61       	ori	r24, 0x10	; 16
    1d34:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1d36:	df 91       	pop	r29
    1d38:	cf 91       	pop	r28
    1d3a:	1f 91       	pop	r17
    1d3c:	0f 91       	pop	r16
    1d3e:	08 95       	ret

00001d40 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1d40:	e8 ed       	ldi	r30, 0xD8	; 216
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	8f 7e       	andi	r24, 0xEF	; 239
    1d48:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1d4a:	e7 ed       	ldi	r30, 0xD7	; 215
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	81 60       	ori	r24, 0x01	; 1
    1d52:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1d54:	84 e0       	ldi	r24, 0x04	; 4
    1d56:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	80 93 dc 01 	sts	0x01DC, r24

	USB_ResetInterface();
    1d5e:	0c 94 5d 0e 	jmp	0x1cba	; 0x1cba <USB_ResetInterface>

00001d62 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1d62:	e8 ed       	ldi	r30, 0xD8	; 216
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	80 81       	ld	r24, Z
    1d68:	8e 7f       	andi	r24, 0xFE	; 254
    1d6a:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1d6c:	10 92 e2 00 	sts	0x00E2, r1
    1d70:	08 95       	ret

00001d72 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1d72:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1d76:	10 92 e1 00 	sts	0x00E1, r1
    1d7a:	08 95       	ret

00001d7c <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1d7c:	1f 92       	push	r1
    1d7e:	0f 92       	push	r0
    1d80:	0f b6       	in	r0, 0x3f	; 63
    1d82:	0f 92       	push	r0
    1d84:	11 24       	eor	r1, r1
    1d86:	2f 93       	push	r18
    1d88:	3f 93       	push	r19
    1d8a:	4f 93       	push	r20
    1d8c:	5f 93       	push	r21
    1d8e:	6f 93       	push	r22
    1d90:	7f 93       	push	r23
    1d92:	8f 93       	push	r24
    1d94:	9f 93       	push	r25
    1d96:	af 93       	push	r26
    1d98:	bf 93       	push	r27
    1d9a:	ef 93       	push	r30
    1d9c:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1d9e:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1da2:	82 ff       	sbrs	r24, 2
    1da4:	0b c0       	rjmp	.+22     	; 0x1dbc <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1da6:	80 91 e2 00 	lds	r24, 0x00E2
    1daa:	82 ff       	sbrs	r24, 2
    1dac:	07 c0       	rjmp	.+14     	; 0x1dbc <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1dae:	80 91 e1 00 	lds	r24, 0x00E1
    1db2:	8b 7f       	andi	r24, 0xFB	; 251
    1db4:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1db8:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1dbc:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1dc0:	80 ff       	sbrs	r24, 0
    1dc2:	1f c0       	rjmp	.+62     	; 0x1e02 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1dc4:	80 91 d8 00 	lds	r24, 0x00D8
    1dc8:	80 ff       	sbrs	r24, 0
    1dca:	1b c0       	rjmp	.+54     	; 0x1e02 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1dcc:	80 91 da 00 	lds	r24, 0x00DA
    1dd0:	8e 7f       	andi	r24, 0xFE	; 254
    1dd2:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1dd6:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1dda:	80 ff       	sbrs	r24, 0
    1ddc:	0d c0       	rjmp	.+26     	; 0x1df8 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1dde:	80 e1       	ldi	r24, 0x10	; 16
    1de0:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1de2:	82 e1       	ldi	r24, 0x12	; 18
    1de4:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1de6:	09 b4       	in	r0, 0x29	; 41
    1de8:	00 fe       	sbrs	r0, 0
    1dea:	fd cf       	rjmp	.-6      	; 0x1de6 <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	80 93 dd 01 	sts	0x01DD, r24
			EVENT_USB_Device_Connect();
    1df2:	0e 94 bf 0a 	call	0x157e	; 0x157e <EVENT_USB_Device_Connect>
    1df6:	05 c0       	rjmp	.+10     	; 0x1e02 <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1df8:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1dfa:	10 92 dd 01 	sts	0x01DD, r1
			EVENT_USB_Device_Disconnect();
    1dfe:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1e02:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1e06:	80 ff       	sbrs	r24, 0
    1e08:	19 c0       	rjmp	.+50     	; 0x1e3c <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1e0a:	80 91 e2 00 	lds	r24, 0x00E2
    1e0e:	80 ff       	sbrs	r24, 0
    1e10:	15 c0       	rjmp	.+42     	; 0x1e3c <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1e12:	80 91 e2 00 	lds	r24, 0x00E2
    1e16:	8e 7f       	andi	r24, 0xFE	; 254
    1e18:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1e1c:	80 91 e2 00 	lds	r24, 0x00E2
    1e20:	80 61       	ori	r24, 0x10	; 16
    1e22:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1e26:	80 91 d8 00 	lds	r24, 0x00D8
    1e2a:	80 62       	ori	r24, 0x20	; 32
    1e2c:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1e30:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1e32:	85 e0       	ldi	r24, 0x05	; 5
    1e34:	80 93 dd 01 	sts	0x01DD, r24
		EVENT_USB_Device_Suspend();
    1e38:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1e3c:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1e40:	84 ff       	sbrs	r24, 4
    1e42:	30 c0       	rjmp	.+96     	; 0x1ea4 <__vector_10+0x128>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1e44:	80 91 e2 00 	lds	r24, 0x00E2
    1e48:	84 ff       	sbrs	r24, 4
    1e4a:	2c c0       	rjmp	.+88     	; 0x1ea4 <__vector_10+0x128>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1e4c:	80 e1       	ldi	r24, 0x10	; 16
    1e4e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1e50:	82 e1       	ldi	r24, 0x12	; 18
    1e52:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1e54:	09 b4       	in	r0, 0x29	; 41
    1e56:	00 fe       	sbrs	r0, 0
    1e58:	fd cf       	rjmp	.-6      	; 0x1e54 <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1e5a:	80 91 d8 00 	lds	r24, 0x00D8
    1e5e:	8f 7d       	andi	r24, 0xDF	; 223
    1e60:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1e64:	80 91 e1 00 	lds	r24, 0x00E1
    1e68:	8f 7e       	andi	r24, 0xEF	; 239
    1e6a:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1e6e:	80 91 e2 00 	lds	r24, 0x00E2
    1e72:	8f 7e       	andi	r24, 0xEF	; 239
    1e74:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1e78:	80 91 e2 00 	lds	r24, 0x00E2
    1e7c:	81 60       	ori	r24, 0x01	; 1
    1e7e:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1e82:	80 91 d9 01 	lds	r24, 0x01D9
    1e86:	88 23       	and	r24, r24
    1e88:	11 f0       	breq	.+4      	; 0x1e8e <__vector_10+0x112>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1e8a:	84 e0       	ldi	r24, 0x04	; 4
    1e8c:	07 c0       	rjmp	.+14     	; 0x1e9c <__vector_10+0x120>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1e8e:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1e92:	87 fd       	sbrc	r24, 7
    1e94:	02 c0       	rjmp	.+4      	; 0x1e9a <__vector_10+0x11e>
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	01 c0       	rjmp	.+2      	; 0x1e9c <__vector_10+0x120>
    1e9a:	83 e0       	ldi	r24, 0x03	; 3
    1e9c:	80 93 dd 01 	sts	0x01DD, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1ea0:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1ea4:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1ea8:	83 ff       	sbrs	r24, 3
    1eaa:	29 c0       	rjmp	.+82     	; 0x1efe <__vector_10+0x182>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1eac:	80 91 e2 00 	lds	r24, 0x00E2
    1eb0:	83 ff       	sbrs	r24, 3
    1eb2:	25 c0       	rjmp	.+74     	; 0x1efe <__vector_10+0x182>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1eb4:	80 91 e1 00 	lds	r24, 0x00E1
    1eb8:	87 7f       	andi	r24, 0xF7	; 247
    1eba:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1ebe:	82 e0       	ldi	r24, 0x02	; 2
    1ec0:	80 93 dd 01 	sts	0x01DD, r24
		USB_Device_ConfigurationNumber = 0;
    1ec4:	10 92 d9 01 	sts	0x01D9, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1ec8:	80 91 e1 00 	lds	r24, 0x00E1
    1ecc:	8e 7f       	andi	r24, 0xFE	; 254
    1ece:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1ed2:	80 91 e2 00 	lds	r24, 0x00E2
    1ed6:	8e 7f       	andi	r24, 0xFE	; 254
    1ed8:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1edc:	80 91 e2 00 	lds	r24, 0x00E2
    1ee0:	80 61       	ori	r24, 0x10	; 16
    1ee2:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1ee6:	42 e0       	ldi	r20, 0x02	; 2
    1ee8:	60 e0       	ldi	r22, 0x00	; 0
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1ef0:	80 91 f0 00 	lds	r24, 0x00F0
    1ef4:	88 60       	ori	r24, 0x08	; 8
    1ef6:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1efa:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1efe:	ff 91       	pop	r31
    1f00:	ef 91       	pop	r30
    1f02:	bf 91       	pop	r27
    1f04:	af 91       	pop	r26
    1f06:	9f 91       	pop	r25
    1f08:	8f 91       	pop	r24
    1f0a:	7f 91       	pop	r23
    1f0c:	6f 91       	pop	r22
    1f0e:	5f 91       	pop	r21
    1f10:	4f 91       	pop	r20
    1f12:	3f 91       	pop	r19
    1f14:	2f 91       	pop	r18
    1f16:	0f 90       	pop	r0
    1f18:	0f be       	out	0x3f, r0	; 63
    1f1a:	0f 90       	pop	r0
    1f1c:	1f 90       	pop	r1
    1f1e:	18 95       	reti

00001f20 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1f20:	1f 92       	push	r1
    1f22:	0f 92       	push	r0
    1f24:	0f b6       	in	r0, 0x3f	; 63
    1f26:	0f 92       	push	r0
    1f28:	11 24       	eor	r1, r1
    1f2a:	2f 93       	push	r18
    1f2c:	3f 93       	push	r19
    1f2e:	4f 93       	push	r20
    1f30:	5f 93       	push	r21
    1f32:	6f 93       	push	r22
    1f34:	7f 93       	push	r23
    1f36:	8f 93       	push	r24
    1f38:	9f 93       	push	r25
    1f3a:	af 93       	push	r26
    1f3c:	bf 93       	push	r27
    1f3e:	cf 93       	push	r28
    1f40:	df 93       	push	r29
    1f42:	ef 93       	push	r30
    1f44:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1f46:	c0 91 e9 00 	lds	r28, 0x00E9
    1f4a:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1f4c:	80 91 ec 00 	lds	r24, 0x00EC
    1f50:	d8 2f       	mov	r29, r24
    1f52:	d1 70       	andi	r29, 0x01	; 1
    1f54:	80 fd       	sbrc	r24, 0
    1f56:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f58:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1f5c:	80 91 f0 00 	lds	r24, 0x00F0
    1f60:	87 7f       	andi	r24, 0xF7	; 247
    1f62:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1f66:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1f68:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <USB_Device_ProcessControlRequest>
    1f6c:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1f70:	80 91 f0 00 	lds	r24, 0x00F0
    1f74:	88 60       	ori	r24, 0x08	; 8
    1f76:	80 93 f0 00 	sts	0x00F0, r24
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1f7a:	cd 2b       	or	r28, r29
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f7c:	cf 70       	andi	r28, 0x0F	; 15
    1f7e:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1f82:	ff 91       	pop	r31
    1f84:	ef 91       	pop	r30
    1f86:	df 91       	pop	r29
    1f88:	cf 91       	pop	r28
    1f8a:	bf 91       	pop	r27
    1f8c:	af 91       	pop	r26
    1f8e:	9f 91       	pop	r25
    1f90:	8f 91       	pop	r24
    1f92:	7f 91       	pop	r23
    1f94:	6f 91       	pop	r22
    1f96:	5f 91       	pop	r21
    1f98:	4f 91       	pop	r20
    1f9a:	3f 91       	pop	r19
    1f9c:	2f 91       	pop	r18
    1f9e:	0f 90       	pop	r0
    1fa0:	0f be       	out	0x3f, r0	; 63
    1fa2:	0f 90       	pop	r0
    1fa4:	1f 90       	pop	r1
    1fa6:	18 95       	reti

00001fa8 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1fa8:	1f 93       	push	r17
    1faa:	cf 93       	push	r28
    1fac:	df 93       	push	r29
    1fae:	cd b7       	in	r28, 0x3d	; 61
    1fb0:	de b7       	in	r29, 0x3e	; 62
    1fb2:	aa 97       	sbiw	r28, 0x2a	; 42
    1fb4:	0f b6       	in	r0, 0x3f	; 63
    1fb6:	f8 94       	cli
    1fb8:	de bf       	out	0x3e, r29	; 62
    1fba:	0f be       	out	0x3f, r0	; 63
    1fbc:	cd bf       	out	0x3d, r28	; 61
    1fbe:	ee ed       	ldi	r30, 0xDE	; 222
    1fc0:	f1 e0       	ldi	r31, 0x01	; 1
    1fc2:	88 e0       	ldi	r24, 0x08	; 8
    1fc4:	8e 0f       	add	r24, r30
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1fc6:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1fca:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1fcc:	8e 13       	cpse	r24, r30
    1fce:	fb cf       	rjmp	.-10     	; 0x1fc6 <USB_Device_ProcessControlRequest+0x1e>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1fd0:	0e 94 40 0b 	call	0x1680	; 0x1680 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1fd4:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1fd8:	83 ff       	sbrs	r24, 3
    1fda:	1f c1       	rjmp	.+574    	; 0x221a <USB_Device_ProcessControlRequest+0x272>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1fdc:	80 91 de 01 	lds	r24, 0x01DE

		switch (USB_ControlRequest.bRequest)
    1fe0:	90 91 df 01 	lds	r25, 0x01DF
    1fe4:	49 2f       	mov	r20, r25
    1fe6:	50 e0       	ldi	r21, 0x00	; 0
    1fe8:	4a 30       	cpi	r20, 0x0A	; 10
    1fea:	51 05       	cpc	r21, r1
    1fec:	08 f0       	brcs	.+2      	; 0x1ff0 <USB_Device_ProcessControlRequest+0x48>
    1fee:	15 c1       	rjmp	.+554    	; 0x221a <USB_Device_ProcessControlRequest+0x272>
    1ff0:	fa 01       	movw	r30, r20
    1ff2:	ea 5a       	subi	r30, 0xAA	; 170
    1ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff6:	0c 94 97 2a 	jmp	0x552e	; 0x552e <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1ffa:	80 38       	cpi	r24, 0x80	; 128
    1ffc:	81 f0       	breq	.+32     	; 0x201e <USB_Device_ProcessControlRequest+0x76>
    1ffe:	82 38       	cpi	r24, 0x82	; 130
    2000:	09 f0       	breq	.+2      	; 0x2004 <USB_Device_ProcessControlRequest+0x5c>
    2002:	0b c1       	rjmp	.+534    	; 0x221a <USB_Device_ProcessControlRequest+0x272>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2004:	80 91 e2 01 	lds	r24, 0x01E2
    2008:	8f 70       	andi	r24, 0x0F	; 15
    200a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    200e:	80 91 eb 00 	lds	r24, 0x00EB
    2012:	85 fb       	bst	r24, 5
    2014:	88 27       	eor	r24, r24
    2016:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2018:	10 92 e9 00 	sts	0x00E9, r1
    201c:	06 c0       	rjmp	.+12     	; 0x202a <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    201e:	80 91 da 01 	lds	r24, 0x01DA
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    2022:	90 91 db 01 	lds	r25, 0x01DB
    2026:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    2028:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    202a:	90 91 e8 00 	lds	r25, 0x00E8
    202e:	97 7f       	andi	r25, 0xF7	; 247
    2030:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    2034:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    2038:	10 92 f1 00 	sts	0x00F1, r1
    203c:	c8 c0       	rjmp	.+400    	; 0x21ce <USB_Device_ProcessControlRequest+0x226>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    203e:	28 2f       	mov	r18, r24
    2040:	2d 7f       	andi	r18, 0xFD	; 253
    2042:	09 f0       	breq	.+2      	; 0x2046 <USB_Device_ProcessControlRequest+0x9e>
    2044:	ea c0       	rjmp	.+468    	; 0x221a <USB_Device_ProcessControlRequest+0x272>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    2046:	88 23       	and	r24, r24
    2048:	19 f0       	breq	.+6      	; 0x2050 <USB_Device_ProcessControlRequest+0xa8>
    204a:	82 30       	cpi	r24, 0x02	; 2
    204c:	61 f0       	breq	.+24     	; 0x2066 <USB_Device_ProcessControlRequest+0xbe>
    204e:	e5 c0       	rjmp	.+458    	; 0x221a <USB_Device_ProcessControlRequest+0x272>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    2050:	80 91 e0 01 	lds	r24, 0x01E0
    2054:	81 30       	cpi	r24, 0x01	; 1
    2056:	09 f0       	breq	.+2      	; 0x205a <USB_Device_ProcessControlRequest+0xb2>
    2058:	e0 c0       	rjmp	.+448    	; 0x221a <USB_Device_ProcessControlRequest+0x272>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    205a:	93 30       	cpi	r25, 0x03	; 3
    205c:	09 f0       	breq	.+2      	; 0x2060 <USB_Device_ProcessControlRequest+0xb8>
    205e:	80 e0       	ldi	r24, 0x00	; 0
    2060:	80 93 db 01 	sts	0x01DB, r24
    2064:	2b c0       	rjmp	.+86     	; 0x20bc <USB_Device_ProcessControlRequest+0x114>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    2066:	80 91 e0 01 	lds	r24, 0x01E0
    206a:	81 11       	cpse	r24, r1
    206c:	27 c0       	rjmp	.+78     	; 0x20bc <USB_Device_ProcessControlRequest+0x114>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    206e:	80 91 e2 01 	lds	r24, 0x01E2
    2072:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    2074:	09 f4       	brne	.+2      	; 0x2078 <USB_Device_ProcessControlRequest+0xd0>
    2076:	d1 c0       	rjmp	.+418    	; 0x221a <USB_Device_ProcessControlRequest+0x272>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2078:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    207c:	20 91 eb 00 	lds	r18, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    2080:	20 ff       	sbrs	r18, 0
    2082:	1c c0       	rjmp	.+56     	; 0x20bc <USB_Device_ProcessControlRequest+0x114>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    2084:	93 30       	cpi	r25, 0x03	; 3
    2086:	21 f4       	brne	.+8      	; 0x2090 <USB_Device_ProcessControlRequest+0xe8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2088:	80 91 eb 00 	lds	r24, 0x00EB
    208c:	80 62       	ori	r24, 0x20	; 32
    208e:	14 c0       	rjmp	.+40     	; 0x20b8 <USB_Device_ProcessControlRequest+0x110>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    2090:	90 91 eb 00 	lds	r25, 0x00EB
    2094:	90 61       	ori	r25, 0x10	; 16
    2096:	90 93 eb 00 	sts	0x00EB, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    209a:	21 e0       	ldi	r18, 0x01	; 1
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	a9 01       	movw	r20, r18
    20a0:	02 c0       	rjmp	.+4      	; 0x20a6 <USB_Device_ProcessControlRequest+0xfe>
    20a2:	44 0f       	add	r20, r20
    20a4:	55 1f       	adc	r21, r21
    20a6:	8a 95       	dec	r24
    20a8:	e2 f7       	brpl	.-8      	; 0x20a2 <USB_Device_ProcessControlRequest+0xfa>
    20aa:	40 93 ea 00 	sts	0x00EA, r20
				UERST = 0;
    20ae:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    20b2:	80 91 eb 00 	lds	r24, 0x00EB
    20b6:	88 60       	ori	r24, 0x08	; 8
    20b8:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    20bc:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    20c0:	80 91 e8 00 	lds	r24, 0x00E8
    20c4:	87 7f       	andi	r24, 0xF7	; 247
    20c6:	86 c0       	rjmp	.+268    	; 0x21d4 <USB_Device_ProcessControlRequest+0x22c>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    20c8:	81 11       	cpse	r24, r1
    20ca:	a7 c0       	rjmp	.+334    	; 0x221a <USB_Device_ProcessControlRequest+0x272>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    20cc:	10 91 e0 01 	lds	r17, 0x01E0
    20d0:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    20d2:	80 91 e3 00 	lds	r24, 0x00E3
    20d6:	80 78       	andi	r24, 0x80	; 128
    20d8:	81 2b       	or	r24, r17
    20da:	80 93 e3 00 	sts	0x00E3, r24
    20de:	80 91 e8 00 	lds	r24, 0x00E8
    20e2:	87 7f       	andi	r24, 0xF7	; 247
    20e4:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    20e8:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    20ec:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    20f0:	80 ff       	sbrs	r24, 0
    20f2:	fc cf       	rjmp	.-8      	; 0x20ec <USB_Device_ProcessControlRequest+0x144>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    20f4:	80 91 e3 00 	lds	r24, 0x00E3
    20f8:	80 68       	ori	r24, 0x80	; 128
    20fa:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    20fe:	11 11       	cpse	r17, r1
    2100:	02 c0       	rjmp	.+4      	; 0x2106 <USB_Device_ProcessControlRequest+0x15e>
    2102:	82 e0       	ldi	r24, 0x02	; 2
    2104:	01 c0       	rjmp	.+2      	; 0x2108 <USB_Device_ProcessControlRequest+0x160>
    2106:	83 e0       	ldi	r24, 0x03	; 3
    2108:	80 93 dd 01 	sts	0x01DD, r24
    210c:	86 c0       	rjmp	.+268    	; 0x221a <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    210e:	80 58       	subi	r24, 0x80	; 128
    2110:	82 30       	cpi	r24, 0x02	; 2
    2112:	08 f0       	brcs	.+2      	; 0x2116 <USB_Device_ProcessControlRequest+0x16e>
    2114:	82 c0       	rjmp	.+260    	; 0x221a <USB_Device_ProcessControlRequest+0x272>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    2116:	80 91 e0 01 	lds	r24, 0x01E0
    211a:	90 91 e1 01 	lds	r25, 0x01E1
    211e:	8c 3d       	cpi	r24, 0xDC	; 220
    2120:	53 e0       	ldi	r21, 0x03	; 3
    2122:	95 07       	cpc	r25, r21
    2124:	79 f5       	brne	.+94     	; 0x2184 <USB_Device_ProcessControlRequest+0x1dc>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    2126:	83 e0       	ldi	r24, 0x03	; 3
    2128:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    212a:	8a e2       	ldi	r24, 0x2A	; 42
    212c:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    212e:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    2130:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    2132:	de 01       	movw	r26, r28
    2134:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    2136:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    2138:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    213a:	51 e2       	ldi	r21, 0x21	; 33
    213c:	e3 2f       	mov	r30, r19
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	50 93 57 00 	sts	0x0057, r21
    2144:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    2146:	20 ff       	sbrs	r18, 0
    2148:	03 c0       	rjmp	.+6      	; 0x2150 <USB_Device_ProcessControlRequest+0x1a8>
					{
						SerialByte >>= 4;
    214a:	e2 95       	swap	r30
    214c:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    214e:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    2150:	ef 70       	andi	r30, 0x0F	; 15
    2152:	8e 2f       	mov	r24, r30
    2154:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    2156:	ea 30       	cpi	r30, 0x0A	; 10
    2158:	10 f0       	brcs	.+4      	; 0x215e <USB_Device_ProcessControlRequest+0x1b6>
    215a:	c7 96       	adiw	r24, 0x37	; 55
    215c:	01 c0       	rjmp	.+2      	; 0x2160 <USB_Device_ProcessControlRequest+0x1b8>
    215e:	c0 96       	adiw	r24, 0x30	; 48
    2160:	8d 93       	st	X+, r24
    2162:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    2164:	2f 5f       	subi	r18, 0xFF	; 255
    2166:	24 31       	cpi	r18, 0x14	; 20
    2168:	49 f7       	brne	.-46     	; 0x213c <USB_Device_ProcessControlRequest+0x194>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    216a:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    216c:	80 91 e8 00 	lds	r24, 0x00E8
    2170:	87 7f       	andi	r24, 0xF7	; 247
    2172:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    2176:	6a e2       	ldi	r22, 0x2A	; 42
    2178:	70 e0       	ldi	r23, 0x00	; 0
    217a:	ce 01       	movw	r24, r28
    217c:	01 96       	adiw	r24, 0x01	; 1
    217e:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <Endpoint_Write_Control_Stream_LE>
    2182:	14 c0       	rjmp	.+40     	; 0x21ac <USB_Device_ProcessControlRequest+0x204>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    2184:	ae 01       	movw	r20, r28
    2186:	4f 5f       	subi	r20, 0xFF	; 255
    2188:	5f 4f       	sbci	r21, 0xFF	; 255
    218a:	60 91 e2 01 	lds	r22, 0x01E2
    218e:	0e 94 40 0c 	call	0x1880	; 0x1880 <CALLBACK_USB_GetDescriptor>
    2192:	bc 01       	movw	r22, r24
    2194:	00 97       	sbiw	r24, 0x00	; 0
    2196:	09 f4       	brne	.+2      	; 0x219a <USB_Device_ProcessControlRequest+0x1f2>
    2198:	40 c0       	rjmp	.+128    	; 0x221a <USB_Device_ProcessControlRequest+0x272>
    219a:	90 91 e8 00 	lds	r25, 0x00E8
    219e:	97 7f       	andi	r25, 0xF7	; 247
    21a0:	90 93 e8 00 	sts	0x00E8, r25
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    21a4:	89 81       	ldd	r24, Y+1	; 0x01
    21a6:	9a 81       	ldd	r25, Y+2	; 0x02
    21a8:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    21ac:	80 91 e8 00 	lds	r24, 0x00E8
    21b0:	8b 77       	andi	r24, 0x7B	; 123
    21b2:	80 93 e8 00 	sts	0x00E8, r24
    21b6:	31 c0       	rjmp	.+98     	; 0x221a <USB_Device_ProcessControlRequest+0x272>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    21b8:	80 38       	cpi	r24, 0x80	; 128
    21ba:	79 f5       	brne	.+94     	; 0x221a <USB_Device_ProcessControlRequest+0x272>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    21bc:	80 91 e8 00 	lds	r24, 0x00E8
    21c0:	87 7f       	andi	r24, 0xF7	; 247
    21c2:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    21c6:	80 91 d9 01 	lds	r24, 0x01D9
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    21ca:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    21ce:	80 91 e8 00 	lds	r24, 0x00E8
    21d2:	8e 77       	andi	r24, 0x7E	; 126
    21d4:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    21d8:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <Endpoint_ClearStatusStage>
    21dc:	1e c0       	rjmp	.+60     	; 0x221a <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    21de:	81 11       	cpse	r24, r1
    21e0:	1c c0       	rjmp	.+56     	; 0x221a <USB_Device_ProcessControlRequest+0x272>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    21e2:	90 91 e0 01 	lds	r25, 0x01E0
    21e6:	92 30       	cpi	r25, 0x02	; 2
    21e8:	c0 f4       	brcc	.+48     	; 0x221a <USB_Device_ProcessControlRequest+0x272>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    21ea:	80 91 e8 00 	lds	r24, 0x00E8
    21ee:	87 7f       	andi	r24, 0xF7	; 247
    21f0:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    21f4:	90 93 d9 01 	sts	0x01D9, r25

	Endpoint_ClearStatusStage();
    21f8:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    21fc:	80 91 d9 01 	lds	r24, 0x01D9
    2200:	81 11       	cpse	r24, r1
    2202:	06 c0       	rjmp	.+12     	; 0x2210 <USB_Device_ProcessControlRequest+0x268>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2204:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    2208:	87 fd       	sbrc	r24, 7
    220a:	02 c0       	rjmp	.+4      	; 0x2210 <USB_Device_ProcessControlRequest+0x268>
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	01 c0       	rjmp	.+2      	; 0x2212 <USB_Device_ProcessControlRequest+0x26a>
    2210:	84 e0       	ldi	r24, 0x04	; 4
    2212:	80 93 dd 01 	sts	0x01DD, r24

	EVENT_USB_Device_ConfigurationChanged();
    2216:	0e 94 27 0b 	call	0x164e	; 0x164e <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    221a:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    221e:	83 ff       	sbrs	r24, 3
    2220:	0a c0       	rjmp	.+20     	; 0x2236 <USB_Device_ProcessControlRequest+0x28e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2222:	80 91 e8 00 	lds	r24, 0x00E8
    2226:	87 7f       	andi	r24, 0xF7	; 247
    2228:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    222c:	80 91 eb 00 	lds	r24, 0x00EB
    2230:	80 62       	ori	r24, 0x20	; 32
    2232:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    2236:	aa 96       	adiw	r28, 0x2a	; 42
    2238:	0f b6       	in	r0, 0x3f	; 63
    223a:	f8 94       	cli
    223c:	de bf       	out	0x3e, r29	; 62
    223e:	0f be       	out	0x3f, r0	; 63
    2240:	cd bf       	out	0x3d, r28	; 61
    2242:	df 91       	pop	r29
    2244:	cf 91       	pop	r28
    2246:	1f 91       	pop	r17
    2248:	08 95       	ret

0000224a <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    224a:	90 93 68 01 	sts	0x0168, r25
    224e:	80 93 67 01 	sts	0x0167, r24
    2252:	08 95       	ret

00002254 <host_keyboard_leds>:
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    2254:	e0 91 67 01 	lds	r30, 0x0167
    2258:	f0 91 68 01 	lds	r31, 0x0168
    225c:	30 97       	sbiw	r30, 0x00	; 0
    225e:	21 f0       	breq	.+8      	; 0x2268 <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    2260:	01 90       	ld	r0, Z+
    2262:	f0 81       	ld	r31, Z
    2264:	e0 2d       	mov	r30, r0
    2266:	09 94       	ijmp
}
    2268:	80 e0       	ldi	r24, 0x00	; 0
    226a:	08 95       	ret

0000226c <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    226c:	ef 92       	push	r14
    226e:	ff 92       	push	r15
    2270:	0f 93       	push	r16
    2272:	1f 93       	push	r17
    2274:	cf 93       	push	r28
    2276:	df 93       	push	r29
	// Jemi&20160118
    if (!driver) return;
    2278:	e0 91 67 01 	lds	r30, 0x0167
    227c:	f0 91 68 01 	lds	r31, 0x0168
    2280:	30 97       	sbiw	r30, 0x00	; 0
    2282:	b1 f1       	breq	.+108    	; 0x22f0 <host_keyboard_send+0x84>
    2284:	8c 01       	movw	r16, r24
    (*driver->send_keyboard)(report);
    2286:	02 80       	ldd	r0, Z+2	; 0x02
    2288:	f3 81       	ldd	r31, Z+3	; 0x03
    228a:	e0 2d       	mov	r30, r0
    228c:	09 95       	icall

    if (debug_keyboard) {
    228e:	80 91 c7 01 	lds	r24, 0x01C7
    2292:	82 ff       	sbrs	r24, 2
    2294:	2d c0       	rjmp	.+90     	; 0x22f0 <host_keyboard_send+0x84>
        dprint("keyboard_report: ");
    2296:	80 ff       	sbrs	r24, 0
    2298:	04 c0       	rjmp	.+8      	; 0x22a2 <host_keyboard_send+0x36>
    229a:	8a e7       	ldi	r24, 0x7A	; 122
    229c:	95 e0       	ldi	r25, 0x05	; 5
    229e:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    22a2:	e8 01       	movw	r28, r16
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    22a4:	10 e1       	ldi	r17, 0x10	; 16
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    22a6:	84 e7       	ldi	r24, 0x74	; 116
    22a8:	e8 2e       	mov	r14, r24
    22aa:	85 e0       	ldi	r24, 0x05	; 5
    22ac:	f8 2e       	mov	r15, r24
    22ae:	80 91 c7 01 	lds	r24, 0x01C7
    22b2:	80 ff       	sbrs	r24, 0
    22b4:	0b c0       	rjmp	.+22     	; 0x22cc <host_keyboard_send+0x60>
    22b6:	88 81       	ld	r24, Y
    22b8:	1f 92       	push	r1
    22ba:	8f 93       	push	r24
    22bc:	ff 92       	push	r15
    22be:	ef 92       	push	r14
    22c0:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
    22c4:	0f 90       	pop	r0
    22c6:	0f 90       	pop	r0
    22c8:	0f 90       	pop	r0
    22ca:	0f 90       	pop	r0
    22cc:	11 50       	subi	r17, 0x01	; 1
    22ce:	21 96       	adiw	r28, 0x01	; 1
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    22d0:	11 11       	cpse	r17, r1
    22d2:	ed cf       	rjmp	.-38     	; 0x22ae <host_keyboard_send+0x42>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    22d4:	80 91 c7 01 	lds	r24, 0x01C7
    22d8:	80 ff       	sbrs	r24, 0
    22da:	0a c0       	rjmp	.+20     	; 0x22f0 <host_keyboard_send+0x84>
    22dc:	82 e7       	ldi	r24, 0x72	; 114
    22de:	95 e0       	ldi	r25, 0x05	; 5
    }
}
    22e0:	df 91       	pop	r29
    22e2:	cf 91       	pop	r28
    22e4:	1f 91       	pop	r17
    22e6:	0f 91       	pop	r16
    22e8:	ff 90       	pop	r15
    22ea:	ef 90       	pop	r14
    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    22ec:	0c 94 13 07 	jmp	0xe26	; 0xe26 <xputs>
    }
}
    22f0:	df 91       	pop	r29
    22f2:	cf 91       	pop	r28
    22f4:	1f 91       	pop	r17
    22f6:	0f 91       	pop	r16
    22f8:	ff 90       	pop	r15
    22fa:	ef 90       	pop	r14
    22fc:	08 95       	ret

000022fe <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    22fe:	e0 91 67 01 	lds	r30, 0x0167
    2302:	f0 91 68 01 	lds	r31, 0x0168
    2306:	30 97       	sbiw	r30, 0x00	; 0
    2308:	21 f0       	breq	.+8      	; 0x2312 <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    230a:	04 80       	ldd	r0, Z+4	; 0x04
    230c:	f5 81       	ldd	r31, Z+5	; 0x05
    230e:	e0 2d       	mov	r30, r0
    2310:	09 94       	ijmp
    2312:	08 95       	ret

00002314 <host_system_send>:
}

void host_system_send(uint16_t report)
{
    if (report == last_system_report) return;
    2314:	20 91 65 01 	lds	r18, 0x0165
    2318:	30 91 66 01 	lds	r19, 0x0166
    231c:	82 17       	cp	r24, r18
    231e:	93 07       	cpc	r25, r19
    2320:	71 f0       	breq	.+28     	; 0x233e <host_system_send+0x2a>
    last_system_report = report;
    2322:	90 93 66 01 	sts	0x0166, r25
    2326:	80 93 65 01 	sts	0x0165, r24

    if (!driver) return;
    232a:	e0 91 67 01 	lds	r30, 0x0167
    232e:	f0 91 68 01 	lds	r31, 0x0168
    2332:	30 97       	sbiw	r30, 0x00	; 0
    2334:	21 f0       	breq	.+8      	; 0x233e <host_system_send+0x2a>
    (*driver->send_system)(report);
    2336:	06 80       	ldd	r0, Z+6	; 0x06
    2338:	f7 81       	ldd	r31, Z+7	; 0x07
    233a:	e0 2d       	mov	r30, r0
    233c:	09 94       	ijmp
    233e:	08 95       	ret

00002340 <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    if (report == last_consumer_report) return;
    2340:	20 91 63 01 	lds	r18, 0x0163
    2344:	30 91 64 01 	lds	r19, 0x0164
    2348:	82 17       	cp	r24, r18
    234a:	93 07       	cpc	r25, r19
    234c:	71 f0       	breq	.+28     	; 0x236a <host_consumer_send+0x2a>
    last_consumer_report = report;
    234e:	90 93 64 01 	sts	0x0164, r25
    2352:	80 93 63 01 	sts	0x0163, r24

    if (!driver) return;
    2356:	e0 91 67 01 	lds	r30, 0x0167
    235a:	f0 91 68 01 	lds	r31, 0x0168
    235e:	30 97       	sbiw	r30, 0x00	; 0
    2360:	21 f0       	breq	.+8      	; 0x236a <host_consumer_send+0x2a>
    (*driver->send_consumer)(report);
    2362:	00 84       	ldd	r0, Z+8	; 0x08
    2364:	f1 85       	ldd	r31, Z+9	; 0x09
    2366:	e0 2d       	mov	r30, r0
    2368:	09 94       	ijmp
    236a:	08 95       	ret

0000236c <matrix_setup>:
    return false;
}
#endif


__attribute__ ((weak)) void matrix_setup(void) {}
    236c:	08 95       	ret

0000236e <keyboard_setup>:
void keyboard_setup(void)
{
    matrix_setup();
    236e:	0c 94 b6 11 	jmp	0x236c	; 0x236c <matrix_setup>

00002372 <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    2372:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <timer_init>
    matrix_init();
    2376:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <matrix_init>
    adb_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    237a:	0c 94 08 20 	jmp	0x4010	; 0x4010 <bootmagic>

0000237e <keyboard_set_leds>:
        keyboard_set_leds(led_status);
    }
}

void keyboard_set_leds(uint8_t leds)
{
    237e:	cf 93       	push	r28
    2380:	c8 2f       	mov	r28, r24
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    2382:	80 91 c7 01 	lds	r24, 0x01C7
    2386:	82 ff       	sbrs	r24, 2
    2388:	1e c0       	rjmp	.+60     	; 0x23c6 <keyboard_set_leds+0x48>
    238a:	80 ff       	sbrs	r24, 0
    238c:	04 c0       	rjmp	.+8      	; 0x2396 <keyboard_set_leds+0x18>
    238e:	83 e9       	ldi	r24, 0x93	; 147
    2390:	95 e0       	ldi	r25, 0x05	; 5
    2392:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    2396:	80 91 c7 01 	lds	r24, 0x01C7
    239a:	80 ff       	sbrs	r24, 0
    239c:	0c c0       	rjmp	.+24     	; 0x23b6 <keyboard_set_leds+0x38>
    239e:	1f 92       	push	r1
    23a0:	cf 93       	push	r28
    23a2:	8e e8       	ldi	r24, 0x8E	; 142
    23a4:	95 e0       	ldi	r25, 0x05	; 5
    23a6:	9f 93       	push	r25
    23a8:	8f 93       	push	r24
    23aa:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
    23ae:	0f 90       	pop	r0
    23b0:	0f 90       	pop	r0
    23b2:	0f 90       	pop	r0
    23b4:	0f 90       	pop	r0
    23b6:	80 91 c7 01 	lds	r24, 0x01C7
    23ba:	80 ff       	sbrs	r24, 0
    23bc:	04 c0       	rjmp	.+8      	; 0x23c6 <keyboard_set_leds+0x48>
    23be:	8c e8       	ldi	r24, 0x8C	; 140
    23c0:	95 e0       	ldi	r25, 0x05	; 5
    23c2:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    led_set(leds);
    23c6:	8c 2f       	mov	r24, r28
}
    23c8:	cf 91       	pop	r28
}

void keyboard_set_leds(uint8_t leds)
{
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    led_set(leds);
    23ca:	0c 94 75 09 	jmp	0x12ea	; 0x12ea <led_set>

000023ce <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    23ce:	4f 92       	push	r4
    23d0:	5f 92       	push	r5
    23d2:	7f 92       	push	r7
    23d4:	8f 92       	push	r8
    23d6:	9f 92       	push	r9
    23d8:	af 92       	push	r10
    23da:	bf 92       	push	r11
    23dc:	cf 92       	push	r12
    23de:	df 92       	push	r13
    23e0:	ef 92       	push	r14
    23e2:	ff 92       	push	r15
    23e4:	0f 93       	push	r16
    23e6:	1f 93       	push	r17
    23e8:	cf 93       	push	r28
    23ea:	df 93       	push	r29
    23ec:	cd b7       	in	r28, 0x3d	; 61
    23ee:	de b7       	in	r29, 0x3e	; 62
    23f0:	2a 97       	sbiw	r28, 0x0a	; 10
    23f2:	0f b6       	in	r0, 0x3f	; 63
    23f4:	f8 94       	cli
    23f6:	de bf       	out	0x3e, r29	; 62
    23f8:	0f be       	out	0x3f, r0	; 63
    23fa:	cd bf       	out	0x3d, r28	; 61
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

	// Jemi&20160114 
    matrix_scan();
    23fc:	0e 94 fd 07 	call	0xffa	; 0xffa <matrix_scan>
    2400:	9a e6       	ldi	r25, 0x6A	; 106
    2402:	c9 2e       	mov	r12, r25
    2404:	91 e0       	ldi	r25, 0x01	; 1
    2406:	d9 2e       	mov	r13, r25
    2408:	00 e0       	ldi	r16, 0x00	; 0
    240a:	10 e0       	ldi	r17, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    240c:	aa 24       	eor	r10, r10
    240e:	a3 94       	inc	r10
    2410:	b1 2c       	mov	r11, r1
    2412:	70 2e       	mov	r7, r16

	// Jemi&20160114 
    matrix_scan();
	
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    2414:	80 2f       	mov	r24, r16
    2416:	0e 94 25 09 	call	0x124a	; 0x124a <matrix_get_row>
    241a:	4c 01       	movw	r8, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    241c:	f6 01       	movw	r30, r12
    241e:	41 90       	ld	r4, Z+
    2420:	51 90       	ld	r5, Z+
    2422:	6f 01       	movw	r12, r30
    2424:	48 26       	eor	r4, r24
    2426:	59 26       	eor	r5, r25
        if (matrix_change) {
    2428:	41 14       	cp	r4, r1
    242a:	51 04       	cpc	r5, r1
    242c:	b1 f4       	brne	.+44     	; 0x245a <keyboard_task+0x8c>
    242e:	0f 5f       	subi	r16, 0xFF	; 255
    2430:	1f 4f       	sbci	r17, 0xFF	; 255
    matrix_row_t matrix_change = 0;

	// Jemi&20160114 
    matrix_scan();
	
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2432:	05 30       	cpi	r16, 0x05	; 5
    2434:	11 05       	cpc	r17, r1
    2436:	69 f7       	brne	.-38     	; 0x2412 <keyboard_task+0x44>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    2438:	8f ef       	ldi	r24, 0xFF	; 255
    243a:	89 83       	std	Y+1, r24	; 0x01
    243c:	8a 83       	std	Y+2, r24	; 0x02
    243e:	1b 82       	std	Y+3, r1	; 0x03
    2440:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <timer_read>
    2444:	81 60       	ori	r24, 0x01	; 1
    2446:	78 2f       	mov	r23, r24
    2448:	9d 83       	std	Y+5, r25	; 0x05
    244a:	8c 83       	std	Y+4, r24	; 0x04
    244c:	49 81       	ldd	r20, Y+1	; 0x01
    244e:	5a 81       	ldd	r21, Y+2	; 0x02
    2450:	6b 81       	ldd	r22, Y+3	; 0x03
    2452:	8d 81       	ldd	r24, Y+5	; 0x05
    2454:	0e 94 a0 12 	call	0x2540	; 0x2540 <action_exec>
    2458:	3a c0       	rjmp	.+116    	; 0x24ce <keyboard_task+0x100>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    245a:	80 91 c7 01 	lds	r24, 0x01C7
    245e:	81 fd       	sbrc	r24, 1
    2460:	0e 94 2e 09 	call	0x125c	; 0x125c <matrix_print>
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

	// Jemi&20160114 
    matrix_scan();
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	30 e0       	ldi	r19, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    2468:	75 01       	movw	r14, r10
    246a:	02 2e       	mov	r0, r18
    246c:	02 c0       	rjmp	.+4      	; 0x2472 <keyboard_task+0xa4>
    246e:	ee 0c       	add	r14, r14
    2470:	ff 1c       	adc	r15, r15
    2472:	0a 94       	dec	r0
    2474:	e2 f7       	brpl	.-8      	; 0x246e <keyboard_task+0xa0>
    2476:	c7 01       	movw	r24, r14
    2478:	84 21       	and	r24, r4
    247a:	95 21       	and	r25, r5
    247c:	89 2b       	or	r24, r25
    247e:	09 f1       	breq	.+66     	; 0x24c2 <keyboard_task+0xf4>
                    action_exec((keyevent_t){
    2480:	2e 83       	std	Y+6, r18	; 0x06
    2482:	7f 82       	std	Y+7, r7	; 0x07
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
    2484:	8e 20       	and	r8, r14
    2486:	9f 20       	and	r9, r15
    2488:	91 e0       	ldi	r25, 0x01	; 1
    248a:	89 28       	or	r8, r9
    248c:	09 f4       	brne	.+2      	; 0x2490 <keyboard_task+0xc2>
    248e:	90 e0       	ldi	r25, 0x00	; 0
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    2490:	98 87       	std	Y+8, r25	; 0x08
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
    2492:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <timer_read>
    2496:	81 60       	ori	r24, 0x01	; 1
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    2498:	78 2f       	mov	r23, r24
    249a:	9a 87       	std	Y+10, r25	; 0x0a
    249c:	89 87       	std	Y+9, r24	; 0x09
    249e:	4e 81       	ldd	r20, Y+6	; 0x06
    24a0:	5f 81       	ldd	r21, Y+7	; 0x07
    24a2:	68 85       	ldd	r22, Y+8	; 0x08
    24a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    24a6:	0e 94 a0 12 	call	0x2540	; 0x2540 <action_exec>
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    });
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    24aa:	00 0f       	add	r16, r16
    24ac:	11 1f       	adc	r17, r17
    24ae:	f8 01       	movw	r30, r16
    24b0:	e6 59       	subi	r30, 0x96	; 150
    24b2:	fe 4f       	sbci	r31, 0xFE	; 254
    24b4:	80 81       	ld	r24, Z
    24b6:	91 81       	ldd	r25, Z+1	; 0x01
    24b8:	e8 26       	eor	r14, r24
    24ba:	f9 26       	eor	r15, r25
    24bc:	f1 82       	std	Z+1, r15	; 0x01
    24be:	e0 82       	st	Z, r14
                    // process a key per task call
                    goto MATRIX_LOOP_END;
    24c0:	06 c0       	rjmp	.+12     	; 0x24ce <keyboard_task+0x100>
    24c2:	2f 5f       	subi	r18, 0xFF	; 255
    24c4:	3f 4f       	sbci	r19, 0xFF	; 255
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    24c6:	2e 30       	cpi	r18, 0x0E	; 14
    24c8:	31 05       	cpc	r19, r1
    24ca:	71 f6       	brne	.-100    	; 0x2468 <keyboard_task+0x9a>
    24cc:	b0 cf       	rjmp	.-160    	; 0x242e <keyboard_task+0x60>

MATRIX_LOOP_END:

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    24ce:	0e 94 79 23 	call	0x46f2	; 0x46f2 <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    24d2:	10 91 69 01 	lds	r17, 0x0169
    24d6:	0e 94 2a 11 	call	0x2254	; 0x2254 <host_keyboard_leds>
    24da:	18 17       	cp	r17, r24
    24dc:	d9 f0       	breq	.+54     	; 0x2514 <keyboard_task+0x146>
        led_status = host_keyboard_leds();
    24de:	0e 94 2a 11 	call	0x2254	; 0x2254 <host_keyboard_leds>
    24e2:	80 93 69 01 	sts	0x0169, r24
        keyboard_set_leds(led_status);
    }
}
    24e6:	2a 96       	adiw	r28, 0x0a	; 10
    24e8:	0f b6       	in	r0, 0x3f	; 63
    24ea:	f8 94       	cli
    24ec:	de bf       	out	0x3e, r29	; 62
    24ee:	0f be       	out	0x3f, r0	; 63
    24f0:	cd bf       	out	0x3d, r28	; 61
    24f2:	df 91       	pop	r29
    24f4:	cf 91       	pop	r28
    24f6:	1f 91       	pop	r17
    24f8:	0f 91       	pop	r16
    24fa:	ff 90       	pop	r15
    24fc:	ef 90       	pop	r14
    24fe:	df 90       	pop	r13
    2500:	cf 90       	pop	r12
    2502:	bf 90       	pop	r11
    2504:	af 90       	pop	r10
    2506:	9f 90       	pop	r9
    2508:	8f 90       	pop	r8
    250a:	7f 90       	pop	r7
    250c:	5f 90       	pop	r5
    250e:	4f 90       	pop	r4
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        keyboard_set_leds(led_status);
    2510:	0c 94 bf 11 	jmp	0x237e	; 0x237e <keyboard_set_leds>
    }
}
    2514:	2a 96       	adiw	r28, 0x0a	; 10
    2516:	0f b6       	in	r0, 0x3f	; 63
    2518:	f8 94       	cli
    251a:	de bf       	out	0x3e, r29	; 62
    251c:	0f be       	out	0x3f, r0	; 63
    251e:	cd bf       	out	0x3d, r28	; 61
    2520:	df 91       	pop	r29
    2522:	cf 91       	pop	r28
    2524:	1f 91       	pop	r17
    2526:	0f 91       	pop	r16
    2528:	ff 90       	pop	r15
    252a:	ef 90       	pop	r14
    252c:	df 90       	pop	r13
    252e:	cf 90       	pop	r12
    2530:	bf 90       	pop	r11
    2532:	af 90       	pop	r10
    2534:	9f 90       	pop	r9
    2536:	8f 90       	pop	r8
    2538:	7f 90       	pop	r7
    253a:	5f 90       	pop	r5
    253c:	4f 90       	pop	r4
    253e:	08 95       	ret

00002540 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    2540:	cf 93       	push	r28
    2542:	df 93       	push	r29
    2544:	cd b7       	in	r28, 0x3d	; 61
    2546:	de b7       	in	r29, 0x3e	; 62
    2548:	2b 97       	sbiw	r28, 0x0b	; 11
    254a:	0f b6       	in	r0, 0x3f	; 63
    254c:	f8 94       	cli
    254e:	de bf       	out	0x3e, r29	; 62
    2550:	0f be       	out	0x3f, r0	; 63
    2552:	cd bf       	out	0x3d, r28	; 61
    2554:	4f 83       	std	Y+7, r20	; 0x07
    2556:	58 87       	std	Y+8, r21	; 0x08
    2558:	69 87       	std	Y+9, r22	; 0x09
    255a:	7a 87       	std	Y+10, r23	; 0x0a
    255c:	8b 87       	std	Y+11, r24	; 0x0b
    if (!IS_NOEVENT(event)) {
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
    }

    keyrecord_t record = { .event = event };
    255e:	de 01       	movw	r26, r28
    2560:	11 96       	adiw	r26, 0x01	; 1
    2562:	86 e0       	ldi	r24, 0x06	; 6
    2564:	fd 01       	movw	r30, r26
    2566:	11 92       	st	Z+, r1
    2568:	8a 95       	dec	r24
    256a:	e9 f7       	brne	.-6      	; 0x2566 <action_exec+0x26>
    256c:	85 e0       	ldi	r24, 0x05	; 5
    256e:	fe 01       	movw	r30, r28
    2570:	37 96       	adiw	r30, 0x07	; 7
    2572:	01 90       	ld	r0, Z+
    2574:	0d 92       	st	X+, r0
    2576:	8a 95       	dec	r24
    2578:	e1 f7       	brne	.-8      	; 0x2572 <action_exec+0x32>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    257a:	49 81       	ldd	r20, Y+1	; 0x01
    257c:	5a 81       	ldd	r21, Y+2	; 0x02
    257e:	6b 81       	ldd	r22, Y+3	; 0x03
    2580:	7c 81       	ldd	r23, Y+4	; 0x04
    2582:	8d 81       	ldd	r24, Y+5	; 0x05
    2584:	9e 81       	ldd	r25, Y+6	; 0x06
    2586:	0e 94 bd 19 	call	0x337a	; 0x337a <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    258a:	2b 96       	adiw	r28, 0x0b	; 11
    258c:	0f b6       	in	r0, 0x3f	; 63
    258e:	f8 94       	cli
    2590:	de bf       	out	0x3e, r29	; 62
    2592:	0f be       	out	0x3f, r0	; 63
    2594:	cd bf       	out	0x3d, r28	; 61
    2596:	df 91       	pop	r29
    2598:	cf 91       	pop	r28
    259a:	08 95       	ret

0000259c <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    259c:	cf 93       	push	r28
    if (code == KC_NO) {
    259e:	88 23       	and	r24, r24
    25a0:	09 f4       	brne	.+2      	; 0x25a4 <register_code+0x8>
    25a2:	c2 c0       	rjmp	.+388    	; 0x2728 <register_code+0x18c>
    25a4:	c8 2f       	mov	r28, r24
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    25a6:	82 38       	cpi	r24, 0x82	; 130
    25a8:	59 f4       	brne	.+22     	; 0x25c0 <register_code+0x24>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is on
        if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
    25aa:	0e 94 2a 11 	call	0x2254	; 0x2254 <host_keyboard_leds>
    25ae:	81 fd       	sbrc	r24, 1
    25b0:	bb c0       	rjmp	.+374    	; 0x2728 <register_code+0x18c>
#endif
        add_key(KC_CAPSLOCK);
    25b2:	89 e3       	ldi	r24, 0x39	; 57
    25b4:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <add_key>
        send_keyboard_report();
    25b8:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    25bc:	89 e3       	ldi	r24, 0x39	; 57
    25be:	0c c0       	rjmp	.+24     	; 0x25d8 <register_code+0x3c>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    25c0:	83 38       	cpi	r24, 0x83	; 131
    25c2:	79 f4       	brne	.+30     	; 0x25e2 <register_code+0x46>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
    25c4:	0e 94 2a 11 	call	0x2254	; 0x2254 <host_keyboard_leds>
    25c8:	80 fd       	sbrc	r24, 0
    25ca:	ae c0       	rjmp	.+348    	; 0x2728 <register_code+0x18c>
#endif
        add_key(KC_NUMLOCK);
    25cc:	83 e5       	ldi	r24, 0x53	; 83
    25ce:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <add_key>
        send_keyboard_report();
    25d2:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <send_keyboard_report>
        del_key(KC_NUMLOCK);
    25d6:	83 e5       	ldi	r24, 0x53	; 83
    25d8:	0e 94 ac 1c 	call	0x3958	; 0x3958 <del_key>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    25dc:	cf 91       	pop	r28
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
#endif
        add_key(KC_NUMLOCK);
        send_keyboard_report();
        del_key(KC_NUMLOCK);
        send_keyboard_report();
    25de:	0c 94 38 1d 	jmp	0x3a70	; 0x3a70 <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    25e2:	84 38       	cpi	r24, 0x84	; 132
    25e4:	59 f4       	brne	.+22     	; 0x25fc <register_code+0x60>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
    25e6:	0e 94 2a 11 	call	0x2254	; 0x2254 <host_keyboard_leds>
    25ea:	82 fd       	sbrc	r24, 2
    25ec:	9d c0       	rjmp	.+314    	; 0x2728 <register_code+0x18c>
#endif
        add_key(KC_SCROLLLOCK);
    25ee:	87 e4       	ldi	r24, 0x47	; 71
    25f0:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <add_key>
        send_keyboard_report();
    25f4:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    25f8:	87 e4       	ldi	r24, 0x47	; 71
    25fa:	ee cf       	rjmp	.-36     	; 0x25d8 <register_code+0x3c>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    25fc:	8c ef       	ldi	r24, 0xFC	; 252
    25fe:	8c 0f       	add	r24, r28
    2600:	81 3a       	cpi	r24, 0xA1	; 161
    2602:	48 f4       	brcc	.+18     	; 0x2616 <register_code+0x7a>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    2604:	8c 2f       	mov	r24, r28
    2606:	0e 94 00 28 	call	0x5000	; 0x5000 <command_proc>
    260a:	81 11       	cpse	r24, r1
    260c:	8d c0       	rjmp	.+282    	; 0x2728 <register_code+0x18c>
        } else 
*/
#endif
        {
        	// Jemi&20160118
            add_key(code);
    260e:	8c 2f       	mov	r24, r28
    2610:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <add_key>
    2614:	e3 cf       	rjmp	.-58     	; 0x25dc <register_code+0x40>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    2616:	80 e2       	ldi	r24, 0x20	; 32
    2618:	8c 0f       	add	r24, r28
    261a:	88 30       	cpi	r24, 0x08	; 8
    261c:	48 f4       	brcc	.+18     	; 0x2630 <register_code+0x94>
        add_mods(MOD_BIT(code));
    261e:	c7 70       	andi	r28, 0x07	; 7
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	01 c0       	rjmp	.+2      	; 0x2626 <register_code+0x8a>
    2624:	88 0f       	add	r24, r24
    2626:	ca 95       	dec	r28
    2628:	ea f7       	brpl	.-6      	; 0x2624 <register_code+0x88>
    262a:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <add_mods>
    262e:	d6 cf       	rjmp	.-84     	; 0x25dc <register_code+0x40>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    2630:	8b e5       	ldi	r24, 0x5B	; 91
    2632:	8c 0f       	add	r24, r28
    2634:	83 30       	cpi	r24, 0x03	; 3
    2636:	78 f4       	brcc	.+30     	; 0x2656 <register_code+0xba>
        host_system_send(KEYCODE2SYSTEM(code));
    2638:	c5 3a       	cpi	r28, 0xA5	; 165
    263a:	29 f0       	breq	.+10     	; 0x2646 <register_code+0xaa>
    263c:	c6 3a       	cpi	r28, 0xA6	; 166
    263e:	31 f0       	breq	.+12     	; 0x264c <register_code+0xb0>
    2640:	83 e8       	ldi	r24, 0x83	; 131
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	05 c0       	rjmp	.+10     	; 0x2650 <register_code+0xb4>
    2646:	81 e8       	ldi	r24, 0x81	; 129
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	02 c0       	rjmp	.+4      	; 0x2650 <register_code+0xb4>
    264c:	82 e8       	ldi	r24, 0x82	; 130
    264e:	90 e0       	ldi	r25, 0x00	; 0
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    2650:	cf 91       	pop	r28
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    2652:	0c 94 8a 11 	jmp	0x2314	; 0x2314 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    2656:	88 e5       	ldi	r24, 0x58	; 88
    2658:	8c 0f       	add	r24, r28
    265a:	83 31       	cpi	r24, 0x13	; 19
    265c:	08 f0       	brcs	.+2      	; 0x2660 <register_code+0xc4>
    265e:	64 c0       	rjmp	.+200    	; 0x2728 <register_code+0x18c>
        host_consumer_send(KEYCODE2CONSUMER(code));
    2660:	c8 3a       	cpi	r28, 0xA8	; 168
    2662:	39 f1       	breq	.+78     	; 0x26b2 <register_code+0x116>
    2664:	c9 3a       	cpi	r28, 0xA9	; 169
    2666:	41 f1       	breq	.+80     	; 0x26b8 <register_code+0x11c>
    2668:	ca 3a       	cpi	r28, 0xAA	; 170
    266a:	49 f1       	breq	.+82     	; 0x26be <register_code+0x122>
    266c:	cb 3a       	cpi	r28, 0xAB	; 171
    266e:	51 f1       	breq	.+84     	; 0x26c4 <register_code+0x128>
    2670:	cc 3a       	cpi	r28, 0xAC	; 172
    2672:	59 f1       	breq	.+86     	; 0x26ca <register_code+0x12e>
    2674:	cd 3a       	cpi	r28, 0xAD	; 173
    2676:	61 f1       	breq	.+88     	; 0x26d0 <register_code+0x134>
    2678:	c0 3b       	cpi	r28, 0xB0	; 176
    267a:	69 f1       	breq	.+90     	; 0x26d6 <register_code+0x13a>
    267c:	ce 3a       	cpi	r28, 0xAE	; 174
    267e:	71 f1       	breq	.+92     	; 0x26dc <register_code+0x140>
    2680:	cf 3a       	cpi	r28, 0xAF	; 175
    2682:	79 f1       	breq	.+94     	; 0x26e2 <register_code+0x146>
    2684:	c1 3b       	cpi	r28, 0xB1	; 177
    2686:	81 f1       	breq	.+96     	; 0x26e8 <register_code+0x14c>
    2688:	c2 3b       	cpi	r28, 0xB2	; 178
    268a:	89 f1       	breq	.+98     	; 0x26ee <register_code+0x152>
    268c:	c3 3b       	cpi	r28, 0xB3	; 179
    268e:	91 f1       	breq	.+100    	; 0x26f4 <register_code+0x158>
    2690:	c4 3b       	cpi	r28, 0xB4	; 180
    2692:	99 f1       	breq	.+102    	; 0x26fa <register_code+0x15e>
    2694:	c5 3b       	cpi	r28, 0xB5	; 181
    2696:	a1 f1       	breq	.+104    	; 0x2700 <register_code+0x164>
    2698:	c6 3b       	cpi	r28, 0xB6	; 182
    269a:	a9 f1       	breq	.+106    	; 0x2706 <register_code+0x16a>
    269c:	c7 3b       	cpi	r28, 0xB7	; 183
    269e:	b1 f1       	breq	.+108    	; 0x270c <register_code+0x170>
    26a0:	c8 3b       	cpi	r28, 0xB8	; 184
    26a2:	b9 f1       	breq	.+110    	; 0x2712 <register_code+0x176>
    26a4:	c9 3b       	cpi	r28, 0xB9	; 185
    26a6:	c1 f1       	breq	.+112    	; 0x2718 <register_code+0x17c>
    26a8:	ca 3b       	cpi	r28, 0xBA	; 186
    26aa:	c9 f1       	breq	.+114    	; 0x271e <register_code+0x182>
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	38 c0       	rjmp	.+112    	; 0x2722 <register_code+0x186>
    26b2:	82 ee       	ldi	r24, 0xE2	; 226
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	35 c0       	rjmp	.+106    	; 0x2722 <register_code+0x186>
    26b8:	89 ee       	ldi	r24, 0xE9	; 233
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	32 c0       	rjmp	.+100    	; 0x2722 <register_code+0x186>
    26be:	8a ee       	ldi	r24, 0xEA	; 234
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	2f c0       	rjmp	.+94     	; 0x2722 <register_code+0x186>
    26c4:	85 eb       	ldi	r24, 0xB5	; 181
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	2c c0       	rjmp	.+88     	; 0x2722 <register_code+0x186>
    26ca:	86 eb       	ldi	r24, 0xB6	; 182
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	29 c0       	rjmp	.+82     	; 0x2722 <register_code+0x186>
    26d0:	87 eb       	ldi	r24, 0xB7	; 183
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	26 c0       	rjmp	.+76     	; 0x2722 <register_code+0x186>
    26d6:	8c ec       	ldi	r24, 0xCC	; 204
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	23 c0       	rjmp	.+70     	; 0x2722 <register_code+0x186>
    26dc:	8d ec       	ldi	r24, 0xCD	; 205
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	20 c0       	rjmp	.+64     	; 0x2722 <register_code+0x186>
    26e2:	83 e8       	ldi	r24, 0x83	; 131
    26e4:	91 e0       	ldi	r25, 0x01	; 1
    26e6:	1d c0       	rjmp	.+58     	; 0x2722 <register_code+0x186>
    26e8:	8a e8       	ldi	r24, 0x8A	; 138
    26ea:	91 e0       	ldi	r25, 0x01	; 1
    26ec:	1a c0       	rjmp	.+52     	; 0x2722 <register_code+0x186>
    26ee:	82 e9       	ldi	r24, 0x92	; 146
    26f0:	91 e0       	ldi	r25, 0x01	; 1
    26f2:	17 c0       	rjmp	.+46     	; 0x2722 <register_code+0x186>
    26f4:	84 e9       	ldi	r24, 0x94	; 148
    26f6:	91 e0       	ldi	r25, 0x01	; 1
    26f8:	14 c0       	rjmp	.+40     	; 0x2722 <register_code+0x186>
    26fa:	81 e2       	ldi	r24, 0x21	; 33
    26fc:	92 e0       	ldi	r25, 0x02	; 2
    26fe:	11 c0       	rjmp	.+34     	; 0x2722 <register_code+0x186>
    2700:	83 e2       	ldi	r24, 0x23	; 35
    2702:	92 e0       	ldi	r25, 0x02	; 2
    2704:	0e c0       	rjmp	.+28     	; 0x2722 <register_code+0x186>
    2706:	84 e2       	ldi	r24, 0x24	; 36
    2708:	92 e0       	ldi	r25, 0x02	; 2
    270a:	0b c0       	rjmp	.+22     	; 0x2722 <register_code+0x186>
    270c:	85 e2       	ldi	r24, 0x25	; 37
    270e:	92 e0       	ldi	r25, 0x02	; 2
    2710:	08 c0       	rjmp	.+16     	; 0x2722 <register_code+0x186>
    2712:	86 e2       	ldi	r24, 0x26	; 38
    2714:	92 e0       	ldi	r25, 0x02	; 2
    2716:	05 c0       	rjmp	.+10     	; 0x2722 <register_code+0x186>
    2718:	87 e2       	ldi	r24, 0x27	; 39
    271a:	92 e0       	ldi	r25, 0x02	; 2
    271c:	02 c0       	rjmp	.+4      	; 0x2722 <register_code+0x186>
    271e:	8a e2       	ldi	r24, 0x2A	; 42
    2720:	92 e0       	ldi	r25, 0x02	; 2
    }
}
    2722:	cf 91       	pop	r28
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    2724:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <host_consumer_send>
    }
}
    2728:	cf 91       	pop	r28
    272a:	08 95       	ret

0000272c <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    272c:	88 23       	and	r24, r24
    272e:	09 f4       	brne	.+2      	; 0x2732 <unregister_code+0x6>
    2730:	4b c0       	rjmp	.+150    	; 0x27c8 <unregister_code+0x9c>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    2732:	82 38       	cpi	r24, 0x82	; 130
    2734:	59 f4       	brne	.+22     	; 0x274c <unregister_code+0x20>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is off
        if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
    2736:	0e 94 2a 11 	call	0x2254	; 0x2254 <host_keyboard_leds>
    273a:	81 ff       	sbrs	r24, 1
    273c:	45 c0       	rjmp	.+138    	; 0x27c8 <unregister_code+0x9c>
#endif
        add_key(KC_CAPSLOCK);
    273e:	89 e3       	ldi	r24, 0x39	; 57
    2740:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <add_key>
        send_keyboard_report();
    2744:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    2748:	89 e3       	ldi	r24, 0x39	; 57
    274a:	0c c0       	rjmp	.+24     	; 0x2764 <unregister_code+0x38>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    274c:	83 38       	cpi	r24, 0x83	; 131
    274e:	71 f4       	brne	.+28     	; 0x276c <unregister_code+0x40>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
    2750:	0e 94 2a 11 	call	0x2254	; 0x2254 <host_keyboard_leds>
    2754:	80 ff       	sbrs	r24, 0
    2756:	38 c0       	rjmp	.+112    	; 0x27c8 <unregister_code+0x9c>
#endif
        add_key(KC_NUMLOCK);
    2758:	83 e5       	ldi	r24, 0x53	; 83
    275a:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <add_key>
        send_keyboard_report();
    275e:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <send_keyboard_report>
        del_key(KC_NUMLOCK);
    2762:	83 e5       	ldi	r24, 0x53	; 83
    2764:	0e 94 ac 1c 	call	0x3958	; 0x3958 <del_key>
        send_keyboard_report();
    2768:	0c 94 38 1d 	jmp	0x3a70	; 0x3a70 <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    276c:	84 38       	cpi	r24, 0x84	; 132
    276e:	59 f4       	brne	.+22     	; 0x2786 <unregister_code+0x5a>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
    2770:	0e 94 2a 11 	call	0x2254	; 0x2254 <host_keyboard_leds>
    2774:	82 ff       	sbrs	r24, 2
    2776:	28 c0       	rjmp	.+80     	; 0x27c8 <unregister_code+0x9c>
#endif
        add_key(KC_SCROLLLOCK);
    2778:	87 e4       	ldi	r24, 0x47	; 71
    277a:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <add_key>
        send_keyboard_report();
    277e:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    2782:	87 e4       	ldi	r24, 0x47	; 71
    2784:	ef cf       	rjmp	.-34     	; 0x2764 <unregister_code+0x38>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    2786:	9c ef       	ldi	r25, 0xFC	; 252
    2788:	98 0f       	add	r25, r24
    278a:	91 3a       	cpi	r25, 0xA1	; 161
    278c:	58 f3       	brcs	.-42     	; 0x2764 <unregister_code+0x38>
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    278e:	90 e2       	ldi	r25, 0x20	; 32
    2790:	98 0f       	add	r25, r24
    2792:	98 30       	cpi	r25, 0x08	; 8
    2794:	50 f4       	brcc	.+20     	; 0x27aa <unregister_code+0x7e>
        del_mods(MOD_BIT(code));
    2796:	87 70       	andi	r24, 0x07	; 7
    2798:	91 e0       	ldi	r25, 0x01	; 1
    279a:	01 c0       	rjmp	.+2      	; 0x279e <unregister_code+0x72>
    279c:	99 0f       	add	r25, r25
    279e:	8a 95       	dec	r24
    27a0:	ea f7       	brpl	.-6      	; 0x279c <unregister_code+0x70>
    27a2:	89 2f       	mov	r24, r25
    27a4:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <del_mods>
    27a8:	df cf       	rjmp	.-66     	; 0x2768 <unregister_code+0x3c>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    27aa:	9b e5       	ldi	r25, 0x5B	; 91
    27ac:	98 0f       	add	r25, r24
    27ae:	93 30       	cpi	r25, 0x03	; 3
    27b0:	20 f4       	brcc	.+8      	; 0x27ba <unregister_code+0x8e>
        host_system_send(0);
    27b2:	80 e0       	ldi	r24, 0x00	; 0
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	0c 94 8a 11 	jmp	0x2314	; 0x2314 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    27ba:	88 5a       	subi	r24, 0xA8	; 168
    27bc:	83 31       	cpi	r24, 0x13	; 19
    27be:	20 f4       	brcc	.+8      	; 0x27c8 <unregister_code+0x9c>
        host_consumer_send(0);
    27c0:	80 e0       	ldi	r24, 0x00	; 0
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <host_consumer_send>
    27c8:	08 95       	ret

000027ca <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    27ca:	88 23       	and	r24, r24
    27cc:	21 f0       	breq	.+8      	; 0x27d6 <register_mods+0xc>
        add_mods(mods);
    27ce:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <add_mods>
        send_keyboard_report();
    27d2:	0c 94 38 1d 	jmp	0x3a70	; 0x3a70 <send_keyboard_report>
    27d6:	08 95       	ret

000027d8 <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    27d8:	88 23       	and	r24, r24
    27da:	21 f0       	breq	.+8      	; 0x27e4 <unregister_mods+0xc>
        del_mods(mods);
    27dc:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <del_mods>
        send_keyboard_report();
    27e0:	0c 94 38 1d 	jmp	0x3a70	; 0x3a70 <send_keyboard_report>
    27e4:	08 95       	ret

000027e6 <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    27e6:	bf 92       	push	r11
    27e8:	cf 92       	push	r12
    27ea:	df 92       	push	r13
    27ec:	ef 92       	push	r14
    27ee:	ff 92       	push	r15
    27f0:	0f 93       	push	r16
    27f2:	1f 93       	push	r17
    27f4:	cf 93       	push	r28
    27f6:	df 93       	push	r29
    27f8:	00 d0       	rcall	.+0      	; 0x27fa <process_action+0x14>
    27fa:	00 d0       	rcall	.+0      	; 0x27fc <process_action+0x16>
    27fc:	00 d0       	rcall	.+0      	; 0x27fe <process_action+0x18>
    27fe:	cd b7       	in	r28, 0x3d	; 61
    2800:	de b7       	in	r29, 0x3e	; 62
    keyevent_t event = record->event;
    2802:	25 e0       	ldi	r18, 0x05	; 5
    2804:	fc 01       	movw	r30, r24
    2806:	de 01       	movw	r26, r28
    2808:	11 96       	adiw	r26, 0x01	; 1
    280a:	01 90       	ld	r0, Z+
    280c:	0d 92       	st	X+, r0
    280e:	2a 95       	dec	r18
    2810:	e1 f7       	brne	.-8      	; 0x280a <process_action+0x24>
    2812:	fc 01       	movw	r30, r24
    2814:	40 81       	ld	r20, Z
    2816:	31 81       	ldd	r19, Z+1	; 0x01
    2818:	02 81       	ldd	r16, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    281a:	25 81       	ldd	r18, Z+5	; 0x05
    281c:	22 95       	swap	r18
    281e:	2f 70       	andi	r18, 0x0F	; 15

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    2820:	63 81       	ldd	r22, Z+3	; 0x03
    2822:	74 81       	ldd	r23, Z+4	; 0x04
    2824:	67 2b       	or	r22, r23
    2826:	09 f4       	brne	.+2      	; 0x282a <process_action+0x44>
    2828:	ec c2       	rjmp	.+1496   	; 0x2e02 <process_action+0x61c>
    282a:	3f 3f       	cpi	r19, 0xFF	; 255
    282c:	19 f4       	brne	.+6      	; 0x2834 <process_action+0x4e>
#endif

    if (IS_NOEVENT(event)) { return; }
    282e:	4f 3f       	cpi	r20, 0xFF	; 255
    2830:	09 f4       	brne	.+2      	; 0x2834 <process_action+0x4e>
    2832:	e7 c2       	rjmp	.+1486   	; 0x2e02 <process_action+0x61c>
    2834:	7c 01       	movw	r14, r24

    action_t action = layer_switch_get_action(event.key);
    2836:	49 83       	std	Y+1, r20	; 0x01
    2838:	3a 83       	std	Y+2, r19	; 0x02
    283a:	89 81       	ldd	r24, Y+1	; 0x01
    283c:	9a 81       	ldd	r25, Y+2	; 0x02
    283e:	2e 83       	std	Y+6, r18	; 0x06
    2840:	0e 94 18 1c 	call	0x3830	; 0x3830 <layer_switch_get_action>
    2844:	18 2f       	mov	r17, r24
    2846:	b9 2e       	mov	r11, r25
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    2848:	0e 94 17 1c 	call	0x382e	; 0x382e <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    284c:	0e 94 de 1a 	call	0x35bc	; 0x35bc <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    2850:	eb 2d       	mov	r30, r11
    2852:	e2 95       	swap	r30
    2854:	ef 70       	andi	r30, 0x0F	; 15
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	e0 5a       	subi	r30, 0xA0	; 160
    285a:	ff 4f       	sbci	r31, 0xFF	; 255
    285c:	2e 81       	ldd	r18, Y+6	; 0x06
    285e:	0c 94 97 2a 	jmp	0x552e	; 0x552e <__tablejump2__>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    2862:	8b 2d       	mov	r24, r11
    2864:	80 7f       	andi	r24, 0xF0	; 240
    2866:	9b 2d       	mov	r25, r11
    2868:	9f 70       	andi	r25, 0x0F	; 15
    286a:	f9 2e       	mov	r15, r25
    286c:	88 23       	and	r24, r24
    286e:	19 f0       	breq	.+6      	; 0x2876 <process_action+0x90>
    2870:	f2 94       	swap	r15
    2872:	80 ef       	ldi	r24, 0xF0	; 240
    2874:	f8 22       	and	r15, r24
                                                                action.key.mods<<4;
                if (event.pressed) {
    2876:	00 23       	and	r16, r16
    2878:	49 f0       	breq	.+18     	; 0x288c <process_action+0xa6>
                    if (mods) {
    287a:	ff 20       	and	r15, r15
    287c:	09 f4       	brne	.+2      	; 0x2880 <process_action+0x9a>
    287e:	6e c2       	rjmp	.+1244   	; 0x2d5c <process_action+0x576>
                        add_weak_mods(mods);
    2880:	8f 2d       	mov	r24, r15
    2882:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <add_weak_mods>
                        send_keyboard_report();
    2886:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <send_keyboard_report>
    288a:	68 c2       	rjmp	.+1232   	; 0x2d5c <process_action+0x576>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    288c:	81 2f       	mov	r24, r17
    288e:	0e 94 96 13 	call	0x272c	; 0x272c <unregister_code>
                    if (mods) {
    2892:	ff 20       	and	r15, r15
    2894:	09 f4       	brne	.+2      	; 0x2898 <process_action+0xb2>
    2896:	b5 c2       	rjmp	.+1386   	; 0x2e02 <process_action+0x61c>
                        del_weak_mods(mods);
    2898:	8f 2d       	mov	r24, r15
    289a:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    289e:	26 96       	adiw	r28, 0x06	; 6
    28a0:	0f b6       	in	r0, 0x3f	; 63
    28a2:	f8 94       	cli
    28a4:	de bf       	out	0x3e, r29	; 62
    28a6:	0f be       	out	0x3f, r0	; 63
    28a8:	cd bf       	out	0x3d, r28	; 61
    28aa:	df 91       	pop	r29
    28ac:	cf 91       	pop	r28
    28ae:	1f 91       	pop	r17
    28b0:	0f 91       	pop	r16
    28b2:	ff 90       	pop	r15
    28b4:	ef 90       	pop	r14
    28b6:	df 90       	pop	r13
    28b8:	cf 90       	pop	r12
    28ba:	bf 90       	pop	r11
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    28bc:	0c 94 38 1d 	jmp	0x3a70	; 0x3a70 <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    28c0:	8b 2d       	mov	r24, r11
    28c2:	80 7f       	andi	r24, 0xF0	; 240
    28c4:	9b 2d       	mov	r25, r11
    28c6:	9f 70       	andi	r25, 0x0F	; 15
    28c8:	80 32       	cpi	r24, 0x20	; 32
    28ca:	11 f4       	brne	.+4      	; 0x28d0 <process_action+0xea>
    28cc:	89 2f       	mov	r24, r25
    28ce:	03 c0       	rjmp	.+6      	; 0x28d6 <process_action+0xf0>
    28d0:	89 2f       	mov	r24, r25
    28d2:	82 95       	swap	r24
    28d4:	80 7f       	andi	r24, 0xF0	; 240
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
    28d6:	11 23       	and	r17, r17
    28d8:	19 f0       	breq	.+6      	; 0x28e0 <process_action+0xfa>
    28da:	11 30       	cpi	r17, 0x01	; 1
    28dc:	11 f1       	breq	.+68     	; 0x2922 <process_action+0x13c>
    28de:	2b c0       	rjmp	.+86     	; 0x2936 <process_action+0x150>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    28e0:	00 23       	and	r16, r16
    28e2:	a9 f0       	breq	.+42     	; 0x290e <process_action+0x128>
                            if (tap_count == 0) {
    28e4:	22 23       	and	r18, r18
    28e6:	89 f1       	breq	.+98     	; 0x294a <process_action+0x164>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    28e8:	21 30       	cpi	r18, 0x01	; 1
    28ea:	79 f5       	brne	.+94     	; 0x294a <process_action+0x164>
            break;
#endif
        default:
            break;
    }
}
    28ec:	26 96       	adiw	r28, 0x06	; 6
    28ee:	0f b6       	in	r0, 0x3f	; 63
    28f0:	f8 94       	cli
    28f2:	de bf       	out	0x3e, r29	; 62
    28f4:	0f be       	out	0x3f, r0	; 63
    28f6:	cd bf       	out	0x3d, r28	; 61
    28f8:	df 91       	pop	r29
    28fa:	cf 91       	pop	r28
    28fc:	1f 91       	pop	r17
    28fe:	0f 91       	pop	r16
    2900:	ff 90       	pop	r15
    2902:	ef 90       	pop	r14
    2904:	df 90       	pop	r13
    2906:	cf 90       	pop	r12
    2908:	bf 90       	pop	r11
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");

								// Jemi&20160118
                                set_oneshot_mods(mods);
    290a:	0c 94 21 1d 	jmp	0x3a42	; 0x3a42 <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    290e:	22 23       	and	r18, r18
    2910:	19 f0       	breq	.+6      	; 0x2918 <process_action+0x132>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    2912:	21 30       	cpi	r18, 0x01	; 1
    2914:	09 f4       	brne	.+2      	; 0x2918 <process_action+0x132>
    2916:	75 c2       	rjmp	.+1258   	; 0x2e02 <process_action+0x61c>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    2918:	8e 83       	std	Y+6, r24	; 0x06
    291a:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <clear_oneshot_mods>
                                unregister_mods(mods);
    291e:	8e 81       	ldd	r24, Y+6	; 0x06
    2920:	9b c1       	rjmp	.+822    	; 0x2c58 <process_action+0x472>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    2922:	00 23       	and	r16, r16
    2924:	21 f0       	breq	.+8      	; 0x292e <process_action+0x148>
                            if (tap_count <= TAPPING_TOGGLE) {
    2926:	26 30       	cpi	r18, 0x06	; 6
    2928:	08 f0       	brcs	.+2      	; 0x292c <process_action+0x146>
    292a:	6b c2       	rjmp	.+1238   	; 0x2e02 <process_action+0x61c>
    292c:	0e c0       	rjmp	.+28     	; 0x294a <process_action+0x164>
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    292e:	25 30       	cpi	r18, 0x05	; 5
    2930:	08 f0       	brcs	.+2      	; 0x2934 <process_action+0x14e>
    2932:	67 c2       	rjmp	.+1230   	; 0x2e02 <process_action+0x61c>
    2934:	91 c1       	rjmp	.+802    	; 0x2c58 <process_action+0x472>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    2936:	00 23       	and	r16, r16
    2938:	c9 f0       	breq	.+50     	; 0x296c <process_action+0x186>
                            if (tap_count > 0) {
    293a:	22 23       	and	r18, r18
    293c:	31 f0       	breq	.+12     	; 0x294a <process_action+0x164>
                                if (record->tap.interrupted) {
    293e:	f7 01       	movw	r30, r14
    2940:	95 81       	ldd	r25, Z+5	; 0x05
    2942:	90 ff       	sbrs	r25, 0
    2944:	0b c2       	rjmp	.+1046   	; 0x2d5c <process_action+0x576>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    2946:	9f 70       	andi	r25, 0x0F	; 15
    2948:	95 83       	std	Z+5, r25	; 0x05
            break;
#endif
        default:
            break;
    }
}
    294a:	26 96       	adiw	r28, 0x06	; 6
    294c:	0f b6       	in	r0, 0x3f	; 63
    294e:	f8 94       	cli
    2950:	de bf       	out	0x3e, r29	; 62
    2952:	0f be       	out	0x3f, r0	; 63
    2954:	cd bf       	out	0x3d, r28	; 61
    2956:	df 91       	pop	r29
    2958:	cf 91       	pop	r28
    295a:	1f 91       	pop	r17
    295c:	0f 91       	pop	r16
    295e:	ff 90       	pop	r15
    2960:	ef 90       	pop	r14
    2962:	df 90       	pop	r13
    2964:	cf 90       	pop	r12
    2966:	bf 90       	pop	r11
                            if (tap_count > 0) {
                                if (record->tap.interrupted) {
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
                                    register_mods(mods);
    2968:	0c 94 e5 13 	jmp	0x27ca	; 0x27ca <register_mods>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    296c:	22 23       	and	r18, r18
    296e:	09 f4       	brne	.+2      	; 0x2972 <process_action+0x18c>
    2970:	73 c1       	rjmp	.+742    	; 0x2c58 <process_action+0x472>
    2972:	09 c2       	rjmp	.+1042   	; 0x2d86 <process_action+0x5a0>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    2974:	2b 2d       	mov	r18, r11
    2976:	26 95       	lsr	r18
    2978:	26 95       	lsr	r18
    297a:	23 70       	andi	r18, 0x03	; 3
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	21 15       	cp	r18, r1
    2980:	31 05       	cpc	r19, r1
    2982:	21 f0       	breq	.+8      	; 0x298c <process_action+0x1a6>
    2984:	21 30       	cpi	r18, 0x01	; 1
    2986:	31 05       	cpc	r19, r1
    2988:	d1 f0       	breq	.+52     	; 0x29be <process_action+0x1d8>
    298a:	3b c2       	rjmp	.+1142   	; 0x2e02 <process_action+0x61c>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    298c:	00 23       	and	r16, r16
    298e:	21 f0       	breq	.+8      	; 0x2998 <process_action+0x1b2>
                        host_system_send(action.usage.code);
    2990:	81 2f       	mov	r24, r17
    2992:	9b 2d       	mov	r25, r11
    2994:	93 70       	andi	r25, 0x03	; 3
    2996:	02 c0       	rjmp	.+4      	; 0x299c <process_action+0x1b6>
                    } else {
                        host_system_send(0);
    2998:	80 e0       	ldi	r24, 0x00	; 0
    299a:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    299c:	26 96       	adiw	r28, 0x06	; 6
    299e:	0f b6       	in	r0, 0x3f	; 63
    29a0:	f8 94       	cli
    29a2:	de bf       	out	0x3e, r29	; 62
    29a4:	0f be       	out	0x3f, r0	; 63
    29a6:	cd bf       	out	0x3d, r28	; 61
    29a8:	df 91       	pop	r29
    29aa:	cf 91       	pop	r28
    29ac:	1f 91       	pop	r17
    29ae:	0f 91       	pop	r16
    29b0:	ff 90       	pop	r15
    29b2:	ef 90       	pop	r14
    29b4:	df 90       	pop	r13
    29b6:	cf 90       	pop	r12
    29b8:	bf 90       	pop	r11
            switch (action.usage.page) {
                case PAGE_SYSTEM:
                    if (event.pressed) {
                        host_system_send(action.usage.code);
                    } else {
                        host_system_send(0);
    29ba:	0c 94 8a 11 	jmp	0x2314	; 0x2314 <host_system_send>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    29be:	00 23       	and	r16, r16
    29c0:	21 f0       	breq	.+8      	; 0x29ca <process_action+0x1e4>
                        host_consumer_send(action.usage.code);
    29c2:	81 2f       	mov	r24, r17
    29c4:	9b 2d       	mov	r25, r11
    29c6:	93 70       	andi	r25, 0x03	; 3
    29c8:	02 c0       	rjmp	.+4      	; 0x29ce <process_action+0x1e8>
                    } else {
                        host_consumer_send(0);
    29ca:	80 e0       	ldi	r24, 0x00	; 0
    29cc:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    29ce:	26 96       	adiw	r28, 0x06	; 6
    29d0:	0f b6       	in	r0, 0x3f	; 63
    29d2:	f8 94       	cli
    29d4:	de bf       	out	0x3e, r29	; 62
    29d6:	0f be       	out	0x3f, r0	; 63
    29d8:	cd bf       	out	0x3d, r28	; 61
    29da:	df 91       	pop	r29
    29dc:	cf 91       	pop	r28
    29de:	1f 91       	pop	r17
    29e0:	0f 91       	pop	r16
    29e2:	ff 90       	pop	r15
    29e4:	ef 90       	pop	r14
    29e6:	df 90       	pop	r13
    29e8:	cf 90       	pop	r12
    29ea:	bf 90       	pop	r11
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
                        host_consumer_send(action.usage.code);
                    } else {
                        host_consumer_send(0);
    29ec:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <host_consumer_send>
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
                mousekey_on(action.key.code);
    29f0:	81 2f       	mov	r24, r17
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    29f2:	00 23       	and	r16, r16
    29f4:	19 f0       	breq	.+6      	; 0x29fc <process_action+0x216>
                mousekey_on(action.key.code);
    29f6:	0e 94 ff 21 	call	0x43fe	; 0x43fe <mousekey_on>
    29fa:	02 c0       	rjmp	.+4      	; 0x2a00 <process_action+0x21a>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    29fc:	0e 94 67 22 	call	0x44ce	; 0x44ce <mousekey_off>
            break;
#endif
        default:
            break;
    }
}
    2a00:	26 96       	adiw	r28, 0x06	; 6
    2a02:	0f b6       	in	r0, 0x3f	; 63
    2a04:	f8 94       	cli
    2a06:	de bf       	out	0x3e, r29	; 62
    2a08:	0f be       	out	0x3f, r0	; 63
    2a0a:	cd bf       	out	0x3d, r28	; 61
    2a0c:	df 91       	pop	r29
    2a0e:	cf 91       	pop	r28
    2a10:	1f 91       	pop	r17
    2a12:	0f 91       	pop	r16
    2a14:	ff 90       	pop	r15
    2a16:	ef 90       	pop	r14
    2a18:	df 90       	pop	r13
    2a1a:	cf 90       	pop	r12
    2a1c:	bf 90       	pop	r11
            if (event.pressed) {
                mousekey_on(action.key.code);
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
                mousekey_send();
    2a1e:	0c 94 ec 22 	jmp	0x45d8	; 0x45d8 <mousekey_send>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    2a22:	8b 2d       	mov	r24, r11
    2a24:	83 70       	andi	r24, 0x03	; 3
    2a26:	09 f0       	breq	.+2      	; 0x2a2a <process_action+0x244>
    2a28:	7b c0       	rjmp	.+246    	; 0x2b20 <process_action+0x33a>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    2a2a:	01 11       	cpse	r16, r1
    2a2c:	ea c1       	rjmp	.+980    	; 0x2e02 <process_action+0x61c>
                    uint8_t shift = action.layer_bitop.part*4;
    2a2e:	81 2f       	mov	r24, r17
    2a30:	82 95       	swap	r24
    2a32:	86 95       	lsr	r24
    2a34:	87 70       	andi	r24, 0x07	; 7
    2a36:	88 0f       	add	r24, r24
    2a38:	88 0f       	add	r24, r24
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2a3a:	91 2f       	mov	r25, r17
    2a3c:	9f 70       	andi	r25, 0x0F	; 15
    2a3e:	c9 2e       	mov	r12, r25
    2a40:	d1 2c       	mov	r13, r1
    2a42:	e1 2c       	mov	r14, r1
    2a44:	f1 2c       	mov	r15, r1
    2a46:	08 2e       	mov	r0, r24
    2a48:	04 c0       	rjmp	.+8      	; 0x2a52 <process_action+0x26c>
    2a4a:	cc 0c       	add	r12, r12
    2a4c:	dd 1c       	adc	r13, r13
    2a4e:	ee 1c       	adc	r14, r14
    2a50:	ff 1c       	adc	r15, r15
    2a52:	0a 94       	dec	r0
    2a54:	d2 f7       	brpl	.-12     	; 0x2a4a <process_action+0x264>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2a56:	14 ff       	sbrs	r17, 4
    2a58:	12 c0       	rjmp	.+36     	; 0x2a7e <process_action+0x298>
    2a5a:	4f e0       	ldi	r20, 0x0F	; 15
    2a5c:	50 e0       	ldi	r21, 0x00	; 0
    2a5e:	60 e0       	ldi	r22, 0x00	; 0
    2a60:	70 e0       	ldi	r23, 0x00	; 0
    2a62:	04 c0       	rjmp	.+8      	; 0x2a6c <process_action+0x286>
    2a64:	44 0f       	add	r20, r20
    2a66:	55 1f       	adc	r21, r21
    2a68:	66 1f       	adc	r22, r22
    2a6a:	77 1f       	adc	r23, r23
    2a6c:	8a 95       	dec	r24
    2a6e:	d2 f7       	brpl	.-12     	; 0x2a64 <process_action+0x27e>
    2a70:	cb 01       	movw	r24, r22
    2a72:	ba 01       	movw	r22, r20
    2a74:	60 95       	com	r22
    2a76:	70 95       	com	r23
    2a78:	80 95       	com	r24
    2a7a:	90 95       	com	r25
    2a7c:	03 c0       	rjmp	.+6      	; 0x2a84 <process_action+0x29e>
    2a7e:	60 e0       	ldi	r22, 0x00	; 0
    2a80:	70 e0       	ldi	r23, 0x00	; 0
    2a82:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2a84:	2b 2d       	mov	r18, r11
    2a86:	26 95       	lsr	r18
    2a88:	26 95       	lsr	r18
    2a8a:	23 70       	andi	r18, 0x03	; 3
    2a8c:	42 2f       	mov	r20, r18
    2a8e:	50 e0       	ldi	r21, 0x00	; 0
    2a90:	42 30       	cpi	r20, 0x02	; 2
    2a92:	51 05       	cpc	r21, r1
    2a94:	d9 f0       	breq	.+54     	; 0x2acc <process_action+0x2e6>
    2a96:	43 30       	cpi	r20, 0x03	; 3
    2a98:	51 05       	cpc	r21, r1
    2a9a:	69 f1       	breq	.+90     	; 0x2af6 <process_action+0x310>
    2a9c:	6c 29       	or	r22, r12
    2a9e:	7d 29       	or	r23, r13
    2aa0:	8e 29       	or	r24, r14
    2aa2:	9f 29       	or	r25, r15
    2aa4:	41 30       	cpi	r20, 0x01	; 1
    2aa6:	51 05       	cpc	r21, r1
    2aa8:	51 f1       	breq	.+84     	; 0x2afe <process_action+0x318>
            break;
#endif
        default:
            break;
    }
}
    2aaa:	26 96       	adiw	r28, 0x06	; 6
    2aac:	0f b6       	in	r0, 0x3f	; 63
    2aae:	f8 94       	cli
    2ab0:	de bf       	out	0x3e, r29	; 62
    2ab2:	0f be       	out	0x3f, r0	; 63
    2ab4:	cd bf       	out	0x3d, r28	; 61
    2ab6:	df 91       	pop	r29
    2ab8:	cf 91       	pop	r28
    2aba:	1f 91       	pop	r17
    2abc:	0f 91       	pop	r16
    2abe:	ff 90       	pop	r15
    2ac0:	ef 90       	pop	r14
    2ac2:	df 90       	pop	r13
    2ac4:	cf 90       	pop	r12
    2ac6:	bf 90       	pop	r11
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    2ac8:	0c 94 05 1b 	jmp	0x360a	; 0x360a <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2acc:	6c 29       	or	r22, r12
    2ace:	7d 29       	or	r23, r13
    2ad0:	8e 29       	or	r24, r14
    2ad2:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2ad4:	26 96       	adiw	r28, 0x06	; 6
    2ad6:	0f b6       	in	r0, 0x3f	; 63
    2ad8:	f8 94       	cli
    2ada:	de bf       	out	0x3e, r29	; 62
    2adc:	0f be       	out	0x3f, r0	; 63
    2ade:	cd bf       	out	0x3d, r28	; 61
    2ae0:	df 91       	pop	r29
    2ae2:	cf 91       	pop	r28
    2ae4:	1f 91       	pop	r17
    2ae6:	0f 91       	pop	r16
    2ae8:	ff 90       	pop	r15
    2aea:	ef 90       	pop	r14
    2aec:	df 90       	pop	r13
    2aee:	cf 90       	pop	r12
    2af0:	bf 90       	pop	r11
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2af2:	0c 94 21 1b 	jmp	0x3642	; 0x3642 <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2af6:	0e 94 05 1b 	call	0x360a	; 0x360a <default_layer_and>
    2afa:	c7 01       	movw	r24, r14
    2afc:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2afe:	26 96       	adiw	r28, 0x06	; 6
    2b00:	0f b6       	in	r0, 0x3f	; 63
    2b02:	f8 94       	cli
    2b04:	de bf       	out	0x3e, r29	; 62
    2b06:	0f be       	out	0x3f, r0	; 63
    2b08:	cd bf       	out	0x3d, r28	; 61
    2b0a:	df 91       	pop	r29
    2b0c:	cf 91       	pop	r28
    2b0e:	1f 91       	pop	r17
    2b10:	0f 91       	pop	r16
    2b12:	ff 90       	pop	r15
    2b14:	ef 90       	pop	r14
    2b16:	df 90       	pop	r13
    2b18:	cf 90       	pop	r12
    2b1a:	bf 90       	pop	r11
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2b1c:	0c 94 e9 1a 	jmp	0x35d2	; 0x35d2 <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    2b20:	00 23       	and	r16, r16
    2b22:	19 f0       	breq	.+6      	; 0x2b2a <process_action+0x344>
    2b24:	8b 2d       	mov	r24, r11
    2b26:	81 70       	andi	r24, 0x01	; 1
    2b28:	01 c0       	rjmp	.+2      	; 0x2b2c <process_action+0x346>
    2b2a:	86 95       	lsr	r24
    2b2c:	88 23       	and	r24, r24
    2b2e:	09 f4       	brne	.+2      	; 0x2b32 <process_action+0x34c>
    2b30:	68 c1       	rjmp	.+720    	; 0x2e02 <process_action+0x61c>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    2b32:	81 2f       	mov	r24, r17
    2b34:	82 95       	swap	r24
    2b36:	86 95       	lsr	r24
    2b38:	87 70       	andi	r24, 0x07	; 7
    2b3a:	88 0f       	add	r24, r24
    2b3c:	88 0f       	add	r24, r24
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2b3e:	91 2f       	mov	r25, r17
    2b40:	9f 70       	andi	r25, 0x0F	; 15
    2b42:	c9 2e       	mov	r12, r25
    2b44:	d1 2c       	mov	r13, r1
    2b46:	e1 2c       	mov	r14, r1
    2b48:	f1 2c       	mov	r15, r1
    2b4a:	08 2e       	mov	r0, r24
    2b4c:	04 c0       	rjmp	.+8      	; 0x2b56 <process_action+0x370>
    2b4e:	cc 0c       	add	r12, r12
    2b50:	dd 1c       	adc	r13, r13
    2b52:	ee 1c       	adc	r14, r14
    2b54:	ff 1c       	adc	r15, r15
    2b56:	0a 94       	dec	r0
    2b58:	d2 f7       	brpl	.-12     	; 0x2b4e <process_action+0x368>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2b5a:	14 ff       	sbrs	r17, 4
    2b5c:	12 c0       	rjmp	.+36     	; 0x2b82 <process_action+0x39c>
    2b5e:	4f e0       	ldi	r20, 0x0F	; 15
    2b60:	50 e0       	ldi	r21, 0x00	; 0
    2b62:	60 e0       	ldi	r22, 0x00	; 0
    2b64:	70 e0       	ldi	r23, 0x00	; 0
    2b66:	04 c0       	rjmp	.+8      	; 0x2b70 <process_action+0x38a>
    2b68:	44 0f       	add	r20, r20
    2b6a:	55 1f       	adc	r21, r21
    2b6c:	66 1f       	adc	r22, r22
    2b6e:	77 1f       	adc	r23, r23
    2b70:	8a 95       	dec	r24
    2b72:	d2 f7       	brpl	.-12     	; 0x2b68 <process_action+0x382>
    2b74:	cb 01       	movw	r24, r22
    2b76:	ba 01       	movw	r22, r20
    2b78:	60 95       	com	r22
    2b7a:	70 95       	com	r23
    2b7c:	80 95       	com	r24
    2b7e:	90 95       	com	r25
    2b80:	03 c0       	rjmp	.+6      	; 0x2b88 <process_action+0x3a2>
    2b82:	60 e0       	ldi	r22, 0x00	; 0
    2b84:	70 e0       	ldi	r23, 0x00	; 0
    2b86:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2b88:	2b 2d       	mov	r18, r11
    2b8a:	26 95       	lsr	r18
    2b8c:	26 95       	lsr	r18
    2b8e:	23 70       	andi	r18, 0x03	; 3
    2b90:	42 2f       	mov	r20, r18
    2b92:	50 e0       	ldi	r21, 0x00	; 0
    2b94:	42 30       	cpi	r20, 0x02	; 2
    2b96:	51 05       	cpc	r21, r1
    2b98:	d9 f0       	breq	.+54     	; 0x2bd0 <process_action+0x3ea>
    2b9a:	43 30       	cpi	r20, 0x03	; 3
    2b9c:	51 05       	cpc	r21, r1
    2b9e:	69 f1       	breq	.+90     	; 0x2bfa <process_action+0x414>
    2ba0:	6c 29       	or	r22, r12
    2ba2:	7d 29       	or	r23, r13
    2ba4:	8e 29       	or	r24, r14
    2ba6:	9f 29       	or	r25, r15
    2ba8:	41 30       	cpi	r20, 0x01	; 1
    2baa:	51 05       	cpc	r21, r1
    2bac:	51 f1       	breq	.+84     	; 0x2c02 <process_action+0x41c>
            break;
#endif
        default:
            break;
    }
}
    2bae:	26 96       	adiw	r28, 0x06	; 6
    2bb0:	0f b6       	in	r0, 0x3f	; 63
    2bb2:	f8 94       	cli
    2bb4:	de bf       	out	0x3e, r29	; 62
    2bb6:	0f be       	out	0x3f, r0	; 63
    2bb8:	cd bf       	out	0x3d, r28	; 61
    2bba:	df 91       	pop	r29
    2bbc:	cf 91       	pop	r28
    2bbe:	1f 91       	pop	r17
    2bc0:	0f 91       	pop	r16
    2bc2:	ff 90       	pop	r15
    2bc4:	ef 90       	pop	r14
    2bc6:	df 90       	pop	r13
    2bc8:	cf 90       	pop	r12
    2bca:	bf 90       	pop	r11
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    2bcc:	0c 94 df 1b 	jmp	0x37be	; 0x37be <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2bd0:	6c 29       	or	r22, r12
    2bd2:	7d 29       	or	r23, r13
    2bd4:	8e 29       	or	r24, r14
    2bd6:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2bd8:	26 96       	adiw	r28, 0x06	; 6
    2bda:	0f b6       	in	r0, 0x3f	; 63
    2bdc:	f8 94       	cli
    2bde:	de bf       	out	0x3e, r29	; 62
    2be0:	0f be       	out	0x3f, r0	; 63
    2be2:	cd bf       	out	0x3d, r28	; 61
    2be4:	df 91       	pop	r29
    2be6:	cf 91       	pop	r28
    2be8:	1f 91       	pop	r17
    2bea:	0f 91       	pop	r16
    2bec:	ff 90       	pop	r15
    2bee:	ef 90       	pop	r14
    2bf0:	df 90       	pop	r13
    2bf2:	cf 90       	pop	r12
    2bf4:	bf 90       	pop	r11
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2bf6:	0c 94 fb 1b 	jmp	0x37f6	; 0x37f6 <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2bfa:	0e 94 df 1b 	call	0x37be	; 0x37be <layer_and>
    2bfe:	c7 01       	movw	r24, r14
    2c00:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2c02:	26 96       	adiw	r28, 0x06	; 6
    2c04:	0f b6       	in	r0, 0x3f	; 63
    2c06:	f8 94       	cli
    2c08:	de bf       	out	0x3e, r29	; 62
    2c0a:	0f be       	out	0x3f, r0	; 63
    2c0c:	cd bf       	out	0x3d, r28	; 61
    2c0e:	df 91       	pop	r29
    2c10:	cf 91       	pop	r28
    2c12:	1f 91       	pop	r17
    2c14:	0f 91       	pop	r16
    2c16:	ff 90       	pop	r15
    2c18:	ef 90       	pop	r14
    2c1a:	df 90       	pop	r13
    2c1c:	cf 90       	pop	r12
    2c1e:	bf 90       	pop	r11
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2c20:	0c 94 c3 1b 	jmp	0x3786	; 0x3786 <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2c24:	10 3f       	cpi	r17, 0xF0	; 240
    2c26:	49 f1       	breq	.+82     	; 0x2c7a <process_action+0x494>
    2c28:	18 f4       	brcc	.+6      	; 0x2c30 <process_action+0x44a>
    2c2a:	10 3e       	cpi	r17, 0xE0	; 224
    2c2c:	48 f4       	brcc	.+18     	; 0x2c40 <process_action+0x45a>
    2c2e:	91 c0       	rjmp	.+290    	; 0x2d52 <process_action+0x56c>
    2c30:	12 3f       	cpi	r17, 0xF2	; 242
    2c32:	09 f4       	brne	.+2      	; 0x2c36 <process_action+0x450>
    2c34:	53 c0       	rjmp	.+166    	; 0x2cdc <process_action+0x4f6>
    2c36:	e8 f1       	brcs	.+122    	; 0x2cb2 <process_action+0x4cc>
    2c38:	13 3f       	cpi	r17, 0xF3	; 243
    2c3a:	09 f4       	brne	.+2      	; 0x2c3e <process_action+0x458>
    2c3c:	64 c0       	rjmp	.+200    	; 0x2d06 <process_action+0x520>
    2c3e:	89 c0       	rjmp	.+274    	; 0x2d52 <process_action+0x56c>
    2c40:	1f 70       	andi	r17, 0x0F	; 15
    2c42:	8b 2d       	mov	r24, r11
    2c44:	8f 71       	andi	r24, 0x1F	; 31
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
    2c46:	00 23       	and	r16, r16
    2c48:	21 f0       	breq	.+8      	; 0x2c52 <process_action+0x46c>
                        layer_on(action.layer_tap.val);
    2c4a:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <layer_on>
                        register_mods(action.layer_tap.code & 0x0f);
    2c4e:	81 2f       	mov	r24, r17
    2c50:	7c ce       	rjmp	.-776    	; 0x294a <process_action+0x164>
                    } else {
                        layer_off(action.layer_tap.val);
    2c52:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
    2c56:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    2c58:	26 96       	adiw	r28, 0x06	; 6
    2c5a:	0f b6       	in	r0, 0x3f	; 63
    2c5c:	f8 94       	cli
    2c5e:	de bf       	out	0x3e, r29	; 62
    2c60:	0f be       	out	0x3f, r0	; 63
    2c62:	cd bf       	out	0x3d, r28	; 61
    2c64:	df 91       	pop	r29
    2c66:	cf 91       	pop	r28
    2c68:	1f 91       	pop	r17
    2c6a:	0f 91       	pop	r16
    2c6c:	ff 90       	pop	r15
    2c6e:	ef 90       	pop	r14
    2c70:	df 90       	pop	r13
    2c72:	cf 90       	pop	r12
    2c74:	bf 90       	pop	r11
                    if (event.pressed) {
                        layer_on(action.layer_tap.val);
                        register_mods(action.layer_tap.code & 0x0f);
                    } else {
                        layer_off(action.layer_tap.val);
                        unregister_mods(action.layer_tap.code & 0x0f);
    2c76:	0c 94 ec 13 	jmp	0x27d8	; 0x27d8 <unregister_mods>
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    2c7a:	00 23       	and	r16, r16
    2c7c:	b1 f0       	breq	.+44     	; 0x2caa <process_action+0x4c4>
                        if (tap_count < TAPPING_TOGGLE) {
    2c7e:	25 30       	cpi	r18, 0x05	; 5
    2c80:	08 f0       	brcs	.+2      	; 0x2c84 <process_action+0x49e>
    2c82:	bf c0       	rjmp	.+382    	; 0x2e02 <process_action+0x61c>
                            layer_invert(action.layer_tap.val);
    2c84:	8b 2d       	mov	r24, r11
    2c86:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2c88:	26 96       	adiw	r28, 0x06	; 6
    2c8a:	0f b6       	in	r0, 0x3f	; 63
    2c8c:	f8 94       	cli
    2c8e:	de bf       	out	0x3e, r29	; 62
    2c90:	0f be       	out	0x3f, r0	; 63
    2c92:	cd bf       	out	0x3d, r28	; 61
    2c94:	df 91       	pop	r29
    2c96:	cf 91       	pop	r28
    2c98:	1f 91       	pop	r17
    2c9a:	0f 91       	pop	r16
    2c9c:	ff 90       	pop	r15
    2c9e:	ef 90       	pop	r14
    2ca0:	df 90       	pop	r13
    2ca2:	cf 90       	pop	r12
    2ca4:	bf 90       	pop	r11
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    2ca6:	0c 94 a2 1b 	jmp	0x3744	; 0x3744 <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    2caa:	26 30       	cpi	r18, 0x06	; 6
    2cac:	08 f0       	brcs	.+2      	; 0x2cb0 <process_action+0x4ca>
    2cae:	a9 c0       	rjmp	.+338    	; 0x2e02 <process_action+0x61c>
    2cb0:	e9 cf       	rjmp	.-46     	; 0x2c84 <process_action+0x49e>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2cb2:	00 23       	and	r16, r16
    2cb4:	a9 f0       	breq	.+42     	; 0x2ce0 <process_action+0x4fa>
    2cb6:	8b 2d       	mov	r24, r11
    2cb8:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2cba:	26 96       	adiw	r28, 0x06	; 6
    2cbc:	0f b6       	in	r0, 0x3f	; 63
    2cbe:	f8 94       	cli
    2cc0:	de bf       	out	0x3e, r29	; 62
    2cc2:	0f be       	out	0x3f, r0	; 63
    2cc4:	cd bf       	out	0x3d, r28	; 61
    2cc6:	df 91       	pop	r29
    2cc8:	cf 91       	pop	r28
    2cca:	1f 91       	pop	r17
    2ccc:	0f 91       	pop	r16
    2cce:	ff 90       	pop	r15
    2cd0:	ef 90       	pop	r14
    2cd2:	df 90       	pop	r13
    2cd4:	cf 90       	pop	r12
    2cd6:	bf 90       	pop	r11
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2cd8:	0c 94 5c 1b 	jmp	0x36b8	; 0x36b8 <layer_on>
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    2cdc:	00 23       	and	r16, r16
    2cde:	59 f3       	breq	.-42     	; 0x2cb6 <process_action+0x4d0>
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2ce0:	8b 2d       	mov	r24, r11
    2ce2:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2ce4:	26 96       	adiw	r28, 0x06	; 6
    2ce6:	0f b6       	in	r0, 0x3f	; 63
    2ce8:	f8 94       	cli
    2cea:	de bf       	out	0x3e, r29	; 62
    2cec:	0f be       	out	0x3f, r0	; 63
    2cee:	cd bf       	out	0x3d, r28	; 61
    2cf0:	df 91       	pop	r29
    2cf2:	cf 91       	pop	r28
    2cf4:	1f 91       	pop	r17
    2cf6:	0f 91       	pop	r16
    2cf8:	ff 90       	pop	r15
    2cfa:	ef 90       	pop	r14
    2cfc:	df 90       	pop	r13
    2cfe:	cf 90       	pop	r12
    2d00:	bf 90       	pop	r11
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2d02:	0c 94 7d 1b 	jmp	0x36fa	; 0x36fa <layer_off>
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2d06:	00 23       	and	r16, r16
    2d08:	99 f0       	breq	.+38     	; 0x2d30 <process_action+0x54a>
    2d0a:	8b 2d       	mov	r24, r11
    2d0c:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2d0e:	26 96       	adiw	r28, 0x06	; 6
    2d10:	0f b6       	in	r0, 0x3f	; 63
    2d12:	f8 94       	cli
    2d14:	de bf       	out	0x3e, r29	; 62
    2d16:	0f be       	out	0x3f, r0	; 63
    2d18:	cd bf       	out	0x3d, r28	; 61
    2d1a:	df 91       	pop	r29
    2d1c:	cf 91       	pop	r28
    2d1e:	1f 91       	pop	r17
    2d20:	0f 91       	pop	r16
    2d22:	ff 90       	pop	r15
    2d24:	ef 90       	pop	r14
    2d26:	df 90       	pop	r13
    2d28:	cf 90       	pop	r12
    2d2a:	bf 90       	pop	r11
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2d2c:	0c 94 47 1b 	jmp	0x368e	; 0x368e <layer_move>
            break;
#endif
        default:
            break;
    }
}
    2d30:	26 96       	adiw	r28, 0x06	; 6
    2d32:	0f b6       	in	r0, 0x3f	; 63
    2d34:	f8 94       	cli
    2d36:	de bf       	out	0x3e, r29	; 62
    2d38:	0f be       	out	0x3f, r0	; 63
    2d3a:	cd bf       	out	0x3d, r28	; 61
    2d3c:	df 91       	pop	r29
    2d3e:	cf 91       	pop	r28
    2d40:	1f 91       	pop	r17
    2d42:	0f 91       	pop	r16
    2d44:	ff 90       	pop	r15
    2d46:	ef 90       	pop	r14
    2d48:	df 90       	pop	r13
    2d4a:	cf 90       	pop	r12
    2d4c:	bf 90       	pop	r11
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    2d4e:	0c 94 3d 1b 	jmp	0x367a	; 0x367a <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    2d52:	00 23       	and	r16, r16
    2d54:	a9 f0       	breq	.+42     	; 0x2d80 <process_action+0x59a>
                        if (tap_count > 0) {
    2d56:	22 23       	and	r18, r18
    2d58:	09 f4       	brne	.+2      	; 0x2d5c <process_action+0x576>
    2d5a:	ad cf       	rjmp	.-166    	; 0x2cb6 <process_action+0x4d0>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2d5c:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    2d5e:	26 96       	adiw	r28, 0x06	; 6
    2d60:	0f b6       	in	r0, 0x3f	; 63
    2d62:	f8 94       	cli
    2d64:	de bf       	out	0x3e, r29	; 62
    2d66:	0f be       	out	0x3f, r0	; 63
    2d68:	cd bf       	out	0x3d, r28	; 61
    2d6a:	df 91       	pop	r29
    2d6c:	cf 91       	pop	r28
    2d6e:	1f 91       	pop	r17
    2d70:	0f 91       	pop	r16
    2d72:	ff 90       	pop	r15
    2d74:	ef 90       	pop	r14
    2d76:	df 90       	pop	r13
    2d78:	cf 90       	pop	r12
    2d7a:	bf 90       	pop	r11
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2d7c:	0c 94 ce 12 	jmp	0x259c	; 0x259c <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    2d80:	22 23       	and	r18, r18
    2d82:	09 f4       	brne	.+2      	; 0x2d86 <process_action+0x5a0>
    2d84:	ad cf       	rjmp	.-166    	; 0x2ce0 <process_action+0x4fa>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2d86:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    2d88:	26 96       	adiw	r28, 0x06	; 6
    2d8a:	0f b6       	in	r0, 0x3f	; 63
    2d8c:	f8 94       	cli
    2d8e:	de bf       	out	0x3e, r29	; 62
    2d90:	0f be       	out	0x3f, r0	; 63
    2d92:	cd bf       	out	0x3d, r28	; 61
    2d94:	df 91       	pop	r29
    2d96:	cf 91       	pop	r28
    2d98:	1f 91       	pop	r17
    2d9a:	0f 91       	pop	r16
    2d9c:	ff 90       	pop	r15
    2d9e:	ef 90       	pop	r14
    2da0:	df 90       	pop	r13
    2da2:	cf 90       	pop	r12
    2da4:	bf 90       	pop	r11
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2da6:	0c 94 96 13 	jmp	0x272c	; 0x272c <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2daa:	4b 2d       	mov	r20, r11
    2dac:	4f 70       	andi	r20, 0x0F	; 15
    2dae:	61 2f       	mov	r22, r17
    2db0:	c7 01       	movw	r24, r14
    2db2:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    2db6:	26 96       	adiw	r28, 0x06	; 6
    2db8:	0f b6       	in	r0, 0x3f	; 63
    2dba:	f8 94       	cli
    2dbc:	de bf       	out	0x3e, r29	; 62
    2dbe:	0f be       	out	0x3f, r0	; 63
    2dc0:	cd bf       	out	0x3d, r28	; 61
    2dc2:	df 91       	pop	r29
    2dc4:	cf 91       	pop	r28
    2dc6:	1f 91       	pop	r17
    2dc8:	0f 91       	pop	r16
    2dca:	ff 90       	pop	r15
    2dcc:	ef 90       	pop	r14
    2dce:	df 90       	pop	r13
    2dd0:	cf 90       	pop	r12
    2dd2:	bf 90       	pop	r11
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2dd4:	0c 94 61 1a 	jmp	0x34c2	; 0x34c2 <action_macro_play>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2dd8:	4b 2d       	mov	r20, r11
    2dda:	4f 70       	andi	r20, 0x0F	; 15
    2ddc:	61 2f       	mov	r22, r17
    2dde:	c7 01       	movw	r24, r14
            break;
#endif
        default:
            break;
    }
}
    2de0:	26 96       	adiw	r28, 0x06	; 6
    2de2:	0f b6       	in	r0, 0x3f	; 63
    2de4:	f8 94       	cli
    2de6:	de bf       	out	0x3e, r29	; 62
    2de8:	0f be       	out	0x3f, r0	; 63
    2dea:	cd bf       	out	0x3d, r28	; 61
    2dec:	df 91       	pop	r29
    2dee:	cf 91       	pop	r28
    2df0:	1f 91       	pop	r17
    2df2:	0f 91       	pop	r16
    2df4:	ff 90       	pop	r15
    2df6:	ef 90       	pop	r14
    2df8:	df 90       	pop	r13
    2dfa:	cf 90       	pop	r12
    2dfc:	bf 90       	pop	r11
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2dfe:	0c 94 9b 1e 	jmp	0x3d36	; 0x3d36 <action_function>
            break;
#endif
        default:
            break;
    }
}
    2e02:	26 96       	adiw	r28, 0x06	; 6
    2e04:	0f b6       	in	r0, 0x3f	; 63
    2e06:	f8 94       	cli
    2e08:	de bf       	out	0x3e, r29	; 62
    2e0a:	0f be       	out	0x3f, r0	; 63
    2e0c:	cd bf       	out	0x3d, r28	; 61
    2e0e:	df 91       	pop	r29
    2e10:	cf 91       	pop	r28
    2e12:	1f 91       	pop	r17
    2e14:	0f 91       	pop	r16
    2e16:	ff 90       	pop	r15
    2e18:	ef 90       	pop	r14
    2e1a:	df 90       	pop	r13
    2e1c:	cf 90       	pop	r12
    2e1e:	bf 90       	pop	r11
    2e20:	08 95       	ret

00002e22 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    2e22:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <clear_weak_mods>
    clear_keys();
    2e26:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <clear_keys>
    send_keyboard_report();
    2e2a:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    2e2e:	0e 94 1f 24 	call	0x483e	; 0x483e <mousekey_clear>
    mousekey_send();
    2e32:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    2e36:	80 e0       	ldi	r24, 0x00	; 0
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	0e 94 8a 11 	call	0x2314	; 0x2314 <host_system_send>
    host_consumer_send(0);
    2e3e:	80 e0       	ldi	r24, 0x00	; 0
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <host_consumer_send>

00002e46 <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    2e46:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <clear_mods>
    clear_keyboard_but_mods();
    2e4a:	0c 94 11 17 	jmp	0x2e22	; 0x2e22 <clear_keyboard_but_mods>

00002e4e <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    2e4e:	0e 94 18 1c 	call	0x3830	; 0x3830 <layer_switch_get_action>

    switch (action.kind.id) {
    2e52:	29 2f       	mov	r18, r25
    2e54:	22 95       	swap	r18
    2e56:	2f 70       	andi	r18, 0x0F	; 15
    2e58:	30 e0       	ldi	r19, 0x00	; 0
    2e5a:	2c 30       	cpi	r18, 0x0C	; 12
    2e5c:	31 05       	cpc	r19, r1
    2e5e:	4c f4       	brge	.+18     	; 0x2e72 <is_tap_key+0x24>
    2e60:	2a 30       	cpi	r18, 0x0A	; 10
    2e62:	31 05       	cpc	r19, r1
    2e64:	6c f4       	brge	.+26     	; 0x2e80 <is_tap_key+0x32>
    2e66:	22 50       	subi	r18, 0x02	; 2
    2e68:	31 09       	sbc	r19, r1
    2e6a:	22 30       	cpi	r18, 0x02	; 2
    2e6c:	31 05       	cpc	r19, r1
    2e6e:	88 f4       	brcc	.+34     	; 0x2e92 <is_tap_key+0x44>
    2e70:	07 c0       	rjmp	.+14     	; 0x2e80 <is_tap_key+0x32>
    2e72:	2c 30       	cpi	r18, 0x0C	; 12
    2e74:	31 05       	cpc	r19, r1
    2e76:	49 f0       	breq	.+18     	; 0x2e8a <is_tap_key+0x3c>
    2e78:	2f 30       	cpi	r18, 0x0F	; 15
    2e7a:	31 05       	cpc	r19, r1
    2e7c:	31 f0       	breq	.+12     	; 0x2e8a <is_tap_key+0x3c>
    2e7e:	09 c0       	rjmp	.+18     	; 0x2e92 <is_tap_key+0x44>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2e80:	80 3e       	cpi	r24, 0xE0	; 224
    2e82:	48 f0       	brcs	.+18     	; 0x2e96 <is_tap_key+0x48>
    2e84:	80 3f       	cpi	r24, 0xF0	; 240
    2e86:	29 f4       	brne	.+10     	; 0x2e92 <is_tap_key+0x44>
    2e88:	06 c0       	rjmp	.+12     	; 0x2e96 <is_tap_key+0x48>
                    return true;
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    2e8a:	93 fb       	bst	r25, 3
    2e8c:	88 27       	eor	r24, r24
    2e8e:	80 f9       	bld	r24, 0
    2e90:	08 95       	ret
            return false;
    }
    return false;
    2e92:	80 e0       	ldi	r24, 0x00	; 0
    2e94:	08 95       	ret
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
    2e96:	81 e0       	ldi	r24, 0x01	; 1
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    2e98:	08 95       	ret

00002e9a <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    2e9a:	cf 93       	push	r28
    2e9c:	df 93       	push	r29
    2e9e:	00 d0       	rcall	.+0      	; 0x2ea0 <debug_event+0x6>
    2ea0:	00 d0       	rcall	.+0      	; 0x2ea2 <debug_event+0x8>
    2ea2:	1f 92       	push	r1
    2ea4:	cd b7       	in	r28, 0x3d	; 61
    2ea6:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    2ea8:	0f 90       	pop	r0
    2eaa:	0f 90       	pop	r0
    2eac:	0f 90       	pop	r0
    2eae:	0f 90       	pop	r0
    2eb0:	0f 90       	pop	r0
    2eb2:	df 91       	pop	r29
    2eb4:	cf 91       	pop	r28
    2eb6:	08 95       	ret

00002eb8 <debug_record>:

void debug_record(keyrecord_t record)
{
    2eb8:	cf 93       	push	r28
    2eba:	df 93       	push	r29
    2ebc:	00 d0       	rcall	.+0      	; 0x2ebe <debug_record+0x6>
    2ebe:	00 d0       	rcall	.+0      	; 0x2ec0 <debug_record+0x8>
    2ec0:	00 d0       	rcall	.+0      	; 0x2ec2 <debug_record+0xa>
    2ec2:	cd b7       	in	r28, 0x3d	; 61
    2ec4:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    2ec6:	26 96       	adiw	r28, 0x06	; 6
    2ec8:	0f b6       	in	r0, 0x3f	; 63
    2eca:	f8 94       	cli
    2ecc:	de bf       	out	0x3e, r29	; 62
    2ece:	0f be       	out	0x3f, r0	; 63
    2ed0:	cd bf       	out	0x3d, r28	; 61
    2ed2:	df 91       	pop	r29
    2ed4:	cf 91       	pop	r28
    2ed6:	08 95       	ret

00002ed8 <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    2ed8:	1f 93       	push	r17
    2eda:	cf 93       	push	r28
    2edc:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2ede:	c0 91 74 01 	lds	r28, 0x0174
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2ee2:	16 e0       	ldi	r17, 0x06	; 6
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2ee4:	80 91 75 01 	lds	r24, 0x0175
    2ee8:	c8 17       	cp	r28, r24
    2eea:	99 f0       	breq	.+38     	; 0x2f12 <debug_waiting_buffer+0x3a>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2eec:	d0 e0       	ldi	r29, 0x00	; 0
    2eee:	1c 9f       	mul	r17, r28
    2ef0:	f0 01       	movw	r30, r0
    2ef2:	1d 9f       	mul	r17, r29
    2ef4:	f0 0d       	add	r31, r0
    2ef6:	11 24       	eor	r1, r1
    2ef8:	ea 58       	subi	r30, 0x8A	; 138
    2efa:	fe 4f       	sbci	r31, 0xFE	; 254
    2efc:	40 81       	ld	r20, Z
    2efe:	51 81       	ldd	r21, Z+1	; 0x01
    2f00:	62 81       	ldd	r22, Z+2	; 0x02
    2f02:	73 81       	ldd	r23, Z+3	; 0x03
    2f04:	84 81       	ldd	r24, Z+4	; 0x04
    2f06:	95 81       	ldd	r25, Z+5	; 0x05
    2f08:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2f0c:	21 96       	adiw	r28, 0x01	; 1
    2f0e:	c7 70       	andi	r28, 0x07	; 7
    2f10:	e9 cf       	rjmp	.-46     	; 0x2ee4 <debug_waiting_buffer+0xc>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    2f12:	df 91       	pop	r29
    2f14:	cf 91       	pop	r28
    2f16:	1f 91       	pop	r17
    2f18:	08 95       	ret

00002f1a <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    2f1a:	40 91 a6 01 	lds	r20, 0x01A6
    2f1e:	50 91 a7 01 	lds	r21, 0x01A7
    2f22:	60 91 a8 01 	lds	r22, 0x01A8
    2f26:	70 91 a9 01 	lds	r23, 0x01A9
    2f2a:	80 91 aa 01 	lds	r24, 0x01AA
    2f2e:	90 91 ab 01 	lds	r25, 0x01AB
    2f32:	0c 94 5c 17 	jmp	0x2eb8	; 0x2eb8 <debug_record>

00002f36 <waiting_buffer_scan_tap>:

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    2f36:	80 91 ab 01 	lds	r24, 0x01AB
    2f3a:	82 95       	swap	r24
    2f3c:	8f 70       	andi	r24, 0x0F	; 15
    2f3e:	09 f0       	breq	.+2      	; 0x2f42 <waiting_buffer_scan_tap+0xc>
    2f40:	54 c0       	rjmp	.+168    	; 0x2fea <waiting_buffer_scan_tap+0xb4>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    2f42:	80 91 a8 01 	lds	r24, 0x01A8
    2f46:	88 23       	and	r24, r24
    2f48:	09 f4       	brne	.+2      	; 0x2f4c <waiting_buffer_scan_tap+0x16>
    2f4a:	4f c0       	rjmp	.+158    	; 0x2fea <waiting_buffer_scan_tap+0xb4>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2f4c:	80 91 74 01 	lds	r24, 0x0174
    2f50:	a0 91 75 01 	lds	r26, 0x0175
    2f54:	60 91 a6 01 	lds	r22, 0x01A6
    2f58:	70 91 a7 01 	lds	r23, 0x01A7
    2f5c:	40 91 a9 01 	lds	r20, 0x01A9
    2f60:	50 91 aa 01 	lds	r21, 0x01AA
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2f64:	b6 e0       	ldi	r27, 0x06	; 6
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2f66:	8a 17       	cp	r24, r26
    2f68:	09 f4       	brne	.+2      	; 0x2f6c <waiting_buffer_scan_tap+0x36>
    2f6a:	3f c0       	rjmp	.+126    	; 0x2fea <waiting_buffer_scan_tap+0xb4>
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	41 15       	cp	r20, r1
    2f70:	51 05       	cpc	r21, r1
    2f72:	c1 f1       	breq	.+112    	; 0x2fe4 <waiting_buffer_scan_tap+0xae>
    2f74:	7f 3f       	cpi	r23, 0xFF	; 255
    2f76:	11 f4       	brne	.+4      	; 0x2f7c <waiting_buffer_scan_tap+0x46>
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2f78:	6f 3f       	cpi	r22, 0xFF	; 255
    2f7a:	a1 f1       	breq	.+104    	; 0x2fe4 <waiting_buffer_scan_tap+0xae>
    2f7c:	b8 9f       	mul	r27, r24
    2f7e:	f0 01       	movw	r30, r0
    2f80:	b9 9f       	mul	r27, r25
    2f82:	f0 0d       	add	r31, r0
    2f84:	11 24       	eor	r1, r1
    2f86:	ea 58       	subi	r30, 0x8A	; 138
    2f88:	fe 4f       	sbci	r31, 0xFE	; 254
    2f8a:	21 81       	ldd	r18, Z+1	; 0x01
    2f8c:	72 13       	cpse	r23, r18
    2f8e:	2a c0       	rjmp	.+84     	; 0x2fe4 <waiting_buffer_scan_tap+0xae>
    2f90:	20 81       	ld	r18, Z
    2f92:	62 13       	cpse	r22, r18
    2f94:	27 c0       	rjmp	.+78     	; 0x2fe4 <waiting_buffer_scan_tap+0xae>
    2f96:	22 81       	ldd	r18, Z+2	; 0x02
    2f98:	21 11       	cpse	r18, r1
    2f9a:	24 c0       	rjmp	.+72     	; 0x2fe4 <waiting_buffer_scan_tap+0xae>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    2f9c:	23 81       	ldd	r18, Z+3	; 0x03
    2f9e:	34 81       	ldd	r19, Z+4	; 0x04
    2fa0:	24 17       	cp	r18, r20
    2fa2:	35 07       	cpc	r19, r21
    2fa4:	10 f4       	brcc	.+4      	; 0x2faa <waiting_buffer_scan_tap+0x74>
    2fa6:	21 50       	subi	r18, 0x01	; 1
    2fa8:	31 09       	sbc	r19, r1
    2faa:	24 1b       	sub	r18, r20
    2fac:	35 0b       	sbc	r19, r21
    2fae:	28 3c       	cpi	r18, 0xC8	; 200
    2fb0:	31 05       	cpc	r19, r1
    2fb2:	c0 f4       	brcc	.+48     	; 0x2fe4 <waiting_buffer_scan_tap+0xae>
            tapping_key.tap.count = 1;
    2fb4:	20 91 ab 01 	lds	r18, 0x01AB
    2fb8:	2f 70       	andi	r18, 0x0F	; 15
    2fba:	20 61       	ori	r18, 0x10	; 16
    2fbc:	20 93 ab 01 	sts	0x01AB, r18
            waiting_buffer[i].tap.count = 1;
    2fc0:	26 e0       	ldi	r18, 0x06	; 6
    2fc2:	28 9f       	mul	r18, r24
    2fc4:	f0 01       	movw	r30, r0
    2fc6:	29 9f       	mul	r18, r25
    2fc8:	f0 0d       	add	r31, r0
    2fca:	11 24       	eor	r1, r1
    2fcc:	e5 58       	subi	r30, 0x85	; 133
    2fce:	fe 4f       	sbci	r31, 0xFE	; 254
    2fd0:	80 81       	ld	r24, Z
    2fd2:	8f 70       	andi	r24, 0x0F	; 15
    2fd4:	80 61       	ori	r24, 0x10	; 16
    2fd6:	80 83       	st	Z, r24
            process_action(&tapping_key);
    2fd8:	86 ea       	ldi	r24, 0xA6	; 166
    2fda:	91 e0       	ldi	r25, 0x01	; 1
    2fdc:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <process_action>

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    2fe0:	0c 94 6c 17 	jmp	0x2ed8	; 0x2ed8 <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2fe4:	01 96       	adiw	r24, 0x01	; 1
    2fe6:	87 70       	andi	r24, 0x07	; 7
    2fe8:	be cf       	rjmp	.-132    	; 0x2f66 <waiting_buffer_scan_tap+0x30>
    2fea:	08 95       	ret

00002fec <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    2fec:	cf 92       	push	r12
    2fee:	df 92       	push	r13
    2ff0:	ef 92       	push	r14
    2ff2:	ff 92       	push	r15
    2ff4:	0f 93       	push	r16
    2ff6:	1f 93       	push	r17
    2ff8:	cf 93       	push	r28
    2ffa:	df 93       	push	r29
    2ffc:	cd b7       	in	r28, 0x3d	; 61
    2ffe:	de b7       	in	r29, 0x3e	; 62
    3000:	62 97       	sbiw	r28, 0x12	; 18
    3002:	0f b6       	in	r0, 0x3f	; 63
    3004:	f8 94       	cli
    3006:	de bf       	out	0x3e, r29	; 62
    3008:	0f be       	out	0x3f, r0	; 63
    300a:	cd bf       	out	0x3d, r28	; 61
    300c:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    300e:	85 e0       	ldi	r24, 0x05	; 5
    3010:	f8 01       	movw	r30, r16
    3012:	de 01       	movw	r26, r28
    3014:	1d 96       	adiw	r26, 0x0d	; 13
    3016:	01 90       	ld	r0, Z+
    3018:	0d 92       	st	X+, r0
    301a:	8a 95       	dec	r24
    301c:	e1 f7       	brne	.-8      	; 0x3016 <process_tapping+0x2a>
    301e:	d8 01       	movw	r26, r16
    3020:	4c 91       	ld	r20, X
    3022:	11 96       	adiw	r26, 0x01	; 1
    3024:	5c 91       	ld	r21, X
    3026:	11 97       	sbiw	r26, 0x01	; 1
    3028:	12 96       	adiw	r26, 0x02	; 2
    302a:	6c 91       	ld	r22, X
    302c:	12 97       	sbiw	r26, 0x02	; 2
    302e:	13 96       	adiw	r26, 0x03	; 3
    3030:	cd 90       	ld	r12, X+
    3032:	dc 90       	ld	r13, X
    3034:	14 97       	sbiw	r26, 0x04	; 4
    3036:	30 91 a6 01 	lds	r19, 0x01A6
    303a:	70 91 a7 01 	lds	r23, 0x01A7
    303e:	80 91 a9 01 	lds	r24, 0x01A9
    3042:	90 91 aa 01 	lds	r25, 0x01AA
    3046:	00 97       	sbiw	r24, 0x00	; 0
    3048:	09 f4       	brne	.+2      	; 0x304c <process_tapping+0x60>
    304a:	6b c1       	rjmp	.+726    	; 0x3322 <process_tapping+0x336>
    304c:	7f 3f       	cpi	r23, 0xFF	; 255
    304e:	19 f4       	brne	.+6      	; 0x3056 <process_tapping+0x6a>

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    3050:	3f 3f       	cpi	r19, 0xFF	; 255
    3052:	09 f4       	brne	.+2      	; 0x3056 <process_tapping+0x6a>
    3054:	66 c1       	rjmp	.+716    	; 0x3322 <process_tapping+0x336>
    3056:	e0 90 a8 01 	lds	r14, 0x01A8
    305a:	ee 20       	and	r14, r14
    305c:	09 f4       	brne	.+2      	; 0x3060 <process_tapping+0x74>
    305e:	c0 c0       	rjmp	.+384    	; 0x31e0 <process_tapping+0x1f4>
    3060:	20 91 ab 01 	lds	r18, 0x01AB
        if (WITHIN_TAPPING_TERM(event)) {
    3064:	c8 16       	cp	r12, r24
    3066:	d9 06       	cpc	r13, r25
    3068:	28 f0       	brcs	.+10     	; 0x3074 <process_tapping+0x88>
    306a:	f6 01       	movw	r30, r12
    306c:	e8 1b       	sub	r30, r24
    306e:	f9 0b       	sbc	r31, r25
    3070:	cf 01       	movw	r24, r30
    3072:	04 c0       	rjmp	.+8      	; 0x307c <process_tapping+0x90>
    3074:	80 95       	com	r24
    3076:	90 95       	com	r25
    3078:	8c 0d       	add	r24, r12
    307a:	9d 1d       	adc	r25, r13
    307c:	ff 24       	eor	r15, r15
    307e:	f3 94       	inc	r15
    3080:	88 3c       	cpi	r24, 0xC8	; 200
    3082:	91 05       	cpc	r25, r1
    3084:	78 f0       	brcs	.+30     	; 0x30a4 <process_tapping+0xb8>
    3086:	f1 2c       	mov	r15, r1
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    3088:	20 7f       	andi	r18, 0xF0	; 240
    308a:	09 f0       	breq	.+2      	; 0x308e <process_tapping+0xa2>
    308c:	c6 c0       	rjmp	.+396    	; 0x321a <process_tapping+0x22e>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    308e:	7c 2d       	mov	r23, r12
    3090:	d9 8a       	std	Y+17, r13	; 0x11
    3092:	c8 8a       	std	Y+16, r12	; 0x10
    3094:	89 89       	ldd	r24, Y+17	; 0x11
    3096:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <debug_event>
                process_action(&tapping_key);
    309a:	86 ea       	ldi	r24, 0xA6	; 166
    309c:	91 e0       	ldi	r25, 0x01	; 1
    309e:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <process_action>
    30a2:	b1 c0       	rjmp	.+354    	; 0x3206 <process_tapping+0x21a>
    keyevent_t event = keyp->event;

    // if tapping
    if (IS_TAPPING_PRESSED()) {
        if (WITHIN_TAPPING_TERM(event)) {
            if (tapping_key.tap.count == 0) {
    30a4:	82 2f       	mov	r24, r18
    30a6:	80 7f       	andi	r24, 0xF0	; 240
    30a8:	09 f0       	breq	.+2      	; 0x30ac <process_tapping+0xc0>
    30aa:	46 c0       	rjmp	.+140    	; 0x3138 <process_tapping+0x14c>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    30ac:	75 13       	cpse	r23, r21
    30ae:	14 c0       	rjmp	.+40     	; 0x30d8 <process_tapping+0xec>
    30b0:	34 13       	cpse	r19, r20
    30b2:	12 c0       	rjmp	.+36     	; 0x30d8 <process_tapping+0xec>
    30b4:	61 11       	cpse	r22, r1
    30b6:	10 c0       	rjmp	.+32     	; 0x30d8 <process_tapping+0xec>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    30b8:	2f 70       	andi	r18, 0x0F	; 15
    30ba:	20 61       	ori	r18, 0x10	; 16
    30bc:	20 93 ab 01 	sts	0x01AB, r18
                    debug_tapping_key();
    30c0:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <debug_tapping_key>
                    process_action(&tapping_key);
    30c4:	86 ea       	ldi	r24, 0xA6	; 166
    30c6:	91 e0       	ldi	r25, 0x01	; 1
    30c8:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    30cc:	80 91 ab 01 	lds	r24, 0x01AB
    30d0:	d8 01       	movw	r26, r16
    30d2:	15 96       	adiw	r26, 0x05	; 5
    30d4:	8c 93       	st	X, r24
    30d6:	2e c0       	rjmp	.+92     	; 0x3134 <process_tapping+0x148>
    30d8:	cd 28       	or	r12, r13
    30da:	19 f1       	breq	.+70     	; 0x3122 <process_tapping+0x136>
    30dc:	5f 3f       	cpi	r21, 0xFF	; 255
    30de:	11 f4       	brne	.+4      	; 0x30e4 <process_tapping+0xf8>
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    30e0:	4f 3f       	cpi	r20, 0xFF	; 255
    30e2:	f9 f0       	breq	.+62     	; 0x3122 <process_tapping+0x136>
    30e4:	f6 2e       	mov	r15, r22
    30e6:	61 11       	cpse	r22, r1
    30e8:	1c c0       	rjmp	.+56     	; 0x3122 <process_tapping+0x136>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    30ea:	80 91 74 01 	lds	r24, 0x0174
    30ee:	20 91 75 01 	lds	r18, 0x0175
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    30f2:	36 e0       	ldi	r19, 0x06	; 6
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    30f4:	82 17       	cp	r24, r18
    30f6:	09 f4       	brne	.+2      	; 0x30fa <process_tapping+0x10e>
    30f8:	5a c0       	rjmp	.+180    	; 0x31ae <process_tapping+0x1c2>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	38 9f       	mul	r19, r24
    30fe:	f0 01       	movw	r30, r0
    3100:	39 9f       	mul	r19, r25
    3102:	f0 0d       	add	r31, r0
    3104:	11 24       	eor	r1, r1
    3106:	ea 58       	subi	r30, 0x8A	; 138
    3108:	fe 4f       	sbci	r31, 0xFE	; 254
    310a:	71 81       	ldd	r23, Z+1	; 0x01
    310c:	57 13       	cpse	r21, r23
    310e:	06 c0       	rjmp	.+12     	; 0x311c <process_tapping+0x130>
    3110:	70 81       	ld	r23, Z
    3112:	47 13       	cpse	r20, r23
    3114:	03 c0       	rjmp	.+6      	; 0x311c <process_tapping+0x130>
    3116:	72 81       	ldd	r23, Z+2	; 0x02
    3118:	71 11       	cpse	r23, r1
    311a:	03 c0       	rjmp	.+6      	; 0x3122 <process_tapping+0x136>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    311c:	01 96       	adiw	r24, 0x01	; 1
    311e:	87 70       	andi	r24, 0x07	; 7
    3120:	e9 cf       	rjmp	.-46     	; 0x30f4 <process_tapping+0x108>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    3122:	f6 2e       	mov	r15, r22
    3124:	66 23       	and	r22, r22
    3126:	09 f4       	brne	.+2      	; 0x312a <process_tapping+0x13e>
    3128:	18 c1       	rjmp	.+560    	; 0x335a <process_tapping+0x36e>
                        tapping_key.tap.interrupted = true;
    312a:	80 91 ab 01 	lds	r24, 0x01AB
    312e:	81 60       	ori	r24, 0x01	; 1
    3130:	80 93 ab 01 	sts	0x01AB, r24
                    }
                    // enqueue 
                    return false;
    3134:	f1 2c       	mov	r15, r1
    3136:	11 c1       	rjmp	.+546    	; 0x335a <process_tapping+0x36e>
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3138:	75 13       	cpse	r23, r21
    313a:	08 c0       	rjmp	.+16     	; 0x314c <process_tapping+0x160>
    313c:	34 13       	cpse	r19, r20
    313e:	06 c0       	rjmp	.+12     	; 0x314c <process_tapping+0x160>
    3140:	61 11       	cpse	r22, r1
    3142:	04 c0       	rjmp	.+8      	; 0x314c <process_tapping+0x160>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    3144:	80 91 ab 01 	lds	r24, 0x01AB
    3148:	d8 01       	movw	r26, r16
    314a:	c3 c0       	rjmp	.+390    	; 0x32d2 <process_tapping+0x2e6>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    314c:	4d 87       	std	Y+13, r20	; 0x0d
    314e:	5e 87       	std	Y+14, r21	; 0x0e
    3150:	8d 85       	ldd	r24, Y+13	; 0x0d
    3152:	9e 85       	ldd	r25, Y+14	; 0x0e
    3154:	6a 8b       	std	Y+18, r22	; 0x12
    3156:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <is_tap_key>
    315a:	6a 89       	ldd	r22, Y+18	; 0x12
    315c:	88 23       	and	r24, r24
    315e:	e1 f1       	breq	.+120    	; 0x31d8 <process_tapping+0x1ec>
    3160:	66 23       	and	r22, r22
    3162:	d1 f1       	breq	.+116    	; 0x31d8 <process_tapping+0x1ec>
                    if (tapping_key.tap.count > 1) {
    3164:	20 91 ab 01 	lds	r18, 0x01AB
    3168:	82 2f       	mov	r24, r18
    316a:	82 95       	swap	r24
    316c:	8f 70       	andi	r24, 0x0F	; 15
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	02 97       	sbiw	r24, 0x02	; 2
    3172:	74 f0       	brlt	.+28     	; 0x3190 <process_tapping+0x1a4>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    3174:	80 91 a6 01 	lds	r24, 0x01A6
    3178:	90 91 a7 01 	lds	r25, 0x01A7
    317c:	98 87       	std	Y+8, r25	; 0x08
    317e:	8f 83       	std	Y+7, r24	; 0x07
    3180:	19 86       	std	Y+9, r1	; 0x09
    3182:	db 86       	std	Y+11, r13	; 0x0b
    3184:	ca 86       	std	Y+10, r12	; 0x0a
    3186:	2c 87       	std	Y+12, r18	; 0x0c
    3188:	ce 01       	movw	r24, r28
    318a:	07 96       	adiw	r24, 0x07	; 7
    318c:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last tap(1).\n");
                    }
                    tapping_key = *keyp;
    3190:	86 e0       	ldi	r24, 0x06	; 6
    3192:	f8 01       	movw	r30, r16
    3194:	a6 ea       	ldi	r26, 0xA6	; 166
    3196:	b1 e0       	ldi	r27, 0x01	; 1
    3198:	01 90       	ld	r0, Z+
    319a:	0d 92       	st	X+, r0
    319c:	8a 95       	dec	r24
    319e:	e1 f7       	brne	.-8      	; 0x3198 <process_tapping+0x1ac>
                    waiting_buffer_scan_tap();
    31a0:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <waiting_buffer_scan_tap>
                    debug_tapping_key();
    31a4:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <debug_tapping_key>
                    return true;
    31a8:	ff 24       	eor	r15, r15
    31aa:	f3 94       	inc	r15
    31ac:	d6 c0       	rjmp	.+428    	; 0x335a <process_tapping+0x36e>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    31ae:	4d 87       	std	Y+13, r20	; 0x0d
    31b0:	5e 87       	std	Y+14, r21	; 0x0e
    31b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    31b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    31b6:	0e 94 18 1c 	call	0x3830	; 0x3830 <layer_switch_get_action>
                    switch (action.kind.id) {
    31ba:	29 2f       	mov	r18, r25
    31bc:	22 95       	swap	r18
    31be:	2f 70       	andi	r18, 0x0F	; 15
    31c0:	30 e0       	ldi	r19, 0x00	; 0
    31c2:	22 30       	cpi	r18, 0x02	; 2
    31c4:	31 05       	cpc	r19, r1
    31c6:	0c f0       	brlt	.+2      	; 0x31ca <process_tapping+0x1de>
    31c8:	bc c0       	rjmp	.+376    	; 0x3342 <process_tapping+0x356>
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    31ca:	9f 70       	andi	r25, 0x0F	; 15
    31cc:	09 f0       	breq	.+2      	; 0x31d0 <process_tapping+0x1e4>
    31ce:	b6 c0       	rjmp	.+364    	; 0x333c <process_tapping+0x350>
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
                            if (IS_MOD(action.key.code)) return false;
    31d0:	80 5e       	subi	r24, 0xE0	; 224
    31d2:	88 30       	cpi	r24, 0x08	; 8
    31d4:	08 f4       	brcc	.+2      	; 0x31d8 <process_tapping+0x1ec>
    31d6:	c1 c0       	rjmp	.+386    	; 0x335a <process_tapping+0x36e>
                }
                else {
                    if (!IS_NOEVENT(event)) {
                        debug("Tapping: key event while last tap(>0).\n");
                    }
                    process_action(keyp);
    31d8:	c8 01       	movw	r24, r16
    31da:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <process_action>
    31de:	e4 cf       	rjmp	.-56     	; 0x31a8 <process_tapping+0x1bc>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    31e0:	c8 16       	cp	r12, r24
    31e2:	d9 06       	cpc	r13, r25
    31e4:	08 f4       	brcc	.+2      	; 0x31e8 <process_tapping+0x1fc>
    31e6:	53 c0       	rjmp	.+166    	; 0x328e <process_tapping+0x2a2>
    31e8:	f6 01       	movw	r30, r12
    31ea:	e8 1b       	sub	r30, r24
    31ec:	f9 0b       	sbc	r31, r25
    31ee:	cf 01       	movw	r24, r30
    31f0:	88 3c       	cpi	r24, 0xC8	; 200
    31f2:	91 05       	cpc	r25, r1
    31f4:	08 f4       	brcc	.+2      	; 0x31f8 <process_tapping+0x20c>
    31f6:	50 c0       	rjmp	.+160    	; 0x3298 <process_tapping+0x2ac>
    31f8:	f1 2c       	mov	r15, r1
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    31fa:	7c 2d       	mov	r23, r12
    31fc:	d9 8a       	std	Y+17, r13	; 0x11
    31fe:	c8 8a       	std	Y+16, r12	; 0x10
    3200:	89 89       	ldd	r24, Y+17	; 0x11
    3202:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <debug_event>
        else {
            if (tapping_key.tap.count == 0) {
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
    3206:	e6 ea       	ldi	r30, 0xA6	; 166
    3208:	f1 e0       	ldi	r31, 0x01	; 1
    320a:	86 e0       	ldi	r24, 0x06	; 6
    320c:	df 01       	movw	r26, r30
    320e:	1d 92       	st	X+, r1
    3210:	8a 95       	dec	r24
    3212:	e9 f7       	brne	.-6      	; 0x320e <process_tapping+0x222>
                debug_tapping_key();
    3214:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <debug_tapping_key>
                return false;
    3218:	a0 c0       	rjmp	.+320    	; 0x335a <process_tapping+0x36e>
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    321a:	75 13       	cpse	r23, r21
    321c:	14 c0       	rjmp	.+40     	; 0x3246 <process_tapping+0x25a>
    321e:	34 13       	cpse	r19, r20
    3220:	12 c0       	rjmp	.+36     	; 0x3246 <process_tapping+0x25a>
    3222:	61 11       	cpse	r22, r1
    3224:	10 c0       	rjmp	.+32     	; 0x3246 <process_tapping+0x25a>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    3226:	80 91 ab 01 	lds	r24, 0x01AB
    322a:	f8 01       	movw	r30, r16
    322c:	85 83       	std	Z+5, r24	; 0x05
                    process_action(keyp);
    322e:	c8 01       	movw	r24, r16
    3230:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <process_action>
                    tapping_key = (keyrecord_t){};
    3234:	86 e0       	ldi	r24, 0x06	; 6
    3236:	e6 ea       	ldi	r30, 0xA6	; 166
    3238:	f1 e0       	ldi	r31, 0x01	; 1
    323a:	df 01       	movw	r26, r30
    323c:	1d 92       	st	X+, r1
    323e:	8a 95       	dec	r24
    3240:	e9 f7       	brne	.-6      	; 0x323c <process_tapping+0x250>
                    return true;
    3242:	fe 2c       	mov	r15, r14
    3244:	8a c0       	rjmp	.+276    	; 0x335a <process_tapping+0x36e>
                }
                else if (is_tap_key(event.key) && event.pressed) {
    3246:	4d 87       	std	Y+13, r20	; 0x0d
    3248:	5e 87       	std	Y+14, r21	; 0x0e
    324a:	8d 85       	ldd	r24, Y+13	; 0x0d
    324c:	9e 85       	ldd	r25, Y+14	; 0x0e
    324e:	6a 8b       	std	Y+18, r22	; 0x12
    3250:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <is_tap_key>
    3254:	6a 89       	ldd	r22, Y+18	; 0x12
    3256:	88 23       	and	r24, r24
    3258:	09 f4       	brne	.+2      	; 0x325c <process_tapping+0x270>
    325a:	be cf       	rjmp	.-132    	; 0x31d8 <process_tapping+0x1ec>
    325c:	66 23       	and	r22, r22
    325e:	09 f4       	brne	.+2      	; 0x3262 <process_tapping+0x276>
    3260:	bb cf       	rjmp	.-138    	; 0x31d8 <process_tapping+0x1ec>
                    if (tapping_key.tap.count > 1) {
    3262:	20 91 ab 01 	lds	r18, 0x01AB
    3266:	82 2f       	mov	r24, r18
    3268:	82 95       	swap	r24
    326a:	8f 70       	andi	r24, 0x0F	; 15
    326c:	90 e0       	ldi	r25, 0x00	; 0
    326e:	02 97       	sbiw	r24, 0x02	; 2
    3270:	0c f4       	brge	.+2      	; 0x3274 <process_tapping+0x288>
    3272:	8e cf       	rjmp	.-228    	; 0x3190 <process_tapping+0x1a4>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    3274:	80 91 a6 01 	lds	r24, 0x01A6
    3278:	90 91 a7 01 	lds	r25, 0x01A7
    327c:	9a 83       	std	Y+2, r25	; 0x02
    327e:	89 83       	std	Y+1, r24	; 0x01
    3280:	1b 82       	std	Y+3, r1	; 0x03
    3282:	dd 82       	std	Y+5, r13	; 0x05
    3284:	cc 82       	std	Y+4, r12	; 0x04
    3286:	2e 83       	std	Y+6, r18	; 0x06
    3288:	ce 01       	movw	r24, r28
    328a:	01 96       	adiw	r24, 0x01	; 1
    328c:	7f cf       	rjmp	.-258    	; 0x318c <process_tapping+0x1a0>
    328e:	80 95       	com	r24
    3290:	90 95       	com	r25
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    3292:	8c 0d       	add	r24, r12
    3294:	9d 1d       	adc	r25, r13
    3296:	ac cf       	rjmp	.-168    	; 0x31f0 <process_tapping+0x204>
            if (event.pressed) {
    3298:	f6 2e       	mov	r15, r22
    329a:	66 23       	and	r22, r22
    329c:	09 f4       	brne	.+2      	; 0x32a0 <process_tapping+0x2b4>
    329e:	9c cf       	rjmp	.-200    	; 0x31d8 <process_tapping+0x1ec>
                if (IS_TAPPING_KEY(event.key)) {
    32a0:	75 13       	cpse	r23, r21
    32a2:	2e c0       	rjmp	.+92     	; 0x3300 <process_tapping+0x314>
    32a4:	34 13       	cpse	r19, r20
    32a6:	2c c0       	rjmp	.+88     	; 0x3300 <process_tapping+0x314>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    32a8:	20 91 ab 01 	lds	r18, 0x01AB
    32ac:	20 fd       	sbrc	r18, 0
    32ae:	1f c0       	rjmp	.+62     	; 0x32ee <process_tapping+0x302>
    32b0:	82 2f       	mov	r24, r18
    32b2:	82 95       	swap	r24
    32b4:	8f 70       	andi	r24, 0x0F	; 15
    32b6:	d9 f0       	breq	.+54     	; 0x32ee <process_tapping+0x302>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    32b8:	d8 01       	movw	r26, r16
    32ba:	15 96       	adiw	r26, 0x05	; 5
    32bc:	2c 93       	st	X, r18
    32be:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    32c0:	8f 30       	cpi	r24, 0x0F	; 15
    32c2:	49 f0       	breq	.+18     	; 0x32d6 <process_tapping+0x2ea>
    32c4:	8f 5f       	subi	r24, 0xFF	; 255
    32c6:	98 2f       	mov	r25, r24
    32c8:	92 95       	swap	r25
    32ca:	90 7f       	andi	r25, 0xF0	; 240
    32cc:	82 2f       	mov	r24, r18
    32ce:	8f 70       	andi	r24, 0x0F	; 15
    32d0:	89 2b       	or	r24, r25
    32d2:	15 96       	adiw	r26, 0x05	; 5
    32d4:	8c 93       	st	X, r24
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    32d6:	c8 01       	movw	r24, r16
    32d8:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <process_action>
                        tapping_key = *keyp;
    32dc:	86 e0       	ldi	r24, 0x06	; 6
    32de:	f8 01       	movw	r30, r16
    32e0:	a6 ea       	ldi	r26, 0xA6	; 166
    32e2:	b1 e0       	ldi	r27, 0x01	; 1
    32e4:	01 90       	ld	r0, Z+
    32e6:	0d 92       	st	X+, r0
    32e8:	8a 95       	dec	r24
    32ea:	e1 f7       	brne	.-8      	; 0x32e4 <process_tapping+0x2f8>
    32ec:	93 cf       	rjmp	.-218    	; 0x3214 <process_tapping+0x228>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    32ee:	86 e0       	ldi	r24, 0x06	; 6
    32f0:	f8 01       	movw	r30, r16
    32f2:	a6 ea       	ldi	r26, 0xA6	; 166
    32f4:	b1 e0       	ldi	r27, 0x01	; 1
    32f6:	01 90       	ld	r0, Z+
    32f8:	0d 92       	st	X+, r0
    32fa:	8a 95       	dec	r24
    32fc:	e1 f7       	brne	.-8      	; 0x32f6 <process_tapping+0x30a>
                        return true;
    32fe:	2d c0       	rjmp	.+90     	; 0x335a <process_tapping+0x36e>
                    }
                } else if (is_tap_key(event.key)) {
    3300:	4d 87       	std	Y+13, r20	; 0x0d
    3302:	5e 87       	std	Y+14, r21	; 0x0e
    3304:	8d 85       	ldd	r24, Y+13	; 0x0d
    3306:	9e 85       	ldd	r25, Y+14	; 0x0e
    3308:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <is_tap_key>
    330c:	81 11       	cpse	r24, r1
    330e:	40 cf       	rjmp	.-384    	; 0x3190 <process_tapping+0x1a4>
                    debug_tapping_key();
                    return true;
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    3310:	80 91 ab 01 	lds	r24, 0x01AB
    3314:	81 60       	ori	r24, 0x01	; 1
    3316:	80 93 ab 01 	sts	0x01AB, r24
                    process_action(keyp);
    331a:	c8 01       	movw	r24, r16
    331c:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <process_action>
                    return true;
    3320:	1c c0       	rjmp	.+56     	; 0x335a <process_tapping+0x36e>
            return false;
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    3322:	66 23       	and	r22, r22
    3324:	09 f4       	brne	.+2      	; 0x3328 <process_tapping+0x33c>
    3326:	58 cf       	rjmp	.-336    	; 0x31d8 <process_tapping+0x1ec>
    3328:	4d 87       	std	Y+13, r20	; 0x0d
    332a:	5e 87       	std	Y+14, r21	; 0x0e
    332c:	8d 85       	ldd	r24, Y+13	; 0x0d
    332e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3330:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <is_tap_key>
    3334:	88 23       	and	r24, r24
    3336:	09 f4       	brne	.+2      	; 0x333a <process_tapping+0x34e>
    3338:	4f cf       	rjmp	.-354    	; 0x31d8 <process_tapping+0x1ec>
    333a:	2a cf       	rjmp	.-428    	; 0x3190 <process_tapping+0x1a4>
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    333c:	81 11       	cpse	r24, r1
    333e:	48 cf       	rjmp	.-368    	; 0x31d0 <process_tapping+0x1e4>
    3340:	0c c0       	rjmp	.+24     	; 0x335a <process_tapping+0x36e>
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
    3342:	24 30       	cpi	r18, 0x04	; 4
    3344:	31 05       	cpc	r19, r1
    3346:	0c f0       	brlt	.+2      	; 0x334a <process_tapping+0x35e>
    3348:	47 cf       	rjmp	.-370    	; 0x31d8 <process_tapping+0x1ec>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    334a:	9f 70       	andi	r25, 0x0F	; 15
    334c:	09 f4       	brne	.+2      	; 0x3350 <process_tapping+0x364>
    334e:	40 cf       	rjmp	.-384    	; 0x31d0 <process_tapping+0x1e4>
    3350:	f8 01       	movw	r30, r16
    3352:	95 81       	ldd	r25, Z+5	; 0x05
    3354:	90 7f       	andi	r25, 0xF0	; 240
    3356:	09 f0       	breq	.+2      	; 0x335a <process_tapping+0x36e>
    3358:	3b cf       	rjmp	.-394    	; 0x31d0 <process_tapping+0x1e4>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    335a:	8f 2d       	mov	r24, r15
    335c:	62 96       	adiw	r28, 0x12	; 18
    335e:	0f b6       	in	r0, 0x3f	; 63
    3360:	f8 94       	cli
    3362:	de bf       	out	0x3e, r29	; 62
    3364:	0f be       	out	0x3f, r0	; 63
    3366:	cd bf       	out	0x3d, r28	; 61
    3368:	df 91       	pop	r29
    336a:	cf 91       	pop	r28
    336c:	1f 91       	pop	r17
    336e:	0f 91       	pop	r16
    3370:	ff 90       	pop	r15
    3372:	ef 90       	pop	r14
    3374:	df 90       	pop	r13
    3376:	cf 90       	pop	r12
    3378:	08 95       	ret

0000337a <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    337a:	1f 93       	push	r17
    337c:	cf 93       	push	r28
    337e:	df 93       	push	r29
    3380:	cd b7       	in	r28, 0x3d	; 61
    3382:	de b7       	in	r29, 0x3e	; 62
    3384:	2c 97       	sbiw	r28, 0x0c	; 12
    3386:	0f b6       	in	r0, 0x3f	; 63
    3388:	f8 94       	cli
    338a:	de bf       	out	0x3e, r29	; 62
    338c:	0f be       	out	0x3f, r0	; 63
    338e:	cd bf       	out	0x3d, r28	; 61
    3390:	4f 83       	std	Y+7, r20	; 0x07
    3392:	58 87       	std	Y+8, r21	; 0x08
    3394:	69 87       	std	Y+9, r22	; 0x09
    3396:	7a 87       	std	Y+10, r23	; 0x0a
    3398:	8b 87       	std	Y+11, r24	; 0x0b
    339a:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    339c:	ce 01       	movw	r24, r28
    339e:	07 96       	adiw	r24, 0x07	; 7
    33a0:	0e 94 f6 17 	call	0x2fec	; 0x2fec <process_tapping>
    33a4:	88 23       	and	r24, r24
    33a6:	69 f0       	breq	.+26     	; 0x33c2 <action_tapping_process+0x48>
    33a8:	8f 81       	ldd	r24, Y+7	; 0x07
    33aa:	98 85       	ldd	r25, Y+8	; 0x08

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    33ac:	2a 85       	ldd	r18, Y+10	; 0x0a
    33ae:	3b 85       	ldd	r19, Y+11	; 0x0b
    33b0:	23 2b       	or	r18, r19
    33b2:	f1 f1       	breq	.+124    	; 0x3430 <action_tapping_process+0xb6>
    33b4:	9f 3f       	cpi	r25, 0xFF	; 255
    33b6:	09 f0       	breq	.+2      	; 0x33ba <action_tapping_process+0x40>
    33b8:	63 c0       	rjmp	.+198    	; 0x3480 <action_tapping_process+0x106>
    33ba:	8f 3f       	cpi	r24, 0xFF	; 255
    33bc:	09 f0       	breq	.+2      	; 0x33c0 <action_tapping_process+0x46>
    33be:	60 c0       	rjmp	.+192    	; 0x3480 <action_tapping_process+0x106>
    33c0:	37 c0       	rjmp	.+110    	; 0x3430 <action_tapping_process+0xb6>
    33c2:	86 e0       	ldi	r24, 0x06	; 6
    33c4:	fe 01       	movw	r30, r28
    33c6:	37 96       	adiw	r30, 0x07	; 7
    33c8:	de 01       	movw	r26, r28
    33ca:	11 96       	adiw	r26, 0x01	; 1
    33cc:	01 90       	ld	r0, Z+
    33ce:	0d 92       	st	X+, r0
    33d0:	8a 95       	dec	r24
    33d2:	e1 f7       	brne	.-8      	; 0x33cc <action_tapping_process+0x52>
    33d4:	6f 81       	ldd	r22, Y+7	; 0x07
    33d6:	78 85       	ldd	r23, Y+8	; 0x08
    33d8:	ea 85       	ldd	r30, Y+10	; 0x0a
    33da:	fb 85       	ldd	r31, Y+11	; 0x0b
    33dc:	30 97       	sbiw	r30, 0x00	; 0
    33de:	41 f1       	breq	.+80     	; 0x3430 <action_tapping_process+0xb6>
    33e0:	7f 3f       	cpi	r23, 0xFF	; 255
    33e2:	11 f4       	brne	.+4      	; 0x33e8 <action_tapping_process+0x6e>
    33e4:	6f 3f       	cpi	r22, 0xFF	; 255
    33e6:	21 f1       	breq	.+72     	; 0x3430 <action_tapping_process+0xb6>
{
    if (IS_NOEVENT(record.event)) {
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    33e8:	20 91 75 01 	lds	r18, 0x0175
    33ec:	30 e0       	ldi	r19, 0x00	; 0
    33ee:	c9 01       	movw	r24, r18
    33f0:	01 96       	adiw	r24, 0x01	; 1
    33f2:	87 70       	andi	r24, 0x07	; 7
    33f4:	99 27       	eor	r25, r25
    33f6:	40 91 74 01 	lds	r20, 0x0174
    33fa:	50 e0       	ldi	r21, 0x00	; 0
    33fc:	84 17       	cp	r24, r20
    33fe:	95 07       	cpc	r25, r21
    3400:	09 f4       	brne	.+2      	; 0x3404 <action_tapping_process+0x8a>
    3402:	47 c0       	rjmp	.+142    	; 0x3492 <action_tapping_process+0x118>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    3404:	69 83       	std	Y+1, r22	; 0x01
    3406:	7a 83       	std	Y+2, r23	; 0x02
    3408:	fd 83       	std	Y+5, r31	; 0x05
    340a:	ec 83       	std	Y+4, r30	; 0x04
    340c:	96 e0       	ldi	r25, 0x06	; 6
    340e:	92 9f       	mul	r25, r18
    3410:	d0 01       	movw	r26, r0
    3412:	93 9f       	mul	r25, r19
    3414:	b0 0d       	add	r27, r0
    3416:	11 24       	eor	r1, r1
    3418:	aa 58       	subi	r26, 0x8A	; 138
    341a:	be 4f       	sbci	r27, 0xFE	; 254
    341c:	fe 01       	movw	r30, r28
    341e:	31 96       	adiw	r30, 0x01	; 1
    3420:	01 90       	ld	r0, Z+
    3422:	0d 92       	st	X+, r0
    3424:	9a 95       	dec	r25
    3426:	e1 f7       	brne	.-8      	; 0x3420 <action_tapping_process+0xa6>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    3428:	80 93 75 01 	sts	0x0175, r24

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    342c:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <debug_waiting_buffer>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    3430:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    3432:	80 91 74 01 	lds	r24, 0x0174
    3436:	90 91 75 01 	lds	r25, 0x0175
    343a:	89 17       	cp	r24, r25
    343c:	c1 f1       	breq	.+112    	; 0x34ae <action_tapping_process+0x134>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    343e:	18 9f       	mul	r17, r24
    3440:	c0 01       	movw	r24, r0
    3442:	11 24       	eor	r1, r1
    3444:	8a 58       	subi	r24, 0x8A	; 138
    3446:	9e 4f       	sbci	r25, 0xFE	; 254
    3448:	0e 94 f6 17 	call	0x2fec	; 0x2fec <process_tapping>
    344c:	88 23       	and	r24, r24
    344e:	79 f1       	breq	.+94     	; 0x34ae <action_tapping_process+0x134>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    3450:	e0 91 74 01 	lds	r30, 0x0174
    3454:	1e 9f       	mul	r17, r30
    3456:	f0 01       	movw	r30, r0
    3458:	11 24       	eor	r1, r1
    345a:	ea 58       	subi	r30, 0x8A	; 138
    345c:	fe 4f       	sbci	r31, 0xFE	; 254
    345e:	40 81       	ld	r20, Z
    3460:	51 81       	ldd	r21, Z+1	; 0x01
    3462:	62 81       	ldd	r22, Z+2	; 0x02
    3464:	73 81       	ldd	r23, Z+3	; 0x03
    3466:	84 81       	ldd	r24, Z+4	; 0x04
    3468:	95 81       	ldd	r25, Z+5	; 0x05
    346a:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    346e:	80 91 74 01 	lds	r24, 0x0174
    3472:	90 e0       	ldi	r25, 0x00	; 0
    3474:	01 96       	adiw	r24, 0x01	; 1
    3476:	87 70       	andi	r24, 0x07	; 7
    3478:	99 27       	eor	r25, r25
    347a:	80 93 74 01 	sts	0x0174, r24
    347e:	d9 cf       	rjmp	.-78     	; 0x3432 <action_tapping_process+0xb8>

void action_tapping_process(keyrecord_t record)
{
    if (process_tapping(&record)) {
        if (!IS_NOEVENT(record.event)) {
            debug("processed: "); debug_record(record); debug("\n");
    3480:	4f 81       	ldd	r20, Y+7	; 0x07
    3482:	58 85       	ldd	r21, Y+8	; 0x08
    3484:	69 85       	ldd	r22, Y+9	; 0x09
    3486:	7a 85       	ldd	r23, Y+10	; 0x0a
    3488:	8b 85       	ldd	r24, Y+11	; 0x0b
    348a:	9c 85       	ldd	r25, Y+12	; 0x0c
    348c:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <debug_record>
    3490:	cf cf       	rjmp	.-98     	; 0x3430 <action_tapping_process+0xb6>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    3492:	0e 94 23 17 	call	0x2e46	; 0x2e46 <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    3496:	10 92 75 01 	sts	0x0175, r1
    waiting_buffer_tail = 0;
    349a:	10 92 74 01 	sts	0x0174, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    349e:	e6 ea       	ldi	r30, 0xA6	; 166
    34a0:	f1 e0       	ldi	r31, 0x01	; 1
    34a2:	86 e0       	ldi	r24, 0x06	; 6
    34a4:	df 01       	movw	r26, r30
    34a6:	1d 92       	st	X+, r1
    34a8:	8a 95       	dec	r24
    34aa:	e9 f7       	brne	.-6      	; 0x34a6 <action_tapping_process+0x12c>
    34ac:	c1 cf       	rjmp	.-126    	; 0x3430 <action_tapping_process+0xb6>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    34ae:	2c 96       	adiw	r28, 0x0c	; 12
    34b0:	0f b6       	in	r0, 0x3f	; 63
    34b2:	f8 94       	cli
    34b4:	de bf       	out	0x3e, r29	; 62
    34b6:	0f be       	out	0x3f, r0	; 63
    34b8:	cd bf       	out	0x3d, r28	; 61
    34ba:	df 91       	pop	r29
    34bc:	cf 91       	pop	r28
    34be:	1f 91       	pop	r17
    34c0:	08 95       	ret

000034c2 <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    34c2:	ef 92       	push	r14
    34c4:	ff 92       	push	r15
    34c6:	0f 93       	push	r16
    34c8:	1f 93       	push	r17
    34ca:	cf 93       	push	r28
    34cc:	df 93       	push	r29
    34ce:	8c 01       	movw	r16, r24
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    34d0:	00 97       	sbiw	r24, 0x00	; 0
    34d2:	09 f4       	brne	.+2      	; 0x34d6 <action_macro_play+0x14>
    34d4:	6c c0       	rjmp	.+216    	; 0x35ae <action_macro_play+0xec>
    34d6:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    34d8:	ee 24       	eor	r14, r14
    34da:	e3 94       	inc	r14
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    34dc:	e8 01       	movw	r28, r16
    34de:	21 96       	adiw	r28, 0x01	; 1
    34e0:	f8 01       	movw	r30, r16
    34e2:	84 91       	lpm	r24, Z
    34e4:	84 37       	cpi	r24, 0x74	; 116
    34e6:	40 f4       	brcc	.+16     	; 0x34f8 <action_macro_play+0x36>
    34e8:	84 30       	cpi	r24, 0x04	; 4
    34ea:	08 f0       	brcs	.+2      	; 0x34ee <action_macro_play+0x2c>
    34ec:	51 c0       	rjmp	.+162    	; 0x3590 <action_macro_play+0xce>
    34ee:	81 30       	cpi	r24, 0x01	; 1
    34f0:	81 f0       	breq	.+32     	; 0x3512 <action_macro_play+0x50>
    34f2:	82 30       	cpi	r24, 0x02	; 2
    34f4:	19 f1       	breq	.+70     	; 0x353c <action_macro_play+0x7a>
    34f6:	5b c0       	rjmp	.+182    	; 0x35ae <action_macro_play+0xec>
    34f8:	85 37       	cpi	r24, 0x75	; 117
    34fa:	09 f4       	brne	.+2      	; 0x34fe <action_macro_play+0x3c>
    34fc:	44 c0       	rjmp	.+136    	; 0x3586 <action_macro_play+0xc4>
    34fe:	a8 f1       	brcs	.+106    	; 0x356a <action_macro_play+0xa8>
    3500:	9c e7       	ldi	r25, 0x7C	; 124
    3502:	98 0f       	add	r25, r24
    3504:	90 37       	cpi	r25, 0x70	; 112
    3506:	08 f0       	brcs	.+2      	; 0x350a <action_macro_play+0x48>
    3508:	52 c0       	rjmp	.+164    	; 0x35ae <action_macro_play+0xec>
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    350a:	8f 77       	andi	r24, 0x7F	; 127
    350c:	0e 94 96 13 	call	0x272c	; 0x272c <unregister_code>
    3510:	41 c0       	rjmp	.+130    	; 0x3594 <action_macro_play+0xd2>

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
    3512:	0e 5f       	subi	r16, 0xFE	; 254
    3514:	1f 4f       	sbci	r17, 0xFF	; 255
    3516:	fe 01       	movw	r30, r28
    3518:	c4 91       	lpm	r28, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    351a:	80 e2       	ldi	r24, 0x20	; 32
    351c:	8c 0f       	add	r24, r28
    351e:	88 30       	cpi	r24, 0x08	; 8
    3520:	48 f4       	brcc	.+18     	; 0x3534 <action_macro_play+0x72>
                    add_weak_mods(MOD_BIT(macro));
    3522:	c7 70       	andi	r28, 0x07	; 7
    3524:	8e 2d       	mov	r24, r14
    3526:	01 c0       	rjmp	.+2      	; 0x352a <action_macro_play+0x68>
    3528:	88 0f       	add	r24, r24
    352a:	ca 95       	dec	r28
    352c:	ea f7       	brpl	.-6      	; 0x3528 <action_macro_play+0x66>
    352e:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <add_weak_mods>
    3532:	14 c0       	rjmp	.+40     	; 0x355c <action_macro_play+0x9a>
                    send_keyboard_report();
                } else {
                    register_code(macro);
    3534:	8c 2f       	mov	r24, r28
    3536:	0e 94 ce 12 	call	0x259c	; 0x259c <register_code>
    353a:	2d c0       	rjmp	.+90     	; 0x3596 <action_macro_play+0xd4>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    353c:	0e 5f       	subi	r16, 0xFE	; 254
    353e:	1f 4f       	sbci	r17, 0xFF	; 255
    3540:	fe 01       	movw	r30, r28
    3542:	c4 91       	lpm	r28, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    3544:	80 e2       	ldi	r24, 0x20	; 32
    3546:	8c 0f       	add	r24, r28
    3548:	88 30       	cpi	r24, 0x08	; 8
    354a:	58 f4       	brcc	.+22     	; 0x3562 <action_macro_play+0xa0>
                    del_weak_mods(MOD_BIT(macro));
    354c:	c7 70       	andi	r28, 0x07	; 7
    354e:	8e 2d       	mov	r24, r14
    3550:	01 c0       	rjmp	.+2      	; 0x3554 <action_macro_play+0x92>
    3552:	88 0f       	add	r24, r24
    3554:	ca 95       	dec	r28
    3556:	ea f7       	brpl	.-6      	; 0x3552 <action_macro_play+0x90>
    3558:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <del_weak_mods>
                    send_keyboard_report();
    355c:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <send_keyboard_report>
    3560:	1a c0       	rjmp	.+52     	; 0x3596 <action_macro_play+0xd4>
                } else {
                    unregister_code(macro);
    3562:	8c 2f       	mov	r24, r28
    3564:	0e 94 96 13 	call	0x272c	; 0x272c <unregister_code>
    3568:	16 c0       	rjmp	.+44     	; 0x3596 <action_macro_play+0xd4>
                }
                break;
            case WAIT:
                MACRO_READ();
    356a:	0e 5f       	subi	r16, 0xFE	; 254
    356c:	1f 4f       	sbci	r17, 0xFF	; 255
    356e:	fe 01       	movw	r30, r28
    3570:	c4 91       	lpm	r28, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    3572:	cc 23       	and	r28, r28
    3574:	81 f0       	breq	.+32     	; 0x3596 <action_macro_play+0xd4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3576:	8f e9       	ldi	r24, 0x9F	; 159
    3578:	9f e0       	ldi	r25, 0x0F	; 15
    357a:	01 97       	sbiw	r24, 0x01	; 1
    357c:	f1 f7       	brne	.-4      	; 0x357a <action_macro_play+0xb8>
    357e:	00 c0       	rjmp	.+0      	; 0x3580 <action_macro_play+0xbe>
    3580:	00 00       	nop
    3582:	c1 50       	subi	r28, 0x01	; 1
    3584:	f6 cf       	rjmp	.-20     	; 0x3572 <action_macro_play+0xb0>
                break;
            case INTERVAL:
                interval = MACRO_READ();
    3586:	0e 5f       	subi	r16, 0xFE	; 254
    3588:	1f 4f       	sbci	r17, 0xFF	; 255
    358a:	fe 01       	movw	r30, r28
    358c:	f4 90       	lpm	r15, Z
                dprintf("INTERVAL(%u)\n", interval);
                break;
    358e:	03 c0       	rjmp	.+6      	; 0x3596 <action_macro_play+0xd4>
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    3590:	0e 94 ce 12 	call	0x259c	; 0x259c <register_code>
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    3594:	8e 01       	movw	r16, r28
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    3596:	8f 2d       	mov	r24, r15
    3598:	88 23       	and	r24, r24
    359a:	09 f4       	brne	.+2      	; 0x359e <action_macro_play+0xdc>
    359c:	9f cf       	rjmp	.-194    	; 0x34dc <action_macro_play+0x1a>
    359e:	ef e9       	ldi	r30, 0x9F	; 159
    35a0:	ff e0       	ldi	r31, 0x0F	; 15
    35a2:	31 97       	sbiw	r30, 0x01	; 1
    35a4:	f1 f7       	brne	.-4      	; 0x35a2 <action_macro_play+0xe0>
    35a6:	00 c0       	rjmp	.+0      	; 0x35a8 <action_macro_play+0xe6>
    35a8:	00 00       	nop
    35aa:	81 50       	subi	r24, 0x01	; 1
    35ac:	f5 cf       	rjmp	.-22     	; 0x3598 <action_macro_play+0xd6>
    }
}
    35ae:	df 91       	pop	r29
    35b0:	cf 91       	pop	r28
    35b2:	1f 91       	pop	r17
    35b4:	0f 91       	pop	r16
    35b6:	ff 90       	pop	r15
    35b8:	ef 90       	pop	r14
    35ba:	08 95       	ret

000035bc <default_layer_debug>:
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void default_layer_debug(void)
{
    35bc:	08 95       	ret

000035be <default_layer_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    35be:	60 93 b0 01 	sts	0x01B0, r22
    35c2:	70 93 b1 01 	sts	0x01B1, r23
    35c6:	80 93 b2 01 	sts	0x01B2, r24
    35ca:	90 93 b3 01 	sts	0x01B3, r25
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    35ce:	0c 94 11 17 	jmp	0x2e22	; 0x2e22 <clear_keyboard_but_mods>

000035d2 <default_layer_or>:
    default_layer_state_set(state);
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    35d2:	0f 93       	push	r16
    35d4:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    35d6:	00 91 b0 01 	lds	r16, 0x01B0
    35da:	10 91 b1 01 	lds	r17, 0x01B1
    35de:	20 91 b2 01 	lds	r18, 0x01B2
    35e2:	30 91 b3 01 	lds	r19, 0x01B3
    35e6:	dc 01       	movw	r26, r24
    35e8:	cb 01       	movw	r24, r22
    35ea:	80 2b       	or	r24, r16
    35ec:	91 2b       	or	r25, r17
    35ee:	a2 2b       	or	r26, r18
    35f0:	b3 2b       	or	r27, r19

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    35f2:	80 93 b0 01 	sts	0x01B0, r24
    35f6:	90 93 b1 01 	sts	0x01B1, r25
    35fa:	a0 93 b2 01 	sts	0x01B2, r26
    35fe:	b0 93 b3 01 	sts	0x01B3, r27

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
    3602:	1f 91       	pop	r17
    3604:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    3606:	0c 94 11 17 	jmp	0x2e22	; 0x2e22 <clear_keyboard_but_mods>

0000360a <default_layer_and>:
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    360a:	0f 93       	push	r16
    360c:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    360e:	00 91 b0 01 	lds	r16, 0x01B0
    3612:	10 91 b1 01 	lds	r17, 0x01B1
    3616:	20 91 b2 01 	lds	r18, 0x01B2
    361a:	30 91 b3 01 	lds	r19, 0x01B3
    361e:	dc 01       	movw	r26, r24
    3620:	cb 01       	movw	r24, r22
    3622:	80 23       	and	r24, r16
    3624:	91 23       	and	r25, r17
    3626:	a2 23       	and	r26, r18
    3628:	b3 23       	and	r27, r19

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    362a:	80 93 b0 01 	sts	0x01B0, r24
    362e:	90 93 b1 01 	sts	0x01B1, r25
    3632:	a0 93 b2 01 	sts	0x01B2, r26
    3636:	b0 93 b3 01 	sts	0x01B3, r27
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
    363a:	1f 91       	pop	r17
    363c:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    363e:	0c 94 11 17 	jmp	0x2e22	; 0x2e22 <clear_keyboard_but_mods>

00003642 <default_layer_xor>:
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    3642:	0f 93       	push	r16
    3644:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    3646:	00 91 b0 01 	lds	r16, 0x01B0
    364a:	10 91 b1 01 	lds	r17, 0x01B1
    364e:	20 91 b2 01 	lds	r18, 0x01B2
    3652:	30 91 b3 01 	lds	r19, 0x01B3
    3656:	dc 01       	movw	r26, r24
    3658:	cb 01       	movw	r24, r22
    365a:	80 27       	eor	r24, r16
    365c:	91 27       	eor	r25, r17
    365e:	a2 27       	eor	r26, r18
    3660:	b3 27       	eor	r27, r19

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3662:	80 93 b0 01 	sts	0x01B0, r24
    3666:	90 93 b1 01 	sts	0x01B1, r25
    366a:	a0 93 b2 01 	sts	0x01B2, r26
    366e:	b0 93 b3 01 	sts	0x01B3, r27
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
}
    3672:	1f 91       	pop	r17
    3674:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    3676:	0c 94 11 17 	jmp	0x2e22	; 0x2e22 <clear_keyboard_but_mods>

0000367a <layer_clear>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    367a:	10 92 ac 01 	sts	0x01AC, r1
    367e:	10 92 ad 01 	sts	0x01AD, r1
    3682:	10 92 ae 01 	sts	0x01AE, r1
    3686:	10 92 af 01 	sts	0x01AF, r1
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    368a:	0c 94 11 17 	jmp	0x2e22	; 0x2e22 <clear_keyboard_but_mods>

0000368e <layer_move>:
    layer_state_set(0);
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    368e:	41 e0       	ldi	r20, 0x01	; 1
    3690:	50 e0       	ldi	r21, 0x00	; 0
    3692:	60 e0       	ldi	r22, 0x00	; 0
    3694:	70 e0       	ldi	r23, 0x00	; 0
    3696:	04 c0       	rjmp	.+8      	; 0x36a0 <layer_move+0x12>
    3698:	44 0f       	add	r20, r20
    369a:	55 1f       	adc	r21, r21
    369c:	66 1f       	adc	r22, r22
    369e:	77 1f       	adc	r23, r23
    36a0:	8a 95       	dec	r24
    36a2:	d2 f7       	brpl	.-12     	; 0x3698 <layer_move+0xa>

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    36a4:	40 93 ac 01 	sts	0x01AC, r20
    36a8:	50 93 ad 01 	sts	0x01AD, r21
    36ac:	60 93 ae 01 	sts	0x01AE, r22
    36b0:	70 93 af 01 	sts	0x01AF, r23
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    36b4:	0c 94 11 17 	jmp	0x2e22	; 0x2e22 <clear_keyboard_but_mods>

000036b8 <layer_on>:
    layer_state_set(1UL<<layer);
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    36b8:	41 e0       	ldi	r20, 0x01	; 1
    36ba:	50 e0       	ldi	r21, 0x00	; 0
    36bc:	60 e0       	ldi	r22, 0x00	; 0
    36be:	70 e0       	ldi	r23, 0x00	; 0
    36c0:	04 c0       	rjmp	.+8      	; 0x36ca <layer_on+0x12>
    36c2:	44 0f       	add	r20, r20
    36c4:	55 1f       	adc	r21, r21
    36c6:	66 1f       	adc	r22, r22
    36c8:	77 1f       	adc	r23, r23
    36ca:	8a 95       	dec	r24
    36cc:	d2 f7       	brpl	.-12     	; 0x36c2 <layer_on+0xa>
    36ce:	80 91 ac 01 	lds	r24, 0x01AC
    36d2:	90 91 ad 01 	lds	r25, 0x01AD
    36d6:	a0 91 ae 01 	lds	r26, 0x01AE
    36da:	b0 91 af 01 	lds	r27, 0x01AF
    36de:	48 2b       	or	r20, r24
    36e0:	59 2b       	or	r21, r25
    36e2:	6a 2b       	or	r22, r26
    36e4:	7b 2b       	or	r23, r27

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    36e6:	40 93 ac 01 	sts	0x01AC, r20
    36ea:	50 93 ad 01 	sts	0x01AD, r21
    36ee:	60 93 ae 01 	sts	0x01AE, r22
    36f2:	70 93 af 01 	sts	0x01AF, r23
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    36f6:	0c 94 11 17 	jmp	0x2e22	; 0x2e22 <clear_keyboard_but_mods>

000036fa <layer_off>:
    layer_state_set(layer_state | (1UL<<layer));
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    36fa:	41 e0       	ldi	r20, 0x01	; 1
    36fc:	50 e0       	ldi	r21, 0x00	; 0
    36fe:	60 e0       	ldi	r22, 0x00	; 0
    3700:	70 e0       	ldi	r23, 0x00	; 0
    3702:	04 c0       	rjmp	.+8      	; 0x370c <layer_off+0x12>
    3704:	44 0f       	add	r20, r20
    3706:	55 1f       	adc	r21, r21
    3708:	66 1f       	adc	r22, r22
    370a:	77 1f       	adc	r23, r23
    370c:	8a 95       	dec	r24
    370e:	d2 f7       	brpl	.-12     	; 0x3704 <layer_off+0xa>
    3710:	40 95       	com	r20
    3712:	50 95       	com	r21
    3714:	60 95       	com	r22
    3716:	70 95       	com	r23
    3718:	80 91 ac 01 	lds	r24, 0x01AC
    371c:	90 91 ad 01 	lds	r25, 0x01AD
    3720:	a0 91 ae 01 	lds	r26, 0x01AE
    3724:	b0 91 af 01 	lds	r27, 0x01AF
    3728:	48 23       	and	r20, r24
    372a:	59 23       	and	r21, r25
    372c:	6a 23       	and	r22, r26
    372e:	7b 23       	and	r23, r27

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3730:	40 93 ac 01 	sts	0x01AC, r20
    3734:	50 93 ad 01 	sts	0x01AD, r21
    3738:	60 93 ae 01 	sts	0x01AE, r22
    373c:	70 93 af 01 	sts	0x01AF, r23
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3740:	0c 94 11 17 	jmp	0x2e22	; 0x2e22 <clear_keyboard_but_mods>

00003744 <layer_invert>:
    layer_state_set(layer_state & ~(1UL<<layer));
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    3744:	41 e0       	ldi	r20, 0x01	; 1
    3746:	50 e0       	ldi	r21, 0x00	; 0
    3748:	60 e0       	ldi	r22, 0x00	; 0
    374a:	70 e0       	ldi	r23, 0x00	; 0
    374c:	04 c0       	rjmp	.+8      	; 0x3756 <layer_invert+0x12>
    374e:	44 0f       	add	r20, r20
    3750:	55 1f       	adc	r21, r21
    3752:	66 1f       	adc	r22, r22
    3754:	77 1f       	adc	r23, r23
    3756:	8a 95       	dec	r24
    3758:	d2 f7       	brpl	.-12     	; 0x374e <layer_invert+0xa>
    375a:	80 91 ac 01 	lds	r24, 0x01AC
    375e:	90 91 ad 01 	lds	r25, 0x01AD
    3762:	a0 91 ae 01 	lds	r26, 0x01AE
    3766:	b0 91 af 01 	lds	r27, 0x01AF
    376a:	48 27       	eor	r20, r24
    376c:	59 27       	eor	r21, r25
    376e:	6a 27       	eor	r22, r26
    3770:	7b 27       	eor	r23, r27

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3772:	40 93 ac 01 	sts	0x01AC, r20
    3776:	50 93 ad 01 	sts	0x01AD, r21
    377a:	60 93 ae 01 	sts	0x01AE, r22
    377e:	70 93 af 01 	sts	0x01AF, r23
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3782:	0c 94 11 17 	jmp	0x2e22	; 0x2e22 <clear_keyboard_but_mods>

00003786 <layer_or>:
{
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    3786:	0f 93       	push	r16
    3788:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    378a:	00 91 ac 01 	lds	r16, 0x01AC
    378e:	10 91 ad 01 	lds	r17, 0x01AD
    3792:	20 91 ae 01 	lds	r18, 0x01AE
    3796:	30 91 af 01 	lds	r19, 0x01AF
    379a:	dc 01       	movw	r26, r24
    379c:	cb 01       	movw	r24, r22
    379e:	80 2b       	or	r24, r16
    37a0:	91 2b       	or	r25, r17
    37a2:	a2 2b       	or	r26, r18
    37a4:	b3 2b       	or	r27, r19

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    37a6:	80 93 ac 01 	sts	0x01AC, r24
    37aa:	90 93 ad 01 	sts	0x01AD, r25
    37ae:	a0 93 ae 01 	sts	0x01AE, r26
    37b2:	b0 93 af 01 	sts	0x01AF, r27
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
}
    37b6:	1f 91       	pop	r17
    37b8:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    37ba:	0c 94 11 17 	jmp	0x2e22	; 0x2e22 <clear_keyboard_but_mods>

000037be <layer_and>:
void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    37be:	0f 93       	push	r16
    37c0:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    37c2:	00 91 ac 01 	lds	r16, 0x01AC
    37c6:	10 91 ad 01 	lds	r17, 0x01AD
    37ca:	20 91 ae 01 	lds	r18, 0x01AE
    37ce:	30 91 af 01 	lds	r19, 0x01AF
    37d2:	dc 01       	movw	r26, r24
    37d4:	cb 01       	movw	r24, r22
    37d6:	80 23       	and	r24, r16
    37d8:	91 23       	and	r25, r17
    37da:	a2 23       	and	r26, r18
    37dc:	b3 23       	and	r27, r19

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    37de:	80 93 ac 01 	sts	0x01AC, r24
    37e2:	90 93 ad 01 	sts	0x01AD, r25
    37e6:	a0 93 ae 01 	sts	0x01AE, r26
    37ea:	b0 93 af 01 	sts	0x01AF, r27
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
}
    37ee:	1f 91       	pop	r17
    37f0:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    37f2:	0c 94 11 17 	jmp	0x2e22	; 0x2e22 <clear_keyboard_but_mods>

000037f6 <layer_xor>:
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    37f6:	0f 93       	push	r16
    37f8:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    37fa:	00 91 ac 01 	lds	r16, 0x01AC
    37fe:	10 91 ad 01 	lds	r17, 0x01AD
    3802:	20 91 ae 01 	lds	r18, 0x01AE
    3806:	30 91 af 01 	lds	r19, 0x01AF
    380a:	dc 01       	movw	r26, r24
    380c:	cb 01       	movw	r24, r22
    380e:	80 27       	eor	r24, r16
    3810:	91 27       	eor	r25, r17
    3812:	a2 27       	eor	r26, r18
    3814:	b3 27       	eor	r27, r19

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3816:	80 93 ac 01 	sts	0x01AC, r24
    381a:	90 93 ad 01 	sts	0x01AD, r25
    381e:	a0 93 ae 01 	sts	0x01AE, r26
    3822:	b0 93 af 01 	sts	0x01AF, r27
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
}
    3826:	1f 91       	pop	r17
    3828:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    382a:	0c 94 11 17 	jmp	0x2e22	; 0x2e22 <clear_keyboard_but_mods>

0000382e <layer_debug>:
{
    layer_state_set(layer_state ^ state);
}

void layer_debug(void)
{
    382e:	08 95       	ret

00003830 <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    3830:	cf 92       	push	r12
    3832:	df 92       	push	r13
    3834:	ef 92       	push	r14
    3836:	ff 92       	push	r15
    3838:	0f 93       	push	r16
    383a:	1f 93       	push	r17
    383c:	cf 93       	push	r28
    383e:	df 93       	push	r29
    3840:	8c 01       	movw	r16, r24
    action_t action;
    action.code = ACTION_TRANSPARENT;

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    3842:	c0 90 b0 01 	lds	r12, 0x01B0
    3846:	d0 90 b1 01 	lds	r13, 0x01B1
    384a:	e0 90 b2 01 	lds	r14, 0x01B2
    384e:	f0 90 b3 01 	lds	r15, 0x01B3
    3852:	40 91 ac 01 	lds	r20, 0x01AC
    3856:	50 91 ad 01 	lds	r21, 0x01AD
    385a:	60 91 ae 01 	lds	r22, 0x01AE
    385e:	70 91 af 01 	lds	r23, 0x01AF
    3862:	c4 2a       	or	r12, r20
    3864:	d5 2a       	or	r13, r21
    3866:	e6 2a       	or	r14, r22
    3868:	f7 2a       	or	r15, r23
    386a:	cf e1       	ldi	r28, 0x1F	; 31
    386c:	d0 e0       	ldi	r29, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    386e:	d7 01       	movw	r26, r14
    3870:	c6 01       	movw	r24, r12
    3872:	0c 2e       	mov	r0, r28
    3874:	04 c0       	rjmp	.+8      	; 0x387e <layer_switch_get_action+0x4e>
    3876:	b6 95       	lsr	r27
    3878:	a7 95       	ror	r26
    387a:	97 95       	ror	r25
    387c:	87 95       	ror	r24
    387e:	0a 94       	dec	r0
    3880:	d2 f7       	brpl	.-12     	; 0x3876 <layer_switch_get_action+0x46>
    3882:	80 ff       	sbrs	r24, 0
    3884:	07 c0       	rjmp	.+14     	; 0x3894 <layer_switch_get_action+0x64>
            action = action_for_key(i, key);
    3886:	b8 01       	movw	r22, r16
    3888:	8c 2f       	mov	r24, r28
    388a:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <action_for_key>
            if (action.code != ACTION_TRANSPARENT) {
    388e:	81 30       	cpi	r24, 0x01	; 1
    3890:	91 05       	cpc	r25, r1
    3892:	31 f4       	brne	.+12     	; 0x38a0 <layer_switch_get_action+0x70>
    3894:	21 97       	sbiw	r28, 0x01	; 1
    3896:	58 f7       	brcc	.-42     	; 0x386e <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    3898:	b8 01       	movw	r22, r16
    389a:	80 e0       	ldi	r24, 0x00	; 0
    389c:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    38a0:	df 91       	pop	r29
    38a2:	cf 91       	pop	r28
    38a4:	1f 91       	pop	r17
    38a6:	0f 91       	pop	r16
    38a8:	ff 90       	pop	r15
    38aa:	ef 90       	pop	r14
    38ac:	df 90       	pop	r13
    38ae:	cf 90       	pop	r12
    38b0:	08 95       	ret

000038b2 <add_key>:

/* key */
void add_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    38b2:	90 91 0b 01 	lds	r25, 0x010B
    38b6:	99 23       	and	r25, r25
    38b8:	21 f0       	breq	.+8      	; 0x38c2 <add_key+0x10>
    38ba:	90 91 0c 01 	lds	r25, 0x010C
    38be:	91 11       	cpse	r25, r1
    38c0:	09 c0       	rjmp	.+18     	; 0x38d4 <add_key+0x22>
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    38c2:	20 91 0d 01 	lds	r18, 0x010D
    38c6:	30 91 0e 01 	lds	r19, 0x010E
    38ca:	f9 01       	movw	r30, r18
    38cc:	32 96       	adiw	r30, 0x02	; 2
    38ce:	9f ef       	ldi	r25, 0xFF	; 255
    38d0:	40 e0       	ldi	r20, 0x00	; 0
    38d2:	30 c0       	rjmp	.+96     	; 0x3934 <add_key+0x82>
}

#ifdef NKRO_ENABLE
static inline void add_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    38d4:	98 2f       	mov	r25, r24
    38d6:	96 95       	lsr	r25
    38d8:	96 95       	lsr	r25
    38da:	96 95       	lsr	r25
    38dc:	9f 30       	cpi	r25, 0x0F	; 15
    38de:	a0 f4       	brcc	.+40     	; 0x3908 <add_key+0x56>
        keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
    38e0:	e0 91 0d 01 	lds	r30, 0x010D
    38e4:	f0 91 0e 01 	lds	r31, 0x010E
    38e8:	e9 0f       	add	r30, r25
    38ea:	f1 1d       	adc	r31, r1
    38ec:	87 70       	andi	r24, 0x07	; 7
    38ee:	21 e0       	ldi	r18, 0x01	; 1
    38f0:	30 e0       	ldi	r19, 0x00	; 0
    38f2:	a9 01       	movw	r20, r18
    38f4:	02 c0       	rjmp	.+4      	; 0x38fa <add_key+0x48>
    38f6:	44 0f       	add	r20, r20
    38f8:	55 1f       	adc	r21, r21
    38fa:	8a 95       	dec	r24
    38fc:	e2 f7       	brpl	.-8      	; 0x38f6 <add_key+0x44>
    38fe:	ca 01       	movw	r24, r20
    3900:	91 81       	ldd	r25, Z+1	; 0x01
    3902:	89 2b       	or	r24, r25
    3904:	81 83       	std	Z+1, r24	; 0x01
    3906:	08 95       	ret
    } else {
        dprintf("add_key_bit: can't add: %02X\n", code);
    3908:	90 91 c7 01 	lds	r25, 0x01C7
    390c:	90 ff       	sbrs	r25, 0
    390e:	23 c0       	rjmp	.+70     	; 0x3956 <add_key+0xa4>
    3910:	1f 92       	push	r1
    3912:	8f 93       	push	r24
    3914:	84 ec       	ldi	r24, 0xC4	; 196
    3916:	95 e0       	ldi	r25, 0x05	; 5
    3918:	9f 93       	push	r25
    391a:	8f 93       	push	r24
    391c:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
    3920:	0f 90       	pop	r0
    3922:	0f 90       	pop	r0
    3924:	0f 90       	pop	r0
    3926:	0f 90       	pop	r0
    3928:	08 95       	ret
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    392a:	9f 3f       	cpi	r25, 0xFF	; 255
    392c:	39 f0       	breq	.+14     	; 0x393c <add_key+0x8a>
    392e:	4f 5f       	subi	r20, 0xFF	; 255
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    3930:	4e 30       	cpi	r20, 0x0E	; 14
    3932:	41 f0       	breq	.+16     	; 0x3944 <add_key+0x92>
        if (keyboard_report->keys[i] == code) {
    3934:	51 91       	ld	r21, Z+
    3936:	58 13       	cpse	r21, r24
    3938:	f8 cf       	rjmp	.-16     	; 0x392a <add_key+0x78>
    393a:	0d c0       	rjmp	.+26     	; 0x3956 <add_key+0xa4>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    393c:	51 11       	cpse	r21, r1
    393e:	f7 cf       	rjmp	.-18     	; 0x392e <add_key+0x7c>
    3940:	94 2f       	mov	r25, r20
    3942:	f5 cf       	rjmp	.-22     	; 0x392e <add_key+0x7c>
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    3944:	9f 3f       	cpi	r25, 0xFF	; 255
    3946:	39 f0       	breq	.+14     	; 0x3956 <add_key+0xa4>
            keyboard_report->keys[empty] = code;
    3948:	f9 01       	movw	r30, r18
    394a:	e9 0f       	add	r30, r25
    394c:	f1 1d       	adc	r31, r1
    394e:	97 fd       	sbrc	r25, 7
    3950:	fa 95       	dec	r31
    3952:	82 83       	std	Z+2, r24	; 0x02
    3954:	08 95       	ret
    3956:	08 95       	ret

00003958 <del_key>:
}

void del_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    3958:	90 91 0b 01 	lds	r25, 0x010B
    395c:	99 23       	and	r25, r25
    395e:	21 f0       	breq	.+8      	; 0x3968 <del_key+0x10>
    3960:	90 91 0c 01 	lds	r25, 0x010C
    3964:	91 11       	cpse	r25, r1
    3966:	09 c0       	rjmp	.+18     	; 0x397a <del_key+0x22>
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3968:	20 91 0d 01 	lds	r18, 0x010D
    396c:	30 91 0e 01 	lds	r19, 0x010E
    3970:	f9 01       	movw	r30, r18
    3972:	32 96       	adiw	r30, 0x02	; 2
    3974:	20 5f       	subi	r18, 0xF0	; 240
    3976:	3f 4f       	sbci	r19, 0xFF	; 255
    3978:	30 c0       	rjmp	.+96     	; 0x39da <del_key+0x82>
    }
}

static inline void del_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    397a:	98 2f       	mov	r25, r24
    397c:	96 95       	lsr	r25
    397e:	96 95       	lsr	r25
    3980:	96 95       	lsr	r25
    3982:	9f 30       	cpi	r25, 0x0F	; 15
    3984:	a8 f4       	brcc	.+42     	; 0x39b0 <del_key+0x58>
        keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
    3986:	e0 91 0d 01 	lds	r30, 0x010D
    398a:	f0 91 0e 01 	lds	r31, 0x010E
    398e:	e9 0f       	add	r30, r25
    3990:	f1 1d       	adc	r31, r1
    3992:	87 70       	andi	r24, 0x07	; 7
    3994:	21 e0       	ldi	r18, 0x01	; 1
    3996:	30 e0       	ldi	r19, 0x00	; 0
    3998:	a9 01       	movw	r20, r18
    399a:	02 c0       	rjmp	.+4      	; 0x39a0 <del_key+0x48>
    399c:	44 0f       	add	r20, r20
    399e:	55 1f       	adc	r21, r21
    39a0:	8a 95       	dec	r24
    39a2:	e2 f7       	brpl	.-8      	; 0x399c <del_key+0x44>
    39a4:	ca 01       	movw	r24, r20
    39a6:	80 95       	com	r24
    39a8:	91 81       	ldd	r25, Z+1	; 0x01
    39aa:	89 23       	and	r24, r25
    39ac:	81 83       	std	Z+1, r24	; 0x01
    39ae:	08 95       	ret
    } else {
        dprintf("del_key_bit: can't del: %02X\n", code);
    39b0:	90 91 c7 01 	lds	r25, 0x01C7
    39b4:	90 ff       	sbrs	r25, 0
    39b6:	16 c0       	rjmp	.+44     	; 0x39e4 <del_key+0x8c>
    39b8:	1f 92       	push	r1
    39ba:	8f 93       	push	r24
    39bc:	86 ea       	ldi	r24, 0xA6	; 166
    39be:	95 e0       	ldi	r25, 0x05	; 5
    39c0:	9f 93       	push	r25
    39c2:	8f 93       	push	r24
    39c4:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
    39c8:	0f 90       	pop	r0
    39ca:	0f 90       	pop	r0
    39cc:	0f 90       	pop	r0
    39ce:	0f 90       	pop	r0
    39d0:	08 95       	ret
    39d2:	31 96       	adiw	r30, 0x01	; 1
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    39d4:	e2 17       	cp	r30, r18
    39d6:	f3 07       	cpc	r31, r19
    39d8:	29 f0       	breq	.+10     	; 0x39e4 <del_key+0x8c>
        if (keyboard_report->keys[i] == code) {
    39da:	90 81       	ld	r25, Z
    39dc:	98 13       	cpse	r25, r24
    39de:	f9 cf       	rjmp	.-14     	; 0x39d2 <del_key+0x7a>
            keyboard_report->keys[i] = 0;
    39e0:	10 82       	st	Z, r1
    39e2:	f7 cf       	rjmp	.-18     	; 0x39d2 <del_key+0x7a>
    39e4:	08 95       	ret

000039e6 <clear_keys>:
#endif
    del_key_byte(key);
}

void clear_keys(void)
{
    39e6:	81 e0       	ldi	r24, 0x01	; 1
    39e8:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    39ea:	e0 91 0d 01 	lds	r30, 0x010D
    39ee:	f0 91 0e 01 	lds	r31, 0x010E
    39f2:	e8 0f       	add	r30, r24
    39f4:	f9 1f       	adc	r31, r25
    39f6:	10 82       	st	Z, r1
    39f8:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    39fa:	80 31       	cpi	r24, 0x10	; 16
    39fc:	91 05       	cpc	r25, r1
    39fe:	a9 f7       	brne	.-22     	; 0x39ea <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    3a00:	08 95       	ret

00003a02 <add_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
void add_mods(uint8_t mods) { real_mods |= mods; }
    3a02:	90 91 c6 01 	lds	r25, 0x01C6
    3a06:	89 2b       	or	r24, r25
    3a08:	80 93 c6 01 	sts	0x01C6, r24
    3a0c:	08 95       	ret

00003a0e <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    3a0e:	80 95       	com	r24
    3a10:	90 91 c6 01 	lds	r25, 0x01C6
    3a14:	89 23       	and	r24, r25
    3a16:	80 93 c6 01 	sts	0x01C6, r24
    3a1a:	08 95       	ret

00003a1c <clear_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
void clear_mods(void) { real_mods = 0; }
    3a1c:	10 92 c6 01 	sts	0x01C6, r1
    3a20:	08 95       	ret

00003a22 <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    3a22:	90 91 c5 01 	lds	r25, 0x01C5
    3a26:	89 2b       	or	r24, r25
    3a28:	80 93 c5 01 	sts	0x01C5, r24
    3a2c:	08 95       	ret

00003a2e <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    3a2e:	80 95       	com	r24
    3a30:	90 91 c5 01 	lds	r25, 0x01C5
    3a34:	89 23       	and	r24, r25
    3a36:	80 93 c5 01 	sts	0x01C5, r24
    3a3a:	08 95       	ret

00003a3c <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    3a3c:	10 92 c5 01 	sts	0x01C5, r1
    3a40:	08 95       	ret

00003a42 <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    3a42:	80 93 b4 01 	sts	0x01B4, r24
    3a46:	08 95       	ret

00003a48 <clear_oneshot_mods>:
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3a48:	10 92 b4 01 	sts	0x01B4, r1
    3a4c:	08 95       	ret

00003a4e <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3a4e:	80 91 0d 01 	lds	r24, 0x010D
    3a52:	90 91 0e 01 	lds	r25, 0x010E
    3a56:	fc 01       	movw	r30, r24
    3a58:	31 96       	adiw	r30, 0x01	; 1
    3a5a:	9c 01       	movw	r18, r24
    3a5c:	20 5f       	subi	r18, 0xF0	; 240
    3a5e:	3f 4f       	sbci	r19, 0xFF	; 255
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    3a60:	80 e0       	ldi	r24, 0x00	; 0
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3a62:	91 91       	ld	r25, Z+
    3a64:	91 11       	cpse	r25, r1
            cnt++;
    3a66:	8f 5f       	subi	r24, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3a68:	e2 17       	cp	r30, r18
    3a6a:	f3 07       	cpc	r31, r19
    3a6c:	d1 f7       	brne	.-12     	; 0x3a62 <has_anykey+0x14>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    3a6e:	08 95       	ret

00003a70 <send_keyboard_report>:
#endif
#endif

// Jemi&20160118
void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    3a70:	e0 91 0d 01 	lds	r30, 0x010D
    3a74:	f0 91 0e 01 	lds	r31, 0x010E
    3a78:	80 91 c6 01 	lds	r24, 0x01C6
    3a7c:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    3a7e:	e0 91 0d 01 	lds	r30, 0x010D
    3a82:	f0 91 0e 01 	lds	r31, 0x010E
    3a86:	90 81       	ld	r25, Z
    3a88:	80 91 c5 01 	lds	r24, 0x01C5
    3a8c:	89 2b       	or	r24, r25
    3a8e:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    3a90:	80 91 b4 01 	lds	r24, 0x01B4
    3a94:	88 23       	and	r24, r24
    3a96:	61 f0       	breq	.+24     	; 0x3ab0 <send_keyboard_report+0x40>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    3a98:	e0 91 0d 01 	lds	r30, 0x010D
    3a9c:	f0 91 0e 01 	lds	r31, 0x010E
    3aa0:	90 81       	ld	r25, Z
    3aa2:	89 2b       	or	r24, r25
    3aa4:	80 83       	st	Z, r24
        if (has_anykey()) {
    3aa6:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <has_anykey>
    3aaa:	81 11       	cpse	r24, r1
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3aac:	10 92 b4 01 	sts	0x01B4, r1
        if (has_anykey()) {
            clear_oneshot_mods();
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    3ab0:	80 91 0d 01 	lds	r24, 0x010D
    3ab4:	90 91 0e 01 	lds	r25, 0x010E
    3ab8:	0c 94 36 11 	jmp	0x226c	; 0x226c <host_keyboard_send>

00003abc <keycode_to_action>:


// Jemi&20160118
/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    3abc:	cf 93       	push	r28
    3abe:	df 93       	push	r29
    action_t action;
    switch (keycode) {
    3ac0:	8d 3b       	cpi	r24, 0xBD	; 189
    3ac2:	50 f4       	brcc	.+20     	; 0x3ad8 <keycode_to_action+0x1c>
    3ac4:	88 3a       	cpi	r24, 0xA8	; 168
    3ac6:	10 f5       	brcc	.+68     	; 0x3b0c <keycode_to_action+0x50>
    3ac8:	85 3a       	cpi	r24, 0xA5	; 165
    3aca:	b8 f4       	brcc	.+46     	; 0x3afa <keycode_to_action+0x3e>
    3acc:	84 30       	cpi	r24, 0x04	; 4
    3ace:	90 f4       	brcc	.+36     	; 0x3af4 <keycode_to_action+0x38>
    3ad0:	81 30       	cpi	r24, 0x01	; 1
    3ad2:	09 f4       	brne	.+2      	; 0x3ad6 <keycode_to_action+0x1a>
    3ad4:	6f c0       	rjmp	.+222    	; 0x3bb4 <keycode_to_action+0xf8>
    3ad6:	0b c0       	rjmp	.+22     	; 0x3aee <keycode_to_action+0x32>
    3ad8:	88 3e       	cpi	r24, 0xE8	; 232
    3ada:	30 f4       	brcc	.+12     	; 0x3ae8 <keycode_to_action+0x2c>
    3adc:	80 3e       	cpi	r24, 0xE0	; 224
    3ade:	50 f4       	brcc	.+20     	; 0x3af4 <keycode_to_action+0x38>
    3ae0:	8f 3b       	cpi	r24, 0xBF	; 191
    3ae2:	09 f4       	brne	.+2      	; 0x3ae6 <keycode_to_action+0x2a>
    3ae4:	59 c0       	rjmp	.+178    	; 0x3b98 <keycode_to_action+0xdc>
    3ae6:	03 c0       	rjmp	.+6      	; 0x3aee <keycode_to_action+0x32>
    3ae8:	80 3f       	cpi	r24, 0xF0	; 240
    3aea:	08 f0       	brcs	.+2      	; 0x3aee <keycode_to_action+0x32>
    3aec:	51 c0       	rjmp	.+162    	; 0x3b90 <keycode_to_action+0xd4>
            clear_keyboard();
            wait_ms(50);
            bootloader_jump(); // not return
            break;
        default:
            action.code = ACTION_NO;
    3aee:	c0 e0       	ldi	r28, 0x00	; 0
    3af0:	d0 e0       	ldi	r29, 0x00	; 0
    3af2:	a7 c0       	rjmp	.+334    	; 0x3c42 <keycode_to_action+0x186>
{
    action_t action;
    switch (keycode) {
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
    3af4:	c8 2f       	mov	r28, r24
    3af6:	d0 e0       	ldi	r29, 0x00	; 0
            break;
    3af8:	a4 c0       	rjmp	.+328    	; 0x3c42 <keycode_to_action+0x186>
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3afa:	85 3a       	cpi	r24, 0xA5	; 165
    3afc:	09 f4       	brne	.+2      	; 0x3b00 <keycode_to_action+0x44>
    3afe:	5d c0       	rjmp	.+186    	; 0x3bba <keycode_to_action+0xfe>
    3b00:	86 3a       	cpi	r24, 0xA6	; 166
    3b02:	09 f4       	brne	.+2      	; 0x3b06 <keycode_to_action+0x4a>
    3b04:	5d c0       	rjmp	.+186    	; 0x3bc0 <keycode_to_action+0x104>
    3b06:	c3 e8       	ldi	r28, 0x83	; 131
    3b08:	d0 e4       	ldi	r29, 0x40	; 64
    3b0a:	9b c0       	rjmp	.+310    	; 0x3c42 <keycode_to_action+0x186>
            break;
        case KC_AUDIO_MUTE ... KC_MEDIA_REWIND:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3b0c:	88 3a       	cpi	r24, 0xA8	; 168
    3b0e:	09 f4       	brne	.+2      	; 0x3b12 <keycode_to_action+0x56>
    3b10:	5a c0       	rjmp	.+180    	; 0x3bc6 <keycode_to_action+0x10a>
    3b12:	89 3a       	cpi	r24, 0xA9	; 169
    3b14:	09 f4       	brne	.+2      	; 0x3b18 <keycode_to_action+0x5c>
    3b16:	5a c0       	rjmp	.+180    	; 0x3bcc <keycode_to_action+0x110>
    3b18:	8a 3a       	cpi	r24, 0xAA	; 170
    3b1a:	09 f4       	brne	.+2      	; 0x3b1e <keycode_to_action+0x62>
    3b1c:	5a c0       	rjmp	.+180    	; 0x3bd2 <keycode_to_action+0x116>
    3b1e:	8b 3a       	cpi	r24, 0xAB	; 171
    3b20:	09 f4       	brne	.+2      	; 0x3b24 <keycode_to_action+0x68>
    3b22:	5a c0       	rjmp	.+180    	; 0x3bd8 <keycode_to_action+0x11c>
    3b24:	8c 3a       	cpi	r24, 0xAC	; 172
    3b26:	09 f4       	brne	.+2      	; 0x3b2a <keycode_to_action+0x6e>
    3b28:	5a c0       	rjmp	.+180    	; 0x3bde <keycode_to_action+0x122>
    3b2a:	8b 3b       	cpi	r24, 0xBB	; 187
    3b2c:	09 f4       	brne	.+2      	; 0x3b30 <keycode_to_action+0x74>
    3b2e:	5a c0       	rjmp	.+180    	; 0x3be4 <keycode_to_action+0x128>
    3b30:	8c 3b       	cpi	r24, 0xBC	; 188
    3b32:	09 f4       	brne	.+2      	; 0x3b36 <keycode_to_action+0x7a>
    3b34:	5a c0       	rjmp	.+180    	; 0x3bea <keycode_to_action+0x12e>
    3b36:	8d 3a       	cpi	r24, 0xAD	; 173
    3b38:	09 f4       	brne	.+2      	; 0x3b3c <keycode_to_action+0x80>
    3b3a:	5a c0       	rjmp	.+180    	; 0x3bf0 <keycode_to_action+0x134>
    3b3c:	80 3b       	cpi	r24, 0xB0	; 176
    3b3e:	09 f4       	brne	.+2      	; 0x3b42 <keycode_to_action+0x86>
    3b40:	5a c0       	rjmp	.+180    	; 0x3bf6 <keycode_to_action+0x13a>
    3b42:	8e 3a       	cpi	r24, 0xAE	; 174
    3b44:	09 f4       	brne	.+2      	; 0x3b48 <keycode_to_action+0x8c>
    3b46:	5a c0       	rjmp	.+180    	; 0x3bfc <keycode_to_action+0x140>
    3b48:	8f 3a       	cpi	r24, 0xAF	; 175
    3b4a:	09 f4       	brne	.+2      	; 0x3b4e <keycode_to_action+0x92>
    3b4c:	5a c0       	rjmp	.+180    	; 0x3c02 <keycode_to_action+0x146>
    3b4e:	81 3b       	cpi	r24, 0xB1	; 177
    3b50:	09 f4       	brne	.+2      	; 0x3b54 <keycode_to_action+0x98>
    3b52:	5a c0       	rjmp	.+180    	; 0x3c08 <keycode_to_action+0x14c>
    3b54:	82 3b       	cpi	r24, 0xB2	; 178
    3b56:	09 f4       	brne	.+2      	; 0x3b5a <keycode_to_action+0x9e>
    3b58:	5a c0       	rjmp	.+180    	; 0x3c0e <keycode_to_action+0x152>
    3b5a:	83 3b       	cpi	r24, 0xB3	; 179
    3b5c:	09 f4       	brne	.+2      	; 0x3b60 <keycode_to_action+0xa4>
    3b5e:	5a c0       	rjmp	.+180    	; 0x3c14 <keycode_to_action+0x158>
    3b60:	84 3b       	cpi	r24, 0xB4	; 180
    3b62:	09 f4       	brne	.+2      	; 0x3b66 <keycode_to_action+0xaa>
    3b64:	5a c0       	rjmp	.+180    	; 0x3c1a <keycode_to_action+0x15e>
    3b66:	85 3b       	cpi	r24, 0xB5	; 181
    3b68:	09 f4       	brne	.+2      	; 0x3b6c <keycode_to_action+0xb0>
    3b6a:	5a c0       	rjmp	.+180    	; 0x3c20 <keycode_to_action+0x164>
    3b6c:	86 3b       	cpi	r24, 0xB6	; 182
    3b6e:	09 f4       	brne	.+2      	; 0x3b72 <keycode_to_action+0xb6>
    3b70:	5a c0       	rjmp	.+180    	; 0x3c26 <keycode_to_action+0x16a>
    3b72:	87 3b       	cpi	r24, 0xB7	; 183
    3b74:	09 f4       	brne	.+2      	; 0x3b78 <keycode_to_action+0xbc>
    3b76:	5a c0       	rjmp	.+180    	; 0x3c2c <keycode_to_action+0x170>
    3b78:	88 3b       	cpi	r24, 0xB8	; 184
    3b7a:	09 f4       	brne	.+2      	; 0x3b7e <keycode_to_action+0xc2>
    3b7c:	5a c0       	rjmp	.+180    	; 0x3c32 <keycode_to_action+0x176>
    3b7e:	89 3b       	cpi	r24, 0xB9	; 185
    3b80:	09 f4       	brne	.+2      	; 0x3b84 <keycode_to_action+0xc8>
    3b82:	5a c0       	rjmp	.+180    	; 0x3c38 <keycode_to_action+0x17c>
    3b84:	8a 3b       	cpi	r24, 0xBA	; 186
    3b86:	09 f4       	brne	.+2      	; 0x3b8a <keycode_to_action+0xce>
    3b88:	5a c0       	rjmp	.+180    	; 0x3c3e <keycode_to_action+0x182>
    3b8a:	c0 e0       	ldi	r28, 0x00	; 0
    3b8c:	d4 e4       	ldi	r29, 0x44	; 68
    3b8e:	59 c0       	rjmp	.+178    	; 0x3c42 <keycode_to_action+0x186>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
    3b90:	c8 2f       	mov	r28, r24
    3b92:	d0 e0       	ldi	r29, 0x00	; 0
    3b94:	d0 65       	ori	r29, 0x50	; 80
            break;
    3b96:	55 c0       	rjmp	.+170    	; 0x3c42 <keycode_to_action+0x186>
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
            break;
        case KC_BOOTLOADER:
            clear_keyboard();
    3b98:	0e 94 23 17 	call	0x2e46	; 0x2e46 <clear_keyboard>
    3b9c:	2f ef       	ldi	r18, 0xFF	; 255
    3b9e:	80 e7       	ldi	r24, 0x70	; 112
    3ba0:	92 e0       	ldi	r25, 0x02	; 2
    3ba2:	21 50       	subi	r18, 0x01	; 1
    3ba4:	80 40       	sbci	r24, 0x00	; 0
    3ba6:	90 40       	sbci	r25, 0x00	; 0
    3ba8:	e1 f7       	brne	.-8      	; 0x3ba2 <keycode_to_action+0xe6>
    3baa:	00 c0       	rjmp	.+0      	; 0x3bac <keycode_to_action+0xf0>
    3bac:	00 00       	nop
            wait_ms(50);
            bootloader_jump(); // not return
    3bae:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <bootloader_jump>
            break;
    3bb2:	47 c0       	rjmp	.+142    	; 0x3c42 <keycode_to_action+0x186>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
    3bb4:	c1 e0       	ldi	r28, 0x01	; 1
    3bb6:	d0 e0       	ldi	r29, 0x00	; 0
    3bb8:	44 c0       	rjmp	.+136    	; 0x3c42 <keycode_to_action+0x186>
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3bba:	c1 e8       	ldi	r28, 0x81	; 129
    3bbc:	d0 e4       	ldi	r29, 0x40	; 64
    3bbe:	41 c0       	rjmp	.+130    	; 0x3c42 <keycode_to_action+0x186>
    3bc0:	c2 e8       	ldi	r28, 0x82	; 130
    3bc2:	d0 e4       	ldi	r29, 0x40	; 64
    3bc4:	3e c0       	rjmp	.+124    	; 0x3c42 <keycode_to_action+0x186>
            break;
        case KC_AUDIO_MUTE ... KC_MEDIA_REWIND:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3bc6:	c2 ee       	ldi	r28, 0xE2	; 226
    3bc8:	d4 e4       	ldi	r29, 0x44	; 68
    3bca:	3b c0       	rjmp	.+118    	; 0x3c42 <keycode_to_action+0x186>
    3bcc:	c9 ee       	ldi	r28, 0xE9	; 233
    3bce:	d4 e4       	ldi	r29, 0x44	; 68
    3bd0:	38 c0       	rjmp	.+112    	; 0x3c42 <keycode_to_action+0x186>
    3bd2:	ca ee       	ldi	r28, 0xEA	; 234
    3bd4:	d4 e4       	ldi	r29, 0x44	; 68
    3bd6:	35 c0       	rjmp	.+106    	; 0x3c42 <keycode_to_action+0x186>
    3bd8:	c5 eb       	ldi	r28, 0xB5	; 181
    3bda:	d4 e4       	ldi	r29, 0x44	; 68
    3bdc:	32 c0       	rjmp	.+100    	; 0x3c42 <keycode_to_action+0x186>
    3bde:	c6 eb       	ldi	r28, 0xB6	; 182
    3be0:	d4 e4       	ldi	r29, 0x44	; 68
    3be2:	2f c0       	rjmp	.+94     	; 0x3c42 <keycode_to_action+0x186>
    3be4:	c3 eb       	ldi	r28, 0xB3	; 179
    3be6:	d4 e4       	ldi	r29, 0x44	; 68
    3be8:	2c c0       	rjmp	.+88     	; 0x3c42 <keycode_to_action+0x186>
    3bea:	c4 eb       	ldi	r28, 0xB4	; 180
    3bec:	d4 e4       	ldi	r29, 0x44	; 68
    3bee:	29 c0       	rjmp	.+82     	; 0x3c42 <keycode_to_action+0x186>
    3bf0:	c7 eb       	ldi	r28, 0xB7	; 183
    3bf2:	d4 e4       	ldi	r29, 0x44	; 68
    3bf4:	26 c0       	rjmp	.+76     	; 0x3c42 <keycode_to_action+0x186>
    3bf6:	cc ec       	ldi	r28, 0xCC	; 204
    3bf8:	d4 e4       	ldi	r29, 0x44	; 68
    3bfa:	23 c0       	rjmp	.+70     	; 0x3c42 <keycode_to_action+0x186>
    3bfc:	cd ec       	ldi	r28, 0xCD	; 205
    3bfe:	d4 e4       	ldi	r29, 0x44	; 68
    3c00:	20 c0       	rjmp	.+64     	; 0x3c42 <keycode_to_action+0x186>
    3c02:	c3 e8       	ldi	r28, 0x83	; 131
    3c04:	d5 e4       	ldi	r29, 0x45	; 69
    3c06:	1d c0       	rjmp	.+58     	; 0x3c42 <keycode_to_action+0x186>
    3c08:	ca e8       	ldi	r28, 0x8A	; 138
    3c0a:	d5 e4       	ldi	r29, 0x45	; 69
    3c0c:	1a c0       	rjmp	.+52     	; 0x3c42 <keycode_to_action+0x186>
    3c0e:	c2 e9       	ldi	r28, 0x92	; 146
    3c10:	d5 e4       	ldi	r29, 0x45	; 69
    3c12:	17 c0       	rjmp	.+46     	; 0x3c42 <keycode_to_action+0x186>
    3c14:	c4 e9       	ldi	r28, 0x94	; 148
    3c16:	d5 e4       	ldi	r29, 0x45	; 69
    3c18:	14 c0       	rjmp	.+40     	; 0x3c42 <keycode_to_action+0x186>
    3c1a:	c1 e2       	ldi	r28, 0x21	; 33
    3c1c:	d6 e4       	ldi	r29, 0x46	; 70
    3c1e:	11 c0       	rjmp	.+34     	; 0x3c42 <keycode_to_action+0x186>
    3c20:	c3 e2       	ldi	r28, 0x23	; 35
    3c22:	d6 e4       	ldi	r29, 0x46	; 70
    3c24:	0e c0       	rjmp	.+28     	; 0x3c42 <keycode_to_action+0x186>
    3c26:	c4 e2       	ldi	r28, 0x24	; 36
    3c28:	d6 e4       	ldi	r29, 0x46	; 70
    3c2a:	0b c0       	rjmp	.+22     	; 0x3c42 <keycode_to_action+0x186>
    3c2c:	c5 e2       	ldi	r28, 0x25	; 37
    3c2e:	d6 e4       	ldi	r29, 0x46	; 70
    3c30:	08 c0       	rjmp	.+16     	; 0x3c42 <keycode_to_action+0x186>
    3c32:	c6 e2       	ldi	r28, 0x26	; 38
    3c34:	d6 e4       	ldi	r29, 0x46	; 70
    3c36:	05 c0       	rjmp	.+10     	; 0x3c42 <keycode_to_action+0x186>
    3c38:	c7 e2       	ldi	r28, 0x27	; 39
    3c3a:	d6 e4       	ldi	r29, 0x46	; 70
    3c3c:	02 c0       	rjmp	.+4      	; 0x3c42 <keycode_to_action+0x186>
    3c3e:	ca e2       	ldi	r28, 0x2A	; 42
    3c40:	d6 e4       	ldi	r29, 0x46	; 70
        default:
            action.code = ACTION_NO;
            break;
    }
    return action;
}
    3c42:	ce 01       	movw	r24, r28
    3c44:	df 91       	pop	r29
    3c46:	cf 91       	pop	r28
    3c48:	08 95       	ret

00003c4a <action_for_key>:

// Jemi&20160118
/* converts key to action */
action_t action_for_key(uint8_t layer, keypos_t key)
{
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    3c4a:	0e 94 b5 07 	call	0xf6a	; 0xf6a <keymap_key_to_keycode>
    switch (keycode) {
    3c4e:	80 3e       	cpi	r24, 0xE0	; 224
    3c50:	a8 f4       	brcc	.+42     	; 0x3c7c <action_for_key+0x32>
    3c52:	80 3c       	cpi	r24, 0xC0	; 192
    3c54:	00 f5       	brcc	.+64     	; 0x3c96 <action_for_key+0x4c>
    3c56:	81 33       	cpi	r24, 0x31	; 49
    3c58:	09 f4       	brne	.+2      	; 0x3c5c <action_for_key+0x12>
    3c5a:	5c c0       	rjmp	.+184    	; 0x3d14 <action_for_key+0xca>
    3c5c:	38 f4       	brcc	.+14     	; 0x3c6c <action_for_key+0x22>
    3c5e:	89 32       	cpi	r24, 0x29	; 41
    3c60:	09 f4       	brne	.+2      	; 0x3c64 <action_for_key+0x1a>
    3c62:	52 c0       	rjmp	.+164    	; 0x3d08 <action_for_key+0xbe>
    3c64:	8a 32       	cpi	r24, 0x2A	; 42
    3c66:	09 f4       	brne	.+2      	; 0x3c6a <action_for_key+0x20>
    3c68:	5b c0       	rjmp	.+182    	; 0x3d20 <action_for_key+0xd6>
    3c6a:	5f c0       	rjmp	.+190    	; 0x3d2a <action_for_key+0xe0>
    3c6c:	89 33       	cpi	r24, 0x39	; 57
    3c6e:	b1 f0       	breq	.+44     	; 0x3c9c <action_for_key+0x52>
    3c70:	82 38       	cpi	r24, 0x82	; 130
    3c72:	a1 f0       	breq	.+40     	; 0x3c9c <action_for_key+0x52>
    3c74:	85 33       	cpi	r24, 0x35	; 53
    3c76:	09 f4       	brne	.+2      	; 0x3c7a <action_for_key+0x30>
    3c78:	41 c0       	rjmp	.+130    	; 0x3cfc <action_for_key+0xb2>
    3c7a:	57 c0       	rjmp	.+174    	; 0x3d2a <action_for_key+0xe0>
    3c7c:	83 3e       	cpi	r24, 0xE3	; 227
    3c7e:	41 f1       	breq	.+80     	; 0x3cd0 <action_for_key+0x86>
    3c80:	28 f4       	brcc	.+10     	; 0x3c8c <action_for_key+0x42>
    3c82:	80 3e       	cpi	r24, 0xE0	; 224
    3c84:	99 f0       	breq	.+38     	; 0x3cac <action_for_key+0x62>
    3c86:	82 3e       	cpi	r24, 0xE2	; 226
    3c88:	b9 f0       	breq	.+46     	; 0x3cb8 <action_for_key+0x6e>
    3c8a:	4f c0       	rjmp	.+158    	; 0x3d2a <action_for_key+0xe0>
    3c8c:	86 3e       	cpi	r24, 0xE6	; 230
    3c8e:	31 f1       	breq	.+76     	; 0x3cdc <action_for_key+0x92>
    3c90:	87 3e       	cpi	r24, 0xE7	; 231
    3c92:	71 f1       	breq	.+92     	; 0x3cf0 <action_for_key+0xa6>
    3c94:	4a c0       	rjmp	.+148    	; 0x3d2a <action_for_key+0xe0>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    3c96:	0e 94 c4 07 	call	0xf88	; 0xf88 <keymap_fn_to_action>
    3c9a:	08 95       	ret
#ifdef BOOTMAGIC_ENABLE
        case KC_CAPSLOCK:
        case KC_LOCKING_CAPS:
            if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
    3c9c:	90 91 d8 01 	lds	r25, 0x01D8
    3ca0:	90 fd       	sbrc	r25, 0
    3ca2:	02 c0       	rjmp	.+4      	; 0x3ca8 <action_for_key+0x5e>
    3ca4:	91 ff       	sbrs	r25, 1
    3ca6:	41 c0       	rjmp	.+130    	; 0x3d2a <action_for_key+0xe0>
                return keycode_to_action(KC_LCTL);
    3ca8:	80 ee       	ldi	r24, 0xE0	; 224
    3caa:	3f c0       	rjmp	.+126    	; 0x3d2a <action_for_key+0xe0>
            }
            return keycode_to_action(keycode);
        case KC_LCTL:
            if (keymap_config.swap_control_capslock) {
    3cac:	80 91 d8 01 	lds	r24, 0x01D8
    3cb0:	80 ff       	sbrs	r24, 0
    3cb2:	fa cf       	rjmp	.-12     	; 0x3ca8 <action_for_key+0x5e>
                return keycode_to_action(KC_CAPSLOCK);
    3cb4:	89 e3       	ldi	r24, 0x39	; 57
    3cb6:	39 c0       	rjmp	.+114    	; 0x3d2a <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LCTL);
        case KC_LALT:
            if (keymap_config.swap_lalt_lgui) {
    3cb8:	80 91 d8 01 	lds	r24, 0x01D8
    3cbc:	82 ff       	sbrs	r24, 2
    3cbe:	0c c0       	rjmp	.+24     	; 0x3cd8 <action_for_key+0x8e>
                if (keymap_config.no_gui) {
    3cc0:	80 91 d8 01 	lds	r24, 0x01D8
    3cc4:	84 ff       	sbrs	r24, 4
    3cc6:	02 c0       	rjmp	.+4      	; 0x3ccc <action_for_key+0x82>
                    return keycode_to_action(ACTION_NO);
    3cc8:	80 e0       	ldi	r24, 0x00	; 0
    3cca:	2f c0       	rjmp	.+94     	; 0x3d2a <action_for_key+0xe0>
                }
                return keycode_to_action(KC_LGUI);
    3ccc:	83 ee       	ldi	r24, 0xE3	; 227
    3cce:	2d c0       	rjmp	.+90     	; 0x3d2a <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LALT);
        case KC_LGUI:
            if (keymap_config.swap_lalt_lgui) {
    3cd0:	80 91 d8 01 	lds	r24, 0x01D8
    3cd4:	82 ff       	sbrs	r24, 2
    3cd6:	f4 cf       	rjmp	.-24     	; 0x3cc0 <action_for_key+0x76>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_LGUI);
            }
            return keycode_to_action(KC_LALT);
    3cd8:	82 ee       	ldi	r24, 0xE2	; 226
    3cda:	27 c0       	rjmp	.+78     	; 0x3d2a <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_LGUI);
        case KC_RALT:
            if (keymap_config.swap_ralt_rgui) {
    3cdc:	80 91 d8 01 	lds	r24, 0x01D8
    3ce0:	83 ff       	sbrs	r24, 3
    3ce2:	0a c0       	rjmp	.+20     	; 0x3cf8 <action_for_key+0xae>
                if (keymap_config.no_gui) {
    3ce4:	80 91 d8 01 	lds	r24, 0x01D8
    3ce8:	84 fd       	sbrc	r24, 4
    3cea:	ee cf       	rjmp	.-36     	; 0x3cc8 <action_for_key+0x7e>
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
    3cec:	87 ee       	ldi	r24, 0xE7	; 231
    3cee:	1d c0       	rjmp	.+58     	; 0x3d2a <action_for_key+0xe0>
            }
            return keycode_to_action(KC_RALT);
        case KC_RGUI:
            if (keymap_config.swap_ralt_rgui) {
    3cf0:	80 91 d8 01 	lds	r24, 0x01D8
    3cf4:	83 ff       	sbrs	r24, 3
    3cf6:	f6 cf       	rjmp	.-20     	; 0x3ce4 <action_for_key+0x9a>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
            }
            return keycode_to_action(KC_RALT);
    3cf8:	86 ee       	ldi	r24, 0xE6	; 230
    3cfa:	17 c0       	rjmp	.+46     	; 0x3d2a <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
    3cfc:	80 91 d8 01 	lds	r24, 0x01D8
    3d00:	85 ff       	sbrs	r24, 5
    3d02:	06 c0       	rjmp	.+12     	; 0x3d10 <action_for_key+0xc6>
                return keycode_to_action(KC_ESC);
    3d04:	89 e2       	ldi	r24, 0x29	; 41
    3d06:	11 c0       	rjmp	.+34     	; 0x3d2a <action_for_key+0xe0>
            }
            return keycode_to_action(KC_GRAVE);
        case KC_ESC:
            if (keymap_config.swap_grave_esc) {
    3d08:	80 91 d8 01 	lds	r24, 0x01D8
    3d0c:	85 ff       	sbrs	r24, 5
    3d0e:	fa cf       	rjmp	.-12     	; 0x3d04 <action_for_key+0xba>
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_ESC);
            }
            return keycode_to_action(KC_GRAVE);
    3d10:	85 e3       	ldi	r24, 0x35	; 53
    3d12:	0b c0       	rjmp	.+22     	; 0x3d2a <action_for_key+0xe0>
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_GRAVE);
            }
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
    3d14:	80 91 d8 01 	lds	r24, 0x01D8
    3d18:	86 ff       	sbrs	r24, 6
    3d1a:	06 c0       	rjmp	.+12     	; 0x3d28 <action_for_key+0xde>
                return keycode_to_action(KC_BSPACE);
    3d1c:	8a e2       	ldi	r24, 0x2A	; 42
    3d1e:	05 c0       	rjmp	.+10     	; 0x3d2a <action_for_key+0xe0>
            }
            return keycode_to_action(KC_BSLASH);
        case KC_BSPACE:
            if (keymap_config.swap_backslash_backspace) {
    3d20:	80 91 d8 01 	lds	r24, 0x01D8
    3d24:	86 ff       	sbrs	r24, 6
    3d26:	fa cf       	rjmp	.-12     	; 0x3d1c <action_for_key+0xd2>
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
                return keycode_to_action(KC_BSPACE);
            }
            return keycode_to_action(KC_BSLASH);
    3d28:	81 e3       	ldi	r24, 0x31	; 49
                return keycode_to_action(KC_BSLASH);
            }
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    3d2a:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <keycode_to_action>
    }
}
    3d2e:	08 95       	ret

00003d30 <action_get_macro>:
/* Macro */
__attribute__ ((weak))
const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    return MACRO_NONE;
}
    3d30:	80 e0       	ldi	r24, 0x00	; 0
    3d32:	90 e0       	ldi	r25, 0x00	; 0
    3d34:	08 95       	ret

00003d36 <action_function>:

/* Function */
__attribute__ ((weak))
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    3d36:	08 95       	ret

00003d38 <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    3d38:	90 93 39 01 	sts	0x0139, r25
    3d3c:	80 93 38 01 	sts	0x0138, r24
    3d40:	08 95       	ret

00003d42 <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    3d42:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    3d44:	98 2f       	mov	r25, r24
    3d46:	9c 7c       	andi	r25, 0xCC	; 204
    3d48:	39 2f       	mov	r19, r25
    3d4a:	36 95       	lsr	r19
    3d4c:	36 95       	lsr	r19
    3d4e:	28 2f       	mov	r18, r24
    3d50:	23 73       	andi	r18, 0x33	; 51
    3d52:	44 e0       	ldi	r20, 0x04	; 4
    3d54:	24 9f       	mul	r18, r20
    3d56:	c0 01       	movw	r24, r0
    3d58:	11 24       	eor	r1, r1
    3d5a:	93 2f       	mov	r25, r19
    3d5c:	98 2b       	or	r25, r24
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    3d5e:	29 2f       	mov	r18, r25
    3d60:	2a 7a       	andi	r18, 0xAA	; 170
    3d62:	26 95       	lsr	r18
    3d64:	89 2f       	mov	r24, r25
    3d66:	85 75       	andi	r24, 0x55	; 85
    3d68:	88 0f       	add	r24, r24
    return bits;
}
    3d6a:	82 2b       	or	r24, r18
    3d6c:	08 95       	ret

00003d6e <bitrev16>:

uint16_t bitrev16(uint16_t bits)
{
    3d6e:	1f 93       	push	r17
    3d70:	cf 93       	push	r28
    3d72:	df 93       	push	r29
    3d74:	1f 92       	push	r1
    3d76:	cd b7       	in	r28, 0x3d	; 61
    3d78:	de b7       	in	r29, 0x3e	; 62
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
    3d7a:	99 83       	std	Y+1, r25	; 0x01
    3d7c:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <bitrev>
    3d80:	18 2f       	mov	r17, r24
    3d82:	99 81       	ldd	r25, Y+1	; 0x01
    3d84:	89 2f       	mov	r24, r25
    3d86:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <bitrev>
    3d8a:	21 2f       	mov	r18, r17
    3d8c:	30 e0       	ldi	r19, 0x00	; 0
    3d8e:	32 2f       	mov	r19, r18
    3d90:	22 27       	eor	r18, r18
    return bits;
}
    3d92:	a9 01       	movw	r20, r18
    3d94:	48 2b       	or	r20, r24
    3d96:	ca 01       	movw	r24, r20
    3d98:	0f 90       	pop	r0
    3d9a:	df 91       	pop	r29
    3d9c:	cf 91       	pop	r28
    3d9e:	1f 91       	pop	r17
    3da0:	08 95       	ret

00003da2 <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    3da2:	80 91 dd 01 	lds	r24, 0x01DD
    3da6:	84 30       	cpi	r24, 0x04	; 4
    3da8:	09 f1       	breq	.+66     	; 0x3dec <suspend_power_down+0x4a>
#endif
    wdt_timeout = wdto;
    3daa:	10 92 c8 01 	sts	0x01C8, r1

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    3dae:	20 e4       	ldi	r18, 0x40	; 64
    3db0:	88 e1       	ldi	r24, 0x18	; 24
    3db2:	90 e0       	ldi	r25, 0x00	; 0
    3db4:	0f b6       	in	r0, 0x3f	; 63
    3db6:	f8 94       	cli
    3db8:	a8 95       	wdr
    3dba:	80 93 60 00 	sts	0x0060, r24
    3dbe:	0f be       	out	0x3f, r0	; 63
    3dc0:	20 93 60 00 	sts	0x0060, r18
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    3dc4:	83 b7       	in	r24, 0x33	; 51
    3dc6:	81 7f       	andi	r24, 0xF1	; 241
    3dc8:	84 60       	ori	r24, 0x04	; 4
    3dca:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    3dcc:	83 b7       	in	r24, 0x33	; 51
    3dce:	81 60       	ori	r24, 0x01	; 1
    3dd0:	83 bf       	out	0x33, r24	; 51
    sei();
    3dd2:	78 94       	sei
    sleep_cpu();
    3dd4:	88 95       	sleep
    sleep_disable();
    3dd6:	83 b7       	in	r24, 0x33	; 51
    3dd8:	8e 7f       	andi	r24, 0xFE	; 254
    3dda:	83 bf       	out	0x33, r24	; 51

    // Disable watchdog after sleep
    wdt_disable();
    3ddc:	88 e1       	ldi	r24, 0x18	; 24
    3dde:	0f b6       	in	r0, 0x3f	; 63
    3de0:	f8 94       	cli
    3de2:	80 93 60 00 	sts	0x0060, r24
    3de6:	10 92 60 00 	sts	0x0060, r1
    3dea:	0f be       	out	0x3f, r0	; 63
    3dec:	08 95       	ret

00003dee <matrix_power_up>:
void suspend_power_down(void)
{
    power_down(WDTO_15MS);
}

__attribute__ ((weak)) void matrix_power_up(void) {}
    3dee:	08 95       	ret

00003df0 <matrix_power_down>:
__attribute__ ((weak)) void matrix_power_down(void) {}
    3df0:	08 95       	ret

00003df2 <suspend_wakeup_condition>:
bool suspend_wakeup_condition(void)
{
    3df2:	cf 93       	push	r28
    matrix_power_up();
    3df4:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <matrix_power_up>
    matrix_scan();
    3df8:	0e 94 fd 07 	call	0xffa	; 0xffa <matrix_scan>
    matrix_power_down();
    3dfc:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3e00:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    3e02:	8c 2f       	mov	r24, r28
    3e04:	0e 94 25 09 	call	0x124a	; 0x124a <matrix_get_row>
    3e08:	89 2b       	or	r24, r25
    3e0a:	29 f4       	brne	.+10     	; 0x3e16 <suspend_wakeup_condition+0x24>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3e0c:	cf 5f       	subi	r28, 0xFF	; 255
    3e0e:	c5 30       	cpi	r28, 0x05	; 5
    3e10:	c1 f7       	brne	.-16     	; 0x3e02 <suspend_wakeup_condition+0x10>
        if (matrix_get_row(r)) return true;
    }
    return false;
    3e12:	80 e0       	ldi	r24, 0x00	; 0
    3e14:	01 c0       	rjmp	.+2      	; 0x3e18 <suspend_wakeup_condition+0x26>
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
    3e16:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    3e18:	cf 91       	pop	r28
    3e1a:	08 95       	ret

00003e1c <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    3e1c:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <clear_keyboard>

00003e20 <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    3e20:	1f 92       	push	r1
    3e22:	0f 92       	push	r0
    3e24:	0f b6       	in	r0, 0x3f	; 63
    3e26:	0f 92       	push	r0
    3e28:	11 24       	eor	r1, r1
    3e2a:	8f 93       	push	r24
    3e2c:	9f 93       	push	r25
    3e2e:	af 93       	push	r26
    3e30:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    3e32:	80 91 c8 01 	lds	r24, 0x01C8
    3e36:	81 11       	cpse	r24, r1
    3e38:	13 c0       	rjmp	.+38     	; 0x3e60 <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    3e3a:	80 91 c9 01 	lds	r24, 0x01C9
    3e3e:	90 91 ca 01 	lds	r25, 0x01CA
    3e42:	a0 91 cb 01 	lds	r26, 0x01CB
    3e46:	b0 91 cc 01 	lds	r27, 0x01CC
    3e4a:	41 96       	adiw	r24, 0x11	; 17
    3e4c:	a1 1d       	adc	r26, r1
    3e4e:	b1 1d       	adc	r27, r1
    3e50:	80 93 c9 01 	sts	0x01C9, r24
    3e54:	90 93 ca 01 	sts	0x01CA, r25
    3e58:	a0 93 cb 01 	sts	0x01CB, r26
    3e5c:	b0 93 cc 01 	sts	0x01CC, r27
            break;
        default:
            ;
    }
}
    3e60:	bf 91       	pop	r27
    3e62:	af 91       	pop	r26
    3e64:	9f 91       	pop	r25
    3e66:	8f 91       	pop	r24
    3e68:	0f 90       	pop	r0
    3e6a:	0f be       	out	0x3f, r0	; 63
    3e6c:	0f 90       	pop	r0
    3e6e:	1f 90       	pop	r1
    3e70:	18 95       	reti

00003e72 <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    3e72:	82 e0       	ldi	r24, 0x02	; 2
    3e74:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    3e76:	93 e0       	ldi	r25, 0x03	; 3
    3e78:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    3e7a:	9a ef       	ldi	r25, 0xFA	; 250
    3e7c:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    3e7e:	80 93 6e 00 	sts	0x006E, r24
    3e82:	08 95       	ret

00003e84 <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3e84:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3e86:	f8 94       	cli
    t = timer_count;
    3e88:	80 91 c9 01 	lds	r24, 0x01C9
    3e8c:	90 91 ca 01 	lds	r25, 0x01CA
    3e90:	a0 91 cb 01 	lds	r26, 0x01CB
    3e94:	b0 91 cc 01 	lds	r27, 0x01CC
    SREG = sreg;
    3e98:	2f bf       	out	0x3f, r18	; 63

    return (t & 0xFFFF);
}
    3e9a:	08 95       	ret

00003e9c <timer_elapsed>:
    return t;
}

inline
uint16_t timer_elapsed(uint16_t last)
{
    3e9c:	cf 92       	push	r12
    3e9e:	df 92       	push	r13
    3ea0:	ef 92       	push	r14
    3ea2:	ff 92       	push	r15
    3ea4:	0f 93       	push	r16
    3ea6:	1f 93       	push	r17
    uint32_t t;

    uint8_t sreg = SREG;
    3ea8:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3eaa:	f8 94       	cli
    t = timer_count;
    3eac:	40 91 c9 01 	lds	r20, 0x01C9
    3eb0:	50 91 ca 01 	lds	r21, 0x01CA
    3eb4:	60 91 cb 01 	lds	r22, 0x01CB
    3eb8:	70 91 cc 01 	lds	r23, 0x01CC
    SREG = sreg;
    3ebc:	2f bf       	out	0x3f, r18	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    3ebe:	6a 01       	movw	r12, r20
    3ec0:	7b 01       	movw	r14, r22
    3ec2:	ee 24       	eor	r14, r14
    3ec4:	ff 24       	eor	r15, r15
    3ec6:	8c 01       	movw	r16, r24
    3ec8:	20 e0       	ldi	r18, 0x00	; 0
    3eca:	30 e0       	ldi	r19, 0x00	; 0
    3ecc:	c0 16       	cp	r12, r16
    3ece:	d1 06       	cpc	r13, r17
    3ed0:	e2 06       	cpc	r14, r18
    3ed2:	f3 06       	cpc	r15, r19
    3ed4:	10 f4       	brcc	.+4      	; 0x3eda <timer_elapsed+0x3e>
    3ed6:	41 50       	subi	r20, 0x01	; 1
    3ed8:	51 09       	sbc	r21, r1
    3eda:	9a 01       	movw	r18, r20
    3edc:	28 1b       	sub	r18, r24
    3ede:	39 0b       	sbc	r19, r25
    3ee0:	c9 01       	movw	r24, r18
}
    3ee2:	1f 91       	pop	r17
    3ee4:	0f 91       	pop	r16
    3ee6:	ff 90       	pop	r15
    3ee8:	ef 90       	pop	r14
    3eea:	df 90       	pop	r13
    3eec:	cf 90       	pop	r12
    3eee:	08 95       	ret

00003ef0 <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    3ef0:	1f 92       	push	r1
    3ef2:	0f 92       	push	r0
    3ef4:	0f b6       	in	r0, 0x3f	; 63
    3ef6:	0f 92       	push	r0
    3ef8:	11 24       	eor	r1, r1
    3efa:	8f 93       	push	r24
    3efc:	9f 93       	push	r25
    3efe:	af 93       	push	r26
    3f00:	bf 93       	push	r27
    timer_count++;
    3f02:	80 91 c9 01 	lds	r24, 0x01C9
    3f06:	90 91 ca 01 	lds	r25, 0x01CA
    3f0a:	a0 91 cb 01 	lds	r26, 0x01CB
    3f0e:	b0 91 cc 01 	lds	r27, 0x01CC
    3f12:	01 96       	adiw	r24, 0x01	; 1
    3f14:	a1 1d       	adc	r26, r1
    3f16:	b1 1d       	adc	r27, r1
    3f18:	80 93 c9 01 	sts	0x01C9, r24
    3f1c:	90 93 ca 01 	sts	0x01CA, r25
    3f20:	a0 93 cb 01 	sts	0x01CB, r26
    3f24:	b0 93 cc 01 	sts	0x01CC, r27
}
    3f28:	bf 91       	pop	r27
    3f2a:	af 91       	pop	r26
    3f2c:	9f 91       	pop	r25
    3f2e:	8f 91       	pop	r24
    3f30:	0f 90       	pop	r0
    3f32:	0f be       	out	0x3f, r0	; 63
    3f34:	0f 90       	pop	r0
    3f36:	1f 90       	pop	r1
    3f38:	18 95       	reti

00003f3a <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    3f3a:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <USB_Disable>
    cli();
    3f3e:	f8 94       	cli
    3f40:	2f ef       	ldi	r18, 0xFF	; 255
    3f42:	87 ea       	ldi	r24, 0xA7	; 167
    3f44:	91 e6       	ldi	r25, 0x61	; 97
    3f46:	21 50       	subi	r18, 0x01	; 1
    3f48:	80 40       	sbci	r24, 0x00	; 0
    3f4a:	90 40       	sbci	r25, 0x00	; 0
    3f4c:	e1 f7       	brne	.-8      	; 0x3f46 <bootloader_jump+0xc>
    3f4e:	00 c0       	rjmp	.+0      	; 0x3f50 <bootloader_jump+0x16>
    3f50:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    3f52:	87 e0       	ldi	r24, 0x07	; 7
    3f54:	90 eb       	ldi	r25, 0xB0	; 176
    3f56:	dc 01       	movw	r26, r24
    3f58:	80 93 e6 01 	sts	0x01E6, r24
    3f5c:	90 93 e7 01 	sts	0x01E7, r25
    3f60:	a0 93 e8 01 	sts	0x01E8, r26
    3f64:	b0 93 e9 01 	sts	0x01E9, r27
    wdt_enable(WDTO_250MS);
    3f68:	2c e0       	ldi	r18, 0x0C	; 12
    3f6a:	88 e1       	ldi	r24, 0x18	; 24
    3f6c:	90 e0       	ldi	r25, 0x00	; 0
    3f6e:	0f b6       	in	r0, 0x3f	; 63
    3f70:	f8 94       	cli
    3f72:	a8 95       	wdr
    3f74:	80 93 60 00 	sts	0x0060, r24
    3f78:	0f be       	out	0x3f, r0	; 63
    3f7a:	20 93 60 00 	sts	0x0060, r18
    for (;;);
    3f7e:	ff cf       	rjmp	.-2      	; 0x3f7e <bootloader_jump+0x44>

00003f80 <scan_keycode>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_keycode(uint8_t keycode)
{
    3f80:	cf 92       	push	r12
    3f82:	df 92       	push	r13
    3f84:	ef 92       	push	r14
    3f86:	ff 92       	push	r15
    3f88:	0f 93       	push	r16
    3f8a:	1f 93       	push	r17
    3f8c:	cf 93       	push	r28
    3f8e:	df 93       	push	r29
    3f90:	d8 2f       	mov	r29, r24
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3f92:	c0 e0       	ldi	r28, 0x00	; 0
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    3f94:	ee 24       	eor	r14, r14
    3f96:	e3 94       	inc	r14
    3f98:	f1 2c       	mov	r15, r1
}

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
    3f9a:	8c 2f       	mov	r24, r28
    3f9c:	0e 94 25 09 	call	0x124a	; 0x124a <matrix_get_row>
    3fa0:	6c 01       	movw	r12, r24
    3fa2:	00 e0       	ldi	r16, 0x00	; 0
    3fa4:	10 e0       	ldi	r17, 0x00	; 0
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    3fa6:	97 01       	movw	r18, r14
    3fa8:	00 2e       	mov	r0, r16
    3faa:	02 c0       	rjmp	.+4      	; 0x3fb0 <scan_keycode+0x30>
    3fac:	22 0f       	add	r18, r18
    3fae:	33 1f       	adc	r19, r19
    3fb0:	0a 94       	dec	r0
    3fb2:	e2 f7       	brpl	.-8      	; 0x3fac <scan_keycode+0x2c>
    3fb4:	2c 21       	and	r18, r12
    3fb6:	3d 21       	and	r19, r13
    3fb8:	23 2b       	or	r18, r19
    3fba:	31 f4       	brne	.+12     	; 0x3fc8 <scan_keycode+0x48>
    3fbc:	0f 5f       	subi	r16, 0xFF	; 255
    3fbe:	1f 4f       	sbci	r17, 0xFF	; 255

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    3fc0:	0e 30       	cpi	r16, 0x0E	; 14
    3fc2:	11 05       	cpc	r17, r1
    3fc4:	81 f7       	brne	.-32     	; 0x3fa6 <scan_keycode+0x26>
    3fc6:	09 c0       	rjmp	.+18     	; 0x3fda <scan_keycode+0x5a>
            if (matrix_row & ((matrix_row_t)1<<c)) {
                if (keycode == keymap_key_to_keycode(0, (keypos_t){ .row = r, .col = c })) {
    3fc8:	60 2f       	mov	r22, r16
    3fca:	7c 2f       	mov	r23, r28
    3fcc:	80 e0       	ldi	r24, 0x00	; 0
    3fce:	0e 94 b5 07 	call	0xf6a	; 0xf6a <keymap_key_to_keycode>
    3fd2:	d8 13       	cpse	r29, r24
    3fd4:	f3 cf       	rjmp	.-26     	; 0x3fbc <scan_keycode+0x3c>
                    return true;
    3fd6:	81 e0       	ldi	r24, 0x01	; 1
    3fd8:	04 c0       	rjmp	.+8      	; 0x3fe2 <scan_keycode+0x62>
    }
}

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3fda:	cf 5f       	subi	r28, 0xFF	; 255
    3fdc:	c5 30       	cpi	r28, 0x05	; 5
    3fde:	e9 f6       	brne	.-70     	; 0x3f9a <scan_keycode+0x1a>
                    return true;
                }
            }
        }
    }
    return false;
    3fe0:	80 e0       	ldi	r24, 0x00	; 0
}
    3fe2:	df 91       	pop	r29
    3fe4:	cf 91       	pop	r28
    3fe6:	1f 91       	pop	r17
    3fe8:	0f 91       	pop	r16
    3fea:	ff 90       	pop	r15
    3fec:	ef 90       	pop	r14
    3fee:	df 90       	pop	r13
    3ff0:	cf 90       	pop	r12
    3ff2:	08 95       	ret

00003ff4 <bootmagic_scan_keycode>:

bool bootmagic_scan_keycode(uint8_t keycode)
{
    3ff4:	cf 93       	push	r28
    3ff6:	c8 2f       	mov	r28, r24
    if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;
    3ff8:	8c e2       	ldi	r24, 0x2C	; 44
    3ffa:	0e 94 c0 1f 	call	0x3f80	; 0x3f80 <scan_keycode>
    3ffe:	88 23       	and	r24, r24
    4000:	21 f0       	breq	.+8      	; 0x400a <bootmagic_scan_keycode+0x16>

    return scan_keycode(keycode);
    4002:	8c 2f       	mov	r24, r28
}
    4004:	cf 91       	pop	r28

bool bootmagic_scan_keycode(uint8_t keycode)
{
    if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;

    return scan_keycode(keycode);
    4006:	0c 94 c0 1f 	jmp	0x3f80	; 0x3f80 <scan_keycode>
}
    400a:	80 e0       	ldi	r24, 0x00	; 0
    400c:	cf 91       	pop	r28
    400e:	08 95       	ret

00004010 <bootmagic>:
#include "eeconfig.h"
#include "bootmagic.h"


void bootmagic(void)
{
    4010:	cf 93       	push	r28
    /* check signature */
    if (!eeconfig_is_enabled()) {
    4012:	0e 94 57 21 	call	0x42ae	; 0x42ae <eeconfig_is_enabled>
    4016:	81 11       	cpse	r24, r1
    4018:	02 c0       	rjmp	.+4      	; 0x401e <bootmagic+0xe>
        eeconfig_init();
    401a:	0e 94 3d 21 	call	0x427a	; 0x427a <eeconfig_init>
    }

    /* do scans in case of bounce */
    print("boogmagic scan: ... ");
    401e:	89 ee       	ldi	r24, 0xE9	; 233
    4020:	95 e0       	ldi	r25, 0x05	; 5
    4022:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    uint8_t scan = 100;
    while (scan--) { matrix_scan(); _delay_ms(10); }
    4026:	c5 e6       	ldi	r28, 0x65	; 101
    4028:	c1 50       	subi	r28, 0x01	; 1
    402a:	49 f0       	breq	.+18     	; 0x403e <bootmagic+0x2e>
    402c:	0e 94 fd 07 	call	0xffa	; 0xffa <matrix_scan>
    4030:	8f e3       	ldi	r24, 0x3F	; 63
    4032:	9c e9       	ldi	r25, 0x9C	; 156
    4034:	01 97       	sbiw	r24, 0x01	; 1
    4036:	f1 f7       	brne	.-4      	; 0x4034 <bootmagic+0x24>
    4038:	00 c0       	rjmp	.+0      	; 0x403a <bootmagic+0x2a>
    403a:	00 00       	nop
    403c:	f5 cf       	rjmp	.-22     	; 0x4028 <bootmagic+0x18>
    print("done.\n");
    403e:	82 ee       	ldi	r24, 0xE2	; 226
    4040:	95 e0       	ldi	r25, 0x05	; 5
    4042:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>

    /* bootmagic skip */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SKIP)) {
    4046:	89 e2       	ldi	r24, 0x29	; 41
    4048:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <bootmagic_scan_keycode>
    404c:	81 11       	cpse	r24, r1
    404e:	13 c1       	rjmp	.+550    	; 0x4276 <bootmagic+0x266>
        return;
    }

    /* eeconfig clear */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    4050:	8a e2       	ldi	r24, 0x2A	; 42
    4052:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <bootmagic_scan_keycode>
    4056:	81 11       	cpse	r24, r1
        eeconfig_init();
    4058:	0e 94 3d 21 	call	0x427a	; 0x427a <eeconfig_init>
    }

    /* bootloader */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_BOOTLOADER)) {
    405c:	85 e0       	ldi	r24, 0x05	; 5
    405e:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <bootmagic_scan_keycode>
    4062:	81 11       	cpse	r24, r1
        bootloader_jump();
    4064:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <bootloader_jump>
    }

    /* debug enable */
    debug_config.raw = eeconfig_read_debug();
    4068:	0e 94 62 21 	call	0x42c4	; 0x42c4 <eeconfig_read_debug>
    406c:	80 93 c7 01 	sts	0x01C7, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    4070:	87 e0       	ldi	r24, 0x07	; 7
    4072:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <bootmagic_scan_keycode>
    4076:	88 23       	and	r24, r24
    4078:	a9 f1       	breq	.+106    	; 0x40e4 <bootmagic+0xd4>
        if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    407a:	8b e1       	ldi	r24, 0x1B	; 27
    407c:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <bootmagic_scan_keycode>
    4080:	88 23       	and	r24, r24
    4082:	51 f0       	breq	.+20     	; 0x4098 <bootmagic+0x88>
            debug_config.matrix = !debug_config.matrix;
    4084:	80 91 c7 01 	lds	r24, 0x01C7
    4088:	81 fb       	bst	r24, 1
    408a:	22 27       	eor	r18, r18
    408c:	20 f9       	bld	r18, 0
    408e:	91 e0       	ldi	r25, 0x01	; 1
    4090:	92 27       	eor	r25, r18
    4092:	90 fb       	bst	r25, 0
    4094:	81 f9       	bld	r24, 1
    4096:	0e c0       	rjmp	.+28     	; 0x40b4 <bootmagic+0xa4>
        } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    4098:	8e e0       	ldi	r24, 0x0E	; 14
    409a:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <bootmagic_scan_keycode>
    409e:	88 23       	and	r24, r24
    40a0:	61 f0       	breq	.+24     	; 0x40ba <bootmagic+0xaa>
            debug_config.keyboard = !debug_config.keyboard;
    40a2:	80 91 c7 01 	lds	r24, 0x01C7
    40a6:	82 fb       	bst	r24, 2
    40a8:	22 27       	eor	r18, r18
    40aa:	20 f9       	bld	r18, 0
    40ac:	91 e0       	ldi	r25, 0x01	; 1
    40ae:	92 27       	eor	r25, r18
    40b0:	90 fb       	bst	r25, 0
    40b2:	82 f9       	bld	r24, 2
    40b4:	80 93 c7 01 	sts	0x01C7, r24
    40b8:	15 c0       	rjmp	.+42     	; 0x40e4 <bootmagic+0xd4>
        } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    40ba:	80 e1       	ldi	r24, 0x10	; 16
    40bc:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <bootmagic_scan_keycode>
    40c0:	90 91 c7 01 	lds	r25, 0x01C7
    40c4:	88 23       	and	r24, r24
    40c6:	41 f0       	breq	.+16     	; 0x40d8 <bootmagic+0xc8>
            debug_config.mouse = !debug_config.mouse;
    40c8:	93 fb       	bst	r25, 3
    40ca:	22 27       	eor	r18, r18
    40cc:	20 f9       	bld	r18, 0
    40ce:	81 e0       	ldi	r24, 0x01	; 1
    40d0:	82 27       	eor	r24, r18
    40d2:	80 fb       	bst	r24, 0
    40d4:	93 f9       	bld	r25, 3
    40d6:	04 c0       	rjmp	.+8      	; 0x40e0 <bootmagic+0xd0>
        } else {
            debug_config.enable = !debug_config.enable;
    40d8:	89 2f       	mov	r24, r25
    40da:	80 95       	com	r24
    40dc:	80 fb       	bst	r24, 0
    40de:	90 f9       	bld	r25, 0
    40e0:	90 93 c7 01 	sts	0x01C7, r25
        }
    }
    eeconfig_write_debug(debug_config.raw);
    40e4:	80 91 c7 01 	lds	r24, 0x01C7
    40e8:	0e 94 66 21 	call	0x42cc	; 0x42cc <eeconfig_write_debug>

    /* keymap config */
    keymap_config.raw = eeconfig_read_keymap();
    40ec:	0e 94 74 21 	call	0x42e8	; 0x42e8 <eeconfig_read_keymap>
    40f0:	80 93 d8 01 	sts	0x01D8, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    40f4:	80 ee       	ldi	r24, 0xE0	; 224
    40f6:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <bootmagic_scan_keycode>
    40fa:	88 23       	and	r24, r24
    40fc:	41 f0       	breq	.+16     	; 0x410e <bootmagic+0xfe>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    40fe:	80 91 d8 01 	lds	r24, 0x01D8
    4102:	98 2f       	mov	r25, r24
    4104:	90 95       	com	r25
    4106:	90 fb       	bst	r25, 0
    4108:	80 f9       	bld	r24, 0
    410a:	80 93 d8 01 	sts	0x01D8, r24
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    410e:	89 e3       	ldi	r24, 0x39	; 57
    4110:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <bootmagic_scan_keycode>
    4114:	88 23       	and	r24, r24
    4116:	59 f0       	breq	.+22     	; 0x412e <bootmagic+0x11e>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    4118:	80 91 d8 01 	lds	r24, 0x01D8
    411c:	81 fb       	bst	r24, 1
    411e:	22 27       	eor	r18, r18
    4120:	20 f9       	bld	r18, 0
    4122:	91 e0       	ldi	r25, 0x01	; 1
    4124:	92 27       	eor	r25, r18
    4126:	90 fb       	bst	r25, 0
    4128:	81 f9       	bld	r24, 1
    412a:	80 93 d8 01 	sts	0x01D8, r24
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    412e:	82 ee       	ldi	r24, 0xE2	; 226
    4130:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <bootmagic_scan_keycode>
    4134:	88 23       	and	r24, r24
    4136:	59 f0       	breq	.+22     	; 0x414e <bootmagic+0x13e>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    4138:	80 91 d8 01 	lds	r24, 0x01D8
    413c:	82 fb       	bst	r24, 2
    413e:	22 27       	eor	r18, r18
    4140:	20 f9       	bld	r18, 0
    4142:	91 e0       	ldi	r25, 0x01	; 1
    4144:	92 27       	eor	r25, r18
    4146:	90 fb       	bst	r25, 0
    4148:	82 f9       	bld	r24, 2
    414a:	80 93 d8 01 	sts	0x01D8, r24
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    414e:	86 ee       	ldi	r24, 0xE6	; 230
    4150:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <bootmagic_scan_keycode>
    4154:	88 23       	and	r24, r24
    4156:	59 f0       	breq	.+22     	; 0x416e <bootmagic+0x15e>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    4158:	80 91 d8 01 	lds	r24, 0x01D8
    415c:	83 fb       	bst	r24, 3
    415e:	22 27       	eor	r18, r18
    4160:	20 f9       	bld	r18, 0
    4162:	91 e0       	ldi	r25, 0x01	; 1
    4164:	92 27       	eor	r25, r18
    4166:	90 fb       	bst	r25, 0
    4168:	83 f9       	bld	r24, 3
    416a:	80 93 d8 01 	sts	0x01D8, r24
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_NO_GUI)) {
    416e:	83 ee       	ldi	r24, 0xE3	; 227
    4170:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <bootmagic_scan_keycode>
    4174:	88 23       	and	r24, r24
    4176:	59 f0       	breq	.+22     	; 0x418e <bootmagic+0x17e>
        keymap_config.no_gui = !keymap_config.no_gui;
    4178:	80 91 d8 01 	lds	r24, 0x01D8
    417c:	84 fb       	bst	r24, 4
    417e:	22 27       	eor	r18, r18
    4180:	20 f9       	bld	r18, 0
    4182:	91 e0       	ldi	r25, 0x01	; 1
    4184:	92 27       	eor	r25, r18
    4186:	90 fb       	bst	r25, 0
    4188:	84 f9       	bld	r24, 4
    418a:	80 93 d8 01 	sts	0x01D8, r24
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    418e:	85 e3       	ldi	r24, 0x35	; 53
    4190:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <bootmagic_scan_keycode>
    4194:	88 23       	and	r24, r24
    4196:	59 f0       	breq	.+22     	; 0x41ae <bootmagic+0x19e>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    4198:	80 91 d8 01 	lds	r24, 0x01D8
    419c:	85 fb       	bst	r24, 5
    419e:	22 27       	eor	r18, r18
    41a0:	20 f9       	bld	r18, 0
    41a2:	91 e0       	ldi	r25, 0x01	; 1
    41a4:	92 27       	eor	r25, r18
    41a6:	90 fb       	bst	r25, 0
    41a8:	85 f9       	bld	r24, 5
    41aa:	80 93 d8 01 	sts	0x01D8, r24
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    41ae:	81 e3       	ldi	r24, 0x31	; 49
    41b0:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <bootmagic_scan_keycode>
    41b4:	88 23       	and	r24, r24
    41b6:	59 f0       	breq	.+22     	; 0x41ce <bootmagic+0x1be>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    41b8:	80 91 d8 01 	lds	r24, 0x01D8
    41bc:	86 fb       	bst	r24, 6
    41be:	22 27       	eor	r18, r18
    41c0:	20 f9       	bld	r18, 0
    41c2:	91 e0       	ldi	r25, 0x01	; 1
    41c4:	92 27       	eor	r25, r18
    41c6:	90 fb       	bst	r25, 0
    41c8:	86 f9       	bld	r24, 6
    41ca:	80 93 d8 01 	sts	0x01D8, r24
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_HOST_NKRO)) {
    41ce:	81 e1       	ldi	r24, 0x11	; 17
    41d0:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <bootmagic_scan_keycode>
    41d4:	88 23       	and	r24, r24
    41d6:	59 f0       	breq	.+22     	; 0x41ee <bootmagic+0x1de>
        keymap_config.nkro = !keymap_config.nkro;
    41d8:	80 91 d8 01 	lds	r24, 0x01D8
    41dc:	87 fb       	bst	r24, 7
    41de:	22 27       	eor	r18, r18
    41e0:	20 f9       	bld	r18, 0
    41e2:	91 e0       	ldi	r25, 0x01	; 1
    41e4:	92 27       	eor	r25, r18
    41e6:	90 fb       	bst	r25, 0
    41e8:	87 f9       	bld	r24, 7
    41ea:	80 93 d8 01 	sts	0x01D8, r24
    }
    eeconfig_write_keymap(keymap_config.raw);
    41ee:	80 91 d8 01 	lds	r24, 0x01D8
    41f2:	0e 94 78 21 	call	0x42f0	; 0x42f0 <eeconfig_write_keymap>

#ifdef NKRO_ENABLE
    keyboard_nkro = keymap_config.nkro;
    41f6:	80 91 d8 01 	lds	r24, 0x01D8
    41fa:	87 fb       	bst	r24, 7
    41fc:	88 27       	eor	r24, r24
    41fe:	80 f9       	bld	r24, 0
    4200:	80 93 0c 01 	sts	0x010C, r24
#endif

    /* default layer */
    uint8_t default_layer = 0;
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    4204:	87 e2       	ldi	r24, 0x27	; 39
    4206:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <bootmagic_scan_keycode>
    420a:	c8 2f       	mov	r28, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    420c:	8e e1       	ldi	r24, 0x1E	; 30
    420e:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <bootmagic_scan_keycode>
    4212:	81 11       	cpse	r24, r1
    4214:	c2 60       	ori	r28, 0x02	; 2
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    4216:	8f e1       	ldi	r24, 0x1F	; 31
    4218:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <bootmagic_scan_keycode>
    421c:	81 11       	cpse	r24, r1
    421e:	c4 60       	ori	r28, 0x04	; 4
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    4220:	80 e2       	ldi	r24, 0x20	; 32
    4222:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <bootmagic_scan_keycode>
    4226:	81 11       	cpse	r24, r1
    4228:	c8 60       	ori	r28, 0x08	; 8
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    422a:	81 e2       	ldi	r24, 0x21	; 33
    422c:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <bootmagic_scan_keycode>
    4230:	81 11       	cpse	r24, r1
    4232:	c0 61       	ori	r28, 0x10	; 16
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    4234:	82 e2       	ldi	r24, 0x22	; 34
    4236:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <bootmagic_scan_keycode>
    423a:	81 11       	cpse	r24, r1
    423c:	c0 62       	ori	r28, 0x20	; 32
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    423e:	83 e2       	ldi	r24, 0x23	; 35
    4240:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <bootmagic_scan_keycode>
    4244:	81 11       	cpse	r24, r1
    4246:	c0 64       	ori	r28, 0x40	; 64
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    4248:	84 e2       	ldi	r24, 0x24	; 36
    424a:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <bootmagic_scan_keycode>
    424e:	88 23       	and	r24, r24
    4250:	11 f0       	breq	.+4      	; 0x4256 <bootmagic+0x246>
    4252:	c0 68       	ori	r28, 0x80	; 128
    4254:	02 c0       	rjmp	.+4      	; 0x425a <bootmagic+0x24a>
    if (default_layer) {
    4256:	cc 23       	and	r28, r28
    4258:	29 f0       	breq	.+10     	; 0x4264 <bootmagic+0x254>
        eeconfig_write_default_layer(default_layer);
    425a:	8c 2f       	mov	r24, r28
    425c:	0e 94 6f 21 	call	0x42de	; 0x42de <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    4260:	6c 2f       	mov	r22, r28
    4262:	03 c0       	rjmp	.+6      	; 0x426a <bootmagic+0x25a>
    } else {
        default_layer = eeconfig_read_default_layer();
    4264:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    4268:	68 2f       	mov	r22, r24
    426a:	70 e0       	ldi	r23, 0x00	; 0
    426c:	80 e0       	ldi	r24, 0x00	; 0
    426e:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    4270:	cf 91       	pop	r28
    if (default_layer) {
        eeconfig_write_default_layer(default_layer);
        default_layer_set((uint32_t)default_layer);
    } else {
        default_layer = eeconfig_read_default_layer();
        default_layer_set((uint32_t)default_layer);
    4272:	0c 94 df 1a 	jmp	0x35be	; 0x35be <default_layer_set>
    }
}
    4276:	cf 91       	pop	r28
    4278:	08 95       	ret

0000427a <eeconfig_init>:
#include <avr/eeprom.h>
#include "eeconfig.h"

void eeconfig_init(void)
{
    eeprom_write_word(EECONFIG_MAGIC,          EECONFIG_MAGIC_NUMBER);
    427a:	6d ee       	ldi	r22, 0xED	; 237
    427c:	7e ef       	ldi	r23, 0xFE	; 254
    427e:	80 e0       	ldi	r24, 0x00	; 0
    4280:	90 e0       	ldi	r25, 0x00	; 0
    4282:	0e 94 cd 2a 	call	0x559a	; 0x559a <__eewr_word_m32u4>
    eeprom_write_byte(EECONFIG_DEBUG,          0);
    4286:	60 e0       	ldi	r22, 0x00	; 0
    4288:	82 e0       	ldi	r24, 0x02	; 2
    428a:	90 e0       	ldi	r25, 0x00	; 0
    428c:	0e 94 bf 2a 	call	0x557e	; 0x557e <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_DEFAULT_LAYER,  0);
    4290:	60 e0       	ldi	r22, 0x00	; 0
    4292:	83 e0       	ldi	r24, 0x03	; 3
    4294:	90 e0       	ldi	r25, 0x00	; 0
    4296:	0e 94 bf 2a 	call	0x557e	; 0x557e <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_KEYMAP,         0);
    429a:	60 e0       	ldi	r22, 0x00	; 0
    429c:	84 e0       	ldi	r24, 0x04	; 4
    429e:	90 e0       	ldi	r25, 0x00	; 0
    42a0:	0e 94 bf 2a 	call	0x557e	; 0x557e <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_MOUSEKEY_ACCEL, 0);
    42a4:	60 e0       	ldi	r22, 0x00	; 0
    42a6:	85 e0       	ldi	r24, 0x05	; 5
    42a8:	90 e0       	ldi	r25, 0x00	; 0
    42aa:	0c 94 bf 2a 	jmp	0x557e	; 0x557e <__eewr_byte_m32u4>

000042ae <eeconfig_is_enabled>:
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    42ae:	80 e0       	ldi	r24, 0x00	; 0
    42b0:	90 e0       	ldi	r25, 0x00	; 0
    42b2:	0e 94 b9 2a 	call	0x5572	; 0x5572 <__eerd_word_m32u4>
    42b6:	21 e0       	ldi	r18, 0x01	; 1
    42b8:	8d 3e       	cpi	r24, 0xED	; 237
    42ba:	9e 4f       	sbci	r25, 0xFE	; 254
    42bc:	09 f0       	breq	.+2      	; 0x42c0 <eeconfig_is_enabled+0x12>
    42be:	20 e0       	ldi	r18, 0x00	; 0
}
    42c0:	82 2f       	mov	r24, r18
    42c2:	08 95       	ret

000042c4 <eeconfig_read_debug>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    42c4:	82 e0       	ldi	r24, 0x02	; 2
    42c6:	90 e0       	ldi	r25, 0x00	; 0
    42c8:	0c 94 b1 2a 	jmp	0x5562	; 0x5562 <__eerd_byte_m32u4>

000042cc <eeconfig_write_debug>:
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    42cc:	68 2f       	mov	r22, r24
    42ce:	82 e0       	ldi	r24, 0x02	; 2
    42d0:	90 e0       	ldi	r25, 0x00	; 0
    42d2:	0c 94 bf 2a 	jmp	0x557e	; 0x557e <__eewr_byte_m32u4>

000042d6 <eeconfig_read_default_layer>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    42d6:	83 e0       	ldi	r24, 0x03	; 3
    42d8:	90 e0       	ldi	r25, 0x00	; 0
    42da:	0c 94 b1 2a 	jmp	0x5562	; 0x5562 <__eerd_byte_m32u4>

000042de <eeconfig_write_default_layer>:
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    42de:	68 2f       	mov	r22, r24
    42e0:	83 e0       	ldi	r24, 0x03	; 3
    42e2:	90 e0       	ldi	r25, 0x00	; 0
    42e4:	0c 94 bf 2a 	jmp	0x557e	; 0x557e <__eewr_byte_m32u4>

000042e8 <eeconfig_read_keymap>:

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    42e8:	84 e0       	ldi	r24, 0x04	; 4
    42ea:	90 e0       	ldi	r25, 0x00	; 0
    42ec:	0c 94 b1 2a 	jmp	0x5562	; 0x5562 <__eerd_byte_m32u4>

000042f0 <eeconfig_write_keymap>:
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    42f0:	68 2f       	mov	r22, r24
    42f2:	84 e0       	ldi	r24, 0x04	; 4
    42f4:	90 e0       	ldi	r25, 0x00	; 0
    42f6:	0c 94 bf 2a 	jmp	0x557e	; 0x557e <__eewr_byte_m32u4>

000042fa <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    42fa:	80 91 cf 01 	lds	r24, 0x01CF
    42fe:	80 ff       	sbrs	r24, 0
    4300:	0b c0       	rjmp	.+22     	; 0x4318 <move_unit+0x1e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    4302:	60 91 12 01 	lds	r22, 0x0112
    4306:	85 e0       	ldi	r24, 0x05	; 5
    4308:	68 9f       	mul	r22, r24
    430a:	b0 01       	movw	r22, r0
    430c:	11 24       	eor	r1, r1
    430e:	75 95       	asr	r23
    4310:	67 95       	ror	r22
    4312:	75 95       	asr	r23
    4314:	67 95       	ror	r22
    4316:	2b c0       	rjmp	.+86     	; 0x436e <move_unit+0x74>
    } else if (mousekey_accel & (1<<1)) {
    4318:	81 ff       	sbrs	r24, 1
    431a:	09 c0       	rjmp	.+18     	; 0x432e <move_unit+0x34>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    431c:	60 91 12 01 	lds	r22, 0x0112
    4320:	85 e0       	ldi	r24, 0x05	; 5
    4322:	68 9f       	mul	r22, r24
    4324:	b0 01       	movw	r22, r0
    4326:	11 24       	eor	r1, r1
    4328:	75 95       	asr	r23
    432a:	67 95       	ror	r22
    432c:	20 c0       	rjmp	.+64     	; 0x436e <move_unit+0x74>
    } else if (mousekey_accel & (1<<2)) {
    432e:	82 ff       	sbrs	r24, 2
    4330:	07 c0       	rjmp	.+14     	; 0x4340 <move_unit+0x46>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    4332:	60 91 12 01 	lds	r22, 0x0112
    4336:	85 e0       	ldi	r24, 0x05	; 5
    4338:	68 9f       	mul	r22, r24
    433a:	b0 01       	movw	r22, r0
    433c:	11 24       	eor	r1, r1
    433e:	17 c0       	rjmp	.+46     	; 0x436e <move_unit+0x74>
    } else if (mousekey_repeat == 0) {
    4340:	90 91 d0 01 	lds	r25, 0x01D0
    4344:	99 23       	and	r25, r25
    4346:	d1 f0       	breq	.+52     	; 0x437c <move_unit+0x82>
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    4348:	60 91 11 01 	lds	r22, 0x0111
    434c:	96 17       	cp	r25, r22
    434e:	88 f7       	brcc	.-30     	; 0x4332 <move_unit+0x38>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    4350:	20 91 12 01 	lds	r18, 0x0112
    4354:	85 e0       	ldi	r24, 0x05	; 5
    4356:	28 9f       	mul	r18, r24
    4358:	90 01       	movw	r18, r0
    435a:	11 24       	eor	r1, r1
    435c:	92 9f       	mul	r25, r18
    435e:	a0 01       	movw	r20, r0
    4360:	93 9f       	mul	r25, r19
    4362:	50 0d       	add	r21, r0
    4364:	11 24       	eor	r1, r1
    4366:	70 e0       	ldi	r23, 0x00	; 0
    4368:	ca 01       	movw	r24, r20
    436a:	0e 94 83 2a 	call	0x5506	; 0x5506 <__divmodhi4>
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    436e:	60 38       	cpi	r22, 0x80	; 128
    4370:	71 05       	cpc	r23, r1
    4372:	40 f4       	brcc	.+16     	; 0x4384 <move_unit+0x8a>
    4374:	61 15       	cp	r22, r1
    4376:	71 05       	cpc	r23, r1
    4378:	39 f0       	breq	.+14     	; 0x4388 <move_unit+0x8e>
    437a:	02 c0       	rjmp	.+4      	; 0x4380 <move_unit+0x86>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_MOVE_DELTA;
    437c:	65 e0       	ldi	r22, 0x05	; 5
    437e:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    4380:	86 2f       	mov	r24, r22
    4382:	08 95       	ret
    4384:	8f e7       	ldi	r24, 0x7F	; 127
    4386:	08 95       	ret
    4388:	81 e0       	ldi	r24, 0x01	; 1
}
    438a:	08 95       	ret

0000438c <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    438c:	80 91 cf 01 	lds	r24, 0x01CF
    4390:	80 ff       	sbrs	r24, 0
    4392:	08 c0       	rjmp	.+16     	; 0x43a4 <wheel_unit+0x18>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    4394:	60 91 10 01 	lds	r22, 0x0110
    4398:	70 e0       	ldi	r23, 0x00	; 0
    439a:	75 95       	asr	r23
    439c:	67 95       	ror	r22
    439e:	75 95       	asr	r23
    43a0:	67 95       	ror	r22
    43a2:	21 c0       	rjmp	.+66     	; 0x43e6 <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<1)) {
    43a4:	81 ff       	sbrs	r24, 1
    43a6:	06 c0       	rjmp	.+12     	; 0x43b4 <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    43a8:	60 91 10 01 	lds	r22, 0x0110
    43ac:	70 e0       	ldi	r23, 0x00	; 0
    43ae:	75 95       	asr	r23
    43b0:	67 95       	ror	r22
    43b2:	19 c0       	rjmp	.+50     	; 0x43e6 <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<2)) {
    43b4:	82 ff       	sbrs	r24, 2
    43b6:	04 c0       	rjmp	.+8      	; 0x43c0 <wheel_unit+0x34>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    43b8:	60 91 10 01 	lds	r22, 0x0110
    43bc:	70 e0       	ldi	r23, 0x00	; 0
    43be:	10 c0       	rjmp	.+32     	; 0x43e0 <wheel_unit+0x54>
    } else if (mousekey_repeat == 0) {
    43c0:	90 91 d0 01 	lds	r25, 0x01D0
    43c4:	99 23       	and	r25, r25
    43c6:	c1 f0       	breq	.+48     	; 0x43f8 <wheel_unit+0x6c>
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    43c8:	60 91 0f 01 	lds	r22, 0x010F
    43cc:	96 17       	cp	r25, r22
    43ce:	a0 f7       	brcc	.-24     	; 0x43b8 <wheel_unit+0x2c>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    43d0:	80 91 10 01 	lds	r24, 0x0110
    43d4:	89 9f       	mul	r24, r25
    43d6:	c0 01       	movw	r24, r0
    43d8:	11 24       	eor	r1, r1
    43da:	70 e0       	ldi	r23, 0x00	; 0
    43dc:	0e 94 83 2a 	call	0x5506	; 0x5506 <__divmodhi4>
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    43e0:	60 38       	cpi	r22, 0x80	; 128
    43e2:	71 05       	cpc	r23, r1
    43e4:	28 f4       	brcc	.+10     	; 0x43f0 <wheel_unit+0x64>
    43e6:	61 15       	cp	r22, r1
    43e8:	71 05       	cpc	r23, r1
    43ea:	21 f0       	breq	.+8      	; 0x43f4 <wheel_unit+0x68>
    43ec:	86 2f       	mov	r24, r22
    43ee:	08 95       	ret
    43f0:	8f e7       	ldi	r24, 0x7F	; 127
    43f2:	08 95       	ret
    43f4:	81 e0       	ldi	r24, 0x01	; 1
    43f6:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_WHEEL_DELTA;
    43f8:	61 e0       	ldi	r22, 0x01	; 1
    43fa:	70 e0       	ldi	r23, 0x00	; 0
    43fc:	f4 cf       	rjmp	.-24     	; 0x43e6 <wheel_unit+0x5a>

000043fe <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    43fe:	80 3f       	cpi	r24, 0xF0	; 240
    4400:	21 f4       	brne	.+8      	; 0x440a <mousekey_on+0xc>
    4402:	0e 94 7d 21 	call	0x42fa	; 0x42fa <move_unit>
    4406:	81 95       	neg	r24
    4408:	04 c0       	rjmp	.+8      	; 0x4412 <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    440a:	81 3f       	cpi	r24, 0xF1	; 241
    440c:	29 f4       	brne	.+10     	; 0x4418 <mousekey_on+0x1a>
    440e:	0e 94 7d 21 	call	0x42fa	; 0x42fa <move_unit>
    4412:	80 93 d3 01 	sts	0x01D3, r24
    4416:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    4418:	82 3f       	cpi	r24, 0xF2	; 242
    441a:	21 f4       	brne	.+8      	; 0x4424 <mousekey_on+0x26>
    441c:	0e 94 7d 21 	call	0x42fa	; 0x42fa <move_unit>
    4420:	81 95       	neg	r24
    4422:	04 c0       	rjmp	.+8      	; 0x442c <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    4424:	83 3f       	cpi	r24, 0xF3	; 243
    4426:	29 f4       	brne	.+10     	; 0x4432 <mousekey_on+0x34>
    4428:	0e 94 7d 21 	call	0x42fa	; 0x42fa <move_unit>
    442c:	80 93 d2 01 	sts	0x01D2, r24
    4430:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    4432:	89 3f       	cpi	r24, 0xF9	; 249
    4434:	19 f4       	brne	.+6      	; 0x443c <mousekey_on+0x3e>
    4436:	0e 94 c6 21 	call	0x438c	; 0x438c <wheel_unit>
    443a:	05 c0       	rjmp	.+10     	; 0x4446 <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    443c:	8a 3f       	cpi	r24, 0xFA	; 250
    443e:	31 f4       	brne	.+12     	; 0x444c <mousekey_on+0x4e>
    4440:	0e 94 c6 21 	call	0x438c	; 0x438c <wheel_unit>
    4444:	81 95       	neg	r24
    4446:	80 93 d4 01 	sts	0x01D4, r24
    444a:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    444c:	8b 3f       	cpi	r24, 0xFB	; 251
    444e:	21 f4       	brne	.+8      	; 0x4458 <mousekey_on+0x5a>
    4450:	0e 94 c6 21 	call	0x438c	; 0x438c <wheel_unit>
    4454:	81 95       	neg	r24
    4456:	04 c0       	rjmp	.+8      	; 0x4460 <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    4458:	8c 3f       	cpi	r24, 0xFC	; 252
    445a:	29 f4       	brne	.+10     	; 0x4466 <mousekey_on+0x68>
    445c:	0e 94 c6 21 	call	0x438c	; 0x438c <wheel_unit>
    4460:	80 93 d5 01 	sts	0x01D5, r24
    4464:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    4466:	84 3f       	cpi	r24, 0xF4	; 244
    4468:	21 f4       	brne	.+8      	; 0x4472 <mousekey_on+0x74>
    446a:	80 91 d1 01 	lds	r24, 0x01D1
    446e:	81 60       	ori	r24, 0x01	; 1
    4470:	17 c0       	rjmp	.+46     	; 0x44a0 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    4472:	85 3f       	cpi	r24, 0xF5	; 245
    4474:	21 f4       	brne	.+8      	; 0x447e <mousekey_on+0x80>
    4476:	80 91 d1 01 	lds	r24, 0x01D1
    447a:	82 60       	ori	r24, 0x02	; 2
    447c:	11 c0       	rjmp	.+34     	; 0x44a0 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    447e:	86 3f       	cpi	r24, 0xF6	; 246
    4480:	21 f4       	brne	.+8      	; 0x448a <mousekey_on+0x8c>
    4482:	80 91 d1 01 	lds	r24, 0x01D1
    4486:	84 60       	ori	r24, 0x04	; 4
    4488:	0b c0       	rjmp	.+22     	; 0x44a0 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    448a:	87 3f       	cpi	r24, 0xF7	; 247
    448c:	21 f4       	brne	.+8      	; 0x4496 <mousekey_on+0x98>
    448e:	80 91 d1 01 	lds	r24, 0x01D1
    4492:	88 60       	ori	r24, 0x08	; 8
    4494:	05 c0       	rjmp	.+10     	; 0x44a0 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    4496:	88 3f       	cpi	r24, 0xF8	; 248
    4498:	31 f4       	brne	.+12     	; 0x44a6 <mousekey_on+0xa8>
    449a:	80 91 d1 01 	lds	r24, 0x01D1
    449e:	80 61       	ori	r24, 0x10	; 16
    44a0:	80 93 d1 01 	sts	0x01D1, r24
    44a4:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    44a6:	8d 3f       	cpi	r24, 0xFD	; 253
    44a8:	21 f4       	brne	.+8      	; 0x44b2 <mousekey_on+0xb4>
    44aa:	80 91 cf 01 	lds	r24, 0x01CF
    44ae:	81 60       	ori	r24, 0x01	; 1
    44b0:	0b c0       	rjmp	.+22     	; 0x44c8 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    44b2:	8e 3f       	cpi	r24, 0xFE	; 254
    44b4:	21 f4       	brne	.+8      	; 0x44be <mousekey_on+0xc0>
    44b6:	80 91 cf 01 	lds	r24, 0x01CF
    44ba:	82 60       	ori	r24, 0x02	; 2
    44bc:	05 c0       	rjmp	.+10     	; 0x44c8 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    44be:	8f 3f       	cpi	r24, 0xFF	; 255
    44c0:	29 f4       	brne	.+10     	; 0x44cc <mousekey_on+0xce>
    44c2:	80 91 cf 01 	lds	r24, 0x01CF
    44c6:	84 60       	ori	r24, 0x04	; 4
    44c8:	80 93 cf 01 	sts	0x01CF, r24
    44cc:	08 95       	ret

000044ce <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    44ce:	80 3f       	cpi	r24, 0xF0	; 240
    44d0:	39 f4       	brne	.+14     	; 0x44e0 <mousekey_off+0x12>
    44d2:	80 91 d3 01 	lds	r24, 0x01D3
    44d6:	87 ff       	sbrs	r24, 7
    44d8:	6c c0       	rjmp	.+216    	; 0x45b2 <mousekey_off+0xe4>
    44da:	10 92 d3 01 	sts	0x01D3, r1
    44de:	69 c0       	rjmp	.+210    	; 0x45b2 <mousekey_off+0xe4>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    44e0:	81 3f       	cpi	r24, 0xF1	; 241
    44e2:	29 f4       	brne	.+10     	; 0x44ee <mousekey_off+0x20>
    44e4:	80 91 d3 01 	lds	r24, 0x01D3
    44e8:	18 16       	cp	r1, r24
    44ea:	bc f3       	brlt	.-18     	; 0x44da <mousekey_off+0xc>
    44ec:	62 c0       	rjmp	.+196    	; 0x45b2 <mousekey_off+0xe4>
    44ee:	90 91 d2 01 	lds	r25, 0x01D2
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    44f2:	82 3f       	cpi	r24, 0xF2	; 242
    44f4:	29 f4       	brne	.+10     	; 0x4500 <mousekey_off+0x32>
    44f6:	97 ff       	sbrs	r25, 7
    44f8:	5c c0       	rjmp	.+184    	; 0x45b2 <mousekey_off+0xe4>
    44fa:	10 92 d2 01 	sts	0x01D2, r1
    44fe:	59 c0       	rjmp	.+178    	; 0x45b2 <mousekey_off+0xe4>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    4500:	83 3f       	cpi	r24, 0xF3	; 243
    4502:	19 f4       	brne	.+6      	; 0x450a <mousekey_off+0x3c>
    4504:	19 16       	cp	r1, r25
    4506:	cc f3       	brlt	.-14     	; 0x44fa <mousekey_off+0x2c>
    4508:	54 c0       	rjmp	.+168    	; 0x45b2 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    450a:	89 3f       	cpi	r24, 0xF9	; 249
    450c:	41 f4       	brne	.+16     	; 0x451e <mousekey_off+0x50>
    450e:	80 91 d4 01 	lds	r24, 0x01D4
    4512:	18 16       	cp	r1, r24
    4514:	0c f0       	brlt	.+2      	; 0x4518 <mousekey_off+0x4a>
    4516:	4d c0       	rjmp	.+154    	; 0x45b2 <mousekey_off+0xe4>
    4518:	10 92 d4 01 	sts	0x01D4, r1
    451c:	4a c0       	rjmp	.+148    	; 0x45b2 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    451e:	8a 3f       	cpi	r24, 0xFA	; 250
    4520:	29 f4       	brne	.+10     	; 0x452c <mousekey_off+0x5e>
    4522:	80 91 d4 01 	lds	r24, 0x01D4
    4526:	87 ff       	sbrs	r24, 7
    4528:	44 c0       	rjmp	.+136    	; 0x45b2 <mousekey_off+0xe4>
    452a:	f6 cf       	rjmp	.-20     	; 0x4518 <mousekey_off+0x4a>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    452c:	8b 3f       	cpi	r24, 0xFB	; 251
    452e:	39 f4       	brne	.+14     	; 0x453e <mousekey_off+0x70>
    4530:	80 91 d5 01 	lds	r24, 0x01D5
    4534:	87 ff       	sbrs	r24, 7
    4536:	3d c0       	rjmp	.+122    	; 0x45b2 <mousekey_off+0xe4>
    4538:	10 92 d5 01 	sts	0x01D5, r1
    453c:	3a c0       	rjmp	.+116    	; 0x45b2 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    453e:	8c 3f       	cpi	r24, 0xFC	; 252
    4540:	29 f4       	brne	.+10     	; 0x454c <mousekey_off+0x7e>
    4542:	80 91 d5 01 	lds	r24, 0x01D5
    4546:	18 16       	cp	r1, r24
    4548:	bc f3       	brlt	.-18     	; 0x4538 <mousekey_off+0x6a>
    454a:	33 c0       	rjmp	.+102    	; 0x45b2 <mousekey_off+0xe4>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    454c:	84 3f       	cpi	r24, 0xF4	; 244
    454e:	21 f4       	brne	.+8      	; 0x4558 <mousekey_off+0x8a>
    4550:	80 91 d1 01 	lds	r24, 0x01D1
    4554:	8e 7f       	andi	r24, 0xFE	; 254
    4556:	17 c0       	rjmp	.+46     	; 0x4586 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    4558:	85 3f       	cpi	r24, 0xF5	; 245
    455a:	21 f4       	brne	.+8      	; 0x4564 <mousekey_off+0x96>
    455c:	80 91 d1 01 	lds	r24, 0x01D1
    4560:	8d 7f       	andi	r24, 0xFD	; 253
    4562:	11 c0       	rjmp	.+34     	; 0x4586 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    4564:	86 3f       	cpi	r24, 0xF6	; 246
    4566:	21 f4       	brne	.+8      	; 0x4570 <mousekey_off+0xa2>
    4568:	80 91 d1 01 	lds	r24, 0x01D1
    456c:	8b 7f       	andi	r24, 0xFB	; 251
    456e:	0b c0       	rjmp	.+22     	; 0x4586 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    4570:	87 3f       	cpi	r24, 0xF7	; 247
    4572:	21 f4       	brne	.+8      	; 0x457c <mousekey_off+0xae>
    4574:	80 91 d1 01 	lds	r24, 0x01D1
    4578:	87 7f       	andi	r24, 0xF7	; 247
    457a:	05 c0       	rjmp	.+10     	; 0x4586 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    457c:	88 3f       	cpi	r24, 0xF8	; 248
    457e:	31 f4       	brne	.+12     	; 0x458c <mousekey_off+0xbe>
    4580:	80 91 d1 01 	lds	r24, 0x01D1
    4584:	8f 7e       	andi	r24, 0xEF	; 239
    4586:	80 93 d1 01 	sts	0x01D1, r24
    458a:	13 c0       	rjmp	.+38     	; 0x45b2 <mousekey_off+0xe4>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    458c:	8d 3f       	cpi	r24, 0xFD	; 253
    458e:	21 f4       	brne	.+8      	; 0x4598 <mousekey_off+0xca>
    4590:	80 91 cf 01 	lds	r24, 0x01CF
    4594:	8e 7f       	andi	r24, 0xFE	; 254
    4596:	0b c0       	rjmp	.+22     	; 0x45ae <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    4598:	8e 3f       	cpi	r24, 0xFE	; 254
    459a:	21 f4       	brne	.+8      	; 0x45a4 <mousekey_off+0xd6>
    459c:	80 91 cf 01 	lds	r24, 0x01CF
    45a0:	8d 7f       	andi	r24, 0xFD	; 253
    45a2:	05 c0       	rjmp	.+10     	; 0x45ae <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    45a4:	8f 3f       	cpi	r24, 0xFF	; 255
    45a6:	29 f4       	brne	.+10     	; 0x45b2 <mousekey_off+0xe4>
    45a8:	80 91 cf 01 	lds	r24, 0x01CF
    45ac:	8b 7f       	andi	r24, 0xFB	; 251
    45ae:	80 93 cf 01 	sts	0x01CF, r24

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    45b2:	80 91 d2 01 	lds	r24, 0x01D2
    45b6:	81 11       	cpse	r24, r1
    45b8:	0e c0       	rjmp	.+28     	; 0x45d6 <mousekey_off+0x108>
    45ba:	80 91 d3 01 	lds	r24, 0x01D3
    45be:	81 11       	cpse	r24, r1
    45c0:	0a c0       	rjmp	.+20     	; 0x45d6 <mousekey_off+0x108>
    45c2:	80 91 d4 01 	lds	r24, 0x01D4
    45c6:	81 11       	cpse	r24, r1
    45c8:	06 c0       	rjmp	.+12     	; 0x45d6 <mousekey_off+0x108>
    45ca:	80 91 d5 01 	lds	r24, 0x01D5
    45ce:	81 11       	cpse	r24, r1
    45d0:	02 c0       	rjmp	.+4      	; 0x45d6 <mousekey_off+0x108>
        mousekey_repeat = 0;
    45d2:	10 92 d0 01 	sts	0x01D0, r1
    45d6:	08 95       	ret

000045d8 <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    45d8:	80 91 c7 01 	lds	r24, 0x01C7
    45dc:	83 ff       	sbrs	r24, 3
    45de:	7e c0       	rjmp	.+252    	; 0x46dc <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    45e0:	85 e2       	ldi	r24, 0x25	; 37
    45e2:	96 e0       	ldi	r25, 0x06	; 6
    45e4:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    phex(mouse_report.buttons); print("|");
    45e8:	80 91 d1 01 	lds	r24, 0x01D1
    45ec:	1f 92       	push	r1
    45ee:	8f 93       	push	r24
    45f0:	80 e2       	ldi	r24, 0x20	; 32
    45f2:	96 e0       	ldi	r25, 0x06	; 6
    45f4:	9f 93       	push	r25
    45f6:	8f 93       	push	r24
    45f8:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
    45fc:	8e e1       	ldi	r24, 0x1E	; 30
    45fe:	96 e0       	ldi	r25, 0x06	; 6
    4600:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    print_decs(mouse_report.x); print(" ");
    4604:	80 91 d2 01 	lds	r24, 0x01D2
    4608:	28 2f       	mov	r18, r24
    460a:	33 27       	eor	r19, r19
    460c:	27 fd       	sbrc	r18, 7
    460e:	30 95       	com	r19
    4610:	3f 93       	push	r19
    4612:	8f 93       	push	r24
    4614:	8b e1       	ldi	r24, 0x1B	; 27
    4616:	96 e0       	ldi	r25, 0x06	; 6
    4618:	9f 93       	push	r25
    461a:	8f 93       	push	r24
    461c:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
    4620:	89 e1       	ldi	r24, 0x19	; 25
    4622:	96 e0       	ldi	r25, 0x06	; 6
    4624:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    print_decs(mouse_report.y); print(" ");
    4628:	80 91 d3 01 	lds	r24, 0x01D3
    462c:	28 2f       	mov	r18, r24
    462e:	33 27       	eor	r19, r19
    4630:	27 fd       	sbrc	r18, 7
    4632:	30 95       	com	r19
    4634:	3f 93       	push	r19
    4636:	8f 93       	push	r24
    4638:	86 e1       	ldi	r24, 0x16	; 22
    463a:	96 e0       	ldi	r25, 0x06	; 6
    463c:	9f 93       	push	r25
    463e:	8f 93       	push	r24
    4640:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
    4644:	84 e1       	ldi	r24, 0x14	; 20
    4646:	96 e0       	ldi	r25, 0x06	; 6
    4648:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    print_decs(mouse_report.v); print(" ");
    464c:	80 91 d4 01 	lds	r24, 0x01D4
    4650:	28 2f       	mov	r18, r24
    4652:	33 27       	eor	r19, r19
    4654:	27 fd       	sbrc	r18, 7
    4656:	30 95       	com	r19
    4658:	3f 93       	push	r19
    465a:	8f 93       	push	r24
    465c:	81 e1       	ldi	r24, 0x11	; 17
    465e:	96 e0       	ldi	r25, 0x06	; 6
    4660:	9f 93       	push	r25
    4662:	8f 93       	push	r24
    4664:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
    4668:	8f e0       	ldi	r24, 0x0F	; 15
    466a:	96 e0       	ldi	r25, 0x06	; 6
    466c:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    print_decs(mouse_report.h); print("](");
    4670:	80 91 d5 01 	lds	r24, 0x01D5
    4674:	28 2f       	mov	r18, r24
    4676:	33 27       	eor	r19, r19
    4678:	27 fd       	sbrc	r18, 7
    467a:	30 95       	com	r19
    467c:	3f 93       	push	r19
    467e:	8f 93       	push	r24
    4680:	8c e0       	ldi	r24, 0x0C	; 12
    4682:	96 e0       	ldi	r25, 0x06	; 6
    4684:	9f 93       	push	r25
    4686:	8f 93       	push	r24
    4688:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
    468c:	89 e0       	ldi	r24, 0x09	; 9
    468e:	96 e0       	ldi	r25, 0x06	; 6
    4690:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    print_dec(mousekey_repeat); print("/");
    4694:	80 91 d0 01 	lds	r24, 0x01D0
    4698:	1f 92       	push	r1
    469a:	8f 93       	push	r24
    469c:	86 e0       	ldi	r24, 0x06	; 6
    469e:	96 e0       	ldi	r25, 0x06	; 6
    46a0:	9f 93       	push	r25
    46a2:	8f 93       	push	r24
    46a4:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
    46a8:	84 e0       	ldi	r24, 0x04	; 4
    46aa:	96 e0       	ldi	r25, 0x06	; 6
    46ac:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    print_dec(mousekey_accel); print(")\n");
    46b0:	80 91 cf 01 	lds	r24, 0x01CF
    46b4:	1f 92       	push	r1
    46b6:	8f 93       	push	r24
    46b8:	81 e0       	ldi	r24, 0x01	; 1
    46ba:	96 e0       	ldi	r25, 0x06	; 6
    46bc:	9f 93       	push	r25
    46be:	8f 93       	push	r24
    46c0:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
    46c4:	8e ef       	ldi	r24, 0xFE	; 254
    46c6:	95 e0       	ldi	r25, 0x05	; 5
    46c8:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    46cc:	8d b7       	in	r24, 0x3d	; 61
    46ce:	9e b7       	in	r25, 0x3e	; 62
    46d0:	4c 96       	adiw	r24, 0x1c	; 28
    46d2:	0f b6       	in	r0, 0x3f	; 63
    46d4:	f8 94       	cli
    46d6:	9e bf       	out	0x3e, r25	; 62
    46d8:	0f be       	out	0x3f, r0	; 63
    46da:	8d bf       	out	0x3d, r24	; 61
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    46dc:	81 ed       	ldi	r24, 0xD1	; 209
    46de:	91 e0       	ldi	r25, 0x01	; 1
    46e0:	0e 94 7f 11 	call	0x22fe	; 0x22fe <host_mouse_send>
    last_timer = timer_read();
    46e4:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <timer_read>
    46e8:	90 93 ce 01 	sts	0x01CE, r25
    46ec:	80 93 cd 01 	sts	0x01CD, r24
    46f0:	08 95       	ret

000046f2 <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    46f2:	1f 93       	push	r17
    46f4:	cf 93       	push	r28
    46f6:	df 93       	push	r29
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    46f8:	80 91 cd 01 	lds	r24, 0x01CD
    46fc:	90 91 ce 01 	lds	r25, 0x01CE
    4700:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <timer_elapsed>
    4704:	ac 01       	movw	r20, r24
    4706:	90 91 d0 01 	lds	r25, 0x01D0
    470a:	99 23       	and	r25, r25
    470c:	21 f0       	breq	.+8      	; 0x4716 <mousekey_task+0x24>
    470e:	20 91 13 01 	lds	r18, 0x0113
    4712:	30 e0       	ldi	r19, 0x00	; 0
    4714:	06 c0       	rjmp	.+12     	; 0x4722 <mousekey_task+0x30>
    4716:	20 91 14 01 	lds	r18, 0x0114
    471a:	8a e0       	ldi	r24, 0x0A	; 10
    471c:	28 9f       	mul	r18, r24
    471e:	90 01       	movw	r18, r0
    4720:	11 24       	eor	r1, r1
    4722:	42 17       	cp	r20, r18
    4724:	53 07       	cpc	r21, r19
    4726:	08 f4       	brcc	.+2      	; 0x472a <mousekey_task+0x38>
    4728:	86 c0       	rjmp	.+268    	; 0x4836 <mousekey_task+0x144>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    472a:	80 91 d2 01 	lds	r24, 0x01D2
    472e:	c0 91 d3 01 	lds	r28, 0x01D3
    4732:	d0 91 d4 01 	lds	r29, 0x01D4
    4736:	10 91 d5 01 	lds	r17, 0x01D5
    473a:	81 11       	cpse	r24, r1
    473c:	07 c0       	rjmp	.+14     	; 0x474c <mousekey_task+0x5a>
    473e:	c1 11       	cpse	r28, r1
    4740:	76 c0       	rjmp	.+236    	; 0x482e <mousekey_task+0x13c>
    4742:	d1 11       	cpse	r29, r1
    4744:	74 c0       	rjmp	.+232    	; 0x482e <mousekey_task+0x13c>
    4746:	11 11       	cpse	r17, r1
    4748:	72 c0       	rjmp	.+228    	; 0x482e <mousekey_task+0x13c>
    474a:	75 c0       	rjmp	.+234    	; 0x4836 <mousekey_task+0x144>
        return;

    if (mousekey_repeat != UINT8_MAX)
    474c:	9f 3f       	cpi	r25, 0xFF	; 255
    474e:	19 f0       	breq	.+6      	; 0x4756 <mousekey_task+0x64>
        mousekey_repeat++;
    4750:	9f 5f       	subi	r25, 0xFF	; 255
    4752:	90 93 d0 01 	sts	0x01D0, r25


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    4756:	18 16       	cp	r1, r24
    4758:	24 f4       	brge	.+8      	; 0x4762 <mousekey_task+0x70>
    475a:	0e 94 7d 21 	call	0x42fa	; 0x42fa <move_unit>
    475e:	80 93 d2 01 	sts	0x01D2, r24
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    4762:	80 91 d2 01 	lds	r24, 0x01D2
    4766:	87 ff       	sbrs	r24, 7
    4768:	05 c0       	rjmp	.+10     	; 0x4774 <mousekey_task+0x82>
    476a:	0e 94 7d 21 	call	0x42fa	; 0x42fa <move_unit>
    476e:	81 95       	neg	r24
    4770:	80 93 d2 01 	sts	0x01D2, r24
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    4774:	1c 16       	cp	r1, r28
    4776:	24 f4       	brge	.+8      	; 0x4780 <mousekey_task+0x8e>
    4778:	0e 94 7d 21 	call	0x42fa	; 0x42fa <move_unit>
    477c:	80 93 d3 01 	sts	0x01D3, r24
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    4780:	80 91 d3 01 	lds	r24, 0x01D3
    4784:	87 ff       	sbrs	r24, 7
    4786:	05 c0       	rjmp	.+10     	; 0x4792 <mousekey_task+0xa0>
    4788:	0e 94 7d 21 	call	0x42fa	; 0x42fa <move_unit>
    478c:	81 95       	neg	r24
    478e:	80 93 d3 01 	sts	0x01D3, r24

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    4792:	60 91 d2 01 	lds	r22, 0x01D2
    4796:	66 23       	and	r22, r22
    4798:	39 f1       	breq	.+78     	; 0x47e8 <mousekey_task+0xf6>
    479a:	c0 91 d3 01 	lds	r28, 0x01D3
    479e:	cc 23       	and	r28, r28
    47a0:	19 f1       	breq	.+70     	; 0x47e8 <mousekey_task+0xf6>
        mouse_report.x *= 0.7;
    47a2:	77 27       	eor	r23, r23
    47a4:	67 fd       	sbrc	r22, 7
    47a6:	70 95       	com	r23
    47a8:	87 2f       	mov	r24, r23
    47aa:	97 2f       	mov	r25, r23
    47ac:	0e 94 88 29 	call	0x5310	; 0x5310 <__floatsisf>
    47b0:	23 e3       	ldi	r18, 0x33	; 51
    47b2:	33 e3       	ldi	r19, 0x33	; 51
    47b4:	43 e3       	ldi	r20, 0x33	; 51
    47b6:	5f e3       	ldi	r21, 0x3F	; 63
    47b8:	0e 94 ec 29 	call	0x53d8	; 0x53d8 <__mulsf3>
    47bc:	0e 94 55 29 	call	0x52aa	; 0x52aa <__fixsfsi>
    47c0:	60 93 d2 01 	sts	0x01D2, r22
        mouse_report.y *= 0.7;
    47c4:	6c 2f       	mov	r22, r28
    47c6:	77 27       	eor	r23, r23
    47c8:	67 fd       	sbrc	r22, 7
    47ca:	70 95       	com	r23
    47cc:	87 2f       	mov	r24, r23
    47ce:	97 2f       	mov	r25, r23
    47d0:	0e 94 88 29 	call	0x5310	; 0x5310 <__floatsisf>
    47d4:	23 e3       	ldi	r18, 0x33	; 51
    47d6:	33 e3       	ldi	r19, 0x33	; 51
    47d8:	43 e3       	ldi	r20, 0x33	; 51
    47da:	5f e3       	ldi	r21, 0x3F	; 63
    47dc:	0e 94 ec 29 	call	0x53d8	; 0x53d8 <__mulsf3>
    47e0:	0e 94 55 29 	call	0x52aa	; 0x52aa <__fixsfsi>
    47e4:	60 93 d3 01 	sts	0x01D3, r22
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    47e8:	1d 16       	cp	r1, r29
    47ea:	24 f4       	brge	.+8      	; 0x47f4 <mousekey_task+0x102>
    47ec:	0e 94 c6 21 	call	0x438c	; 0x438c <wheel_unit>
    47f0:	80 93 d4 01 	sts	0x01D4, r24
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    47f4:	80 91 d4 01 	lds	r24, 0x01D4
    47f8:	87 ff       	sbrs	r24, 7
    47fa:	05 c0       	rjmp	.+10     	; 0x4806 <mousekey_task+0x114>
    47fc:	0e 94 c6 21 	call	0x438c	; 0x438c <wheel_unit>
    4800:	81 95       	neg	r24
    4802:	80 93 d4 01 	sts	0x01D4, r24
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    4806:	11 16       	cp	r1, r17
    4808:	24 f4       	brge	.+8      	; 0x4812 <mousekey_task+0x120>
    480a:	0e 94 c6 21 	call	0x438c	; 0x438c <wheel_unit>
    480e:	80 93 d5 01 	sts	0x01D5, r24
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    4812:	80 91 d5 01 	lds	r24, 0x01D5
    4816:	87 ff       	sbrs	r24, 7
    4818:	05 c0       	rjmp	.+10     	; 0x4824 <mousekey_task+0x132>
    481a:	0e 94 c6 21 	call	0x438c	; 0x438c <wheel_unit>
    481e:	81 95       	neg	r24
    4820:	80 93 d5 01 	sts	0x01D5, r24

    mousekey_send();
}
    4824:	df 91       	pop	r29
    4826:	cf 91       	pop	r28
    4828:	1f 91       	pop	r17
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
    482a:	0c 94 ec 22 	jmp	0x45d8	; 0x45d8 <mousekey_send>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
        return;

    if (mousekey_repeat != UINT8_MAX)
    482e:	9f 3f       	cpi	r25, 0xFF	; 255
    4830:	09 f0       	breq	.+2      	; 0x4834 <mousekey_task+0x142>
    4832:	8e cf       	rjmp	.-228    	; 0x4750 <mousekey_task+0x5e>
    4834:	96 cf       	rjmp	.-212    	; 0x4762 <mousekey_task+0x70>
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
}
    4836:	df 91       	pop	r29
    4838:	cf 91       	pop	r28
    483a:	1f 91       	pop	r17
    483c:	08 95       	ret

0000483e <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    483e:	e1 ed       	ldi	r30, 0xD1	; 209
    4840:	f1 e0       	ldi	r31, 0x01	; 1
    4842:	85 e0       	ldi	r24, 0x05	; 5
    4844:	df 01       	movw	r26, r30
    4846:	1d 92       	st	X+, r1
    4848:	8a 95       	dec	r24
    484a:	e9 f7       	brne	.-6      	; 0x4846 <mousekey_clear+0x8>
    mousekey_repeat = 0;
    484c:	10 92 d0 01 	sts	0x01D0, r1
    mousekey_accel = 0;
    4850:	10 92 cf 01 	sts	0x01CF, r1
    4854:	08 95       	ret

00004856 <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    4856:	88 e4       	ldi	r24, 0x48	; 72
    4858:	98 e0       	ldi	r25, 0x08	; 8
    485a:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    485e:	1f 92       	push	r1
    4860:	81 e0       	ldi	r24, 0x01	; 1
    4862:	8f 93       	push	r24
    4864:	1f 92       	push	r1
    4866:	85 e0       	ldi	r24, 0x05	; 5
    4868:	8f 93       	push	r24
    486a:	8a ef       	ldi	r24, 0xFA	; 250
    486c:	97 e0       	ldi	r25, 0x07	; 7
    486e:	9f 93       	push	r25
    4870:	8f 93       	push	r24
    4872:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
    4876:	0f 90       	pop	r0
    4878:	0f 90       	pop	r0
    487a:	0f 90       	pop	r0
    487c:	0f 90       	pop	r0
    487e:	0f 90       	pop	r0
    4880:	0f 90       	pop	r0
    4882:	08 95       	ret

00004884 <mousekey_param_inc>:

//#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
#define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
    4884:	83 30       	cpi	r24, 0x03	; 3
    4886:	e9 f1       	breq	.+122    	; 0x4902 <mousekey_param_inc+0x7e>
    4888:	28 f4       	brcc	.+10     	; 0x4894 <mousekey_param_inc+0x10>
    488a:	81 30       	cpi	r24, 0x01	; 1
    488c:	61 f0       	breq	.+24     	; 0x48a6 <mousekey_param_inc+0x22>
    488e:	82 30       	cpi	r24, 0x02	; 2
    4890:	09 f1       	breq	.+66     	; 0x48d4 <mousekey_param_inc+0x50>
    4892:	08 95       	ret
    4894:	85 30       	cpi	r24, 0x05	; 5
    4896:	09 f4       	brne	.+2      	; 0x489a <mousekey_param_inc+0x16>
    4898:	62 c0       	rjmp	.+196    	; 0x495e <mousekey_param_inc+0xda>
    489a:	08 f4       	brcc	.+2      	; 0x489e <mousekey_param_inc+0x1a>
    489c:	49 c0       	rjmp	.+146    	; 0x4930 <mousekey_param_inc+0xac>
    489e:	86 30       	cpi	r24, 0x06	; 6
    48a0:	09 f4       	brne	.+2      	; 0x48a4 <mousekey_param_inc+0x20>
    48a2:	74 c0       	rjmp	.+232    	; 0x498c <mousekey_param_inc+0x108>
    48a4:	08 95       	ret
        case 1:
            if (mk_delay + inc < UINT8_MAX)
    48a6:	80 91 14 01 	lds	r24, 0x0114
    48aa:	26 2f       	mov	r18, r22
    48ac:	30 e0       	ldi	r19, 0x00	; 0
    48ae:	28 0f       	add	r18, r24
    48b0:	31 1d       	adc	r19, r1
    48b2:	2f 3f       	cpi	r18, 0xFF	; 255
    48b4:	31 05       	cpc	r19, r1
    48b6:	24 f4       	brge	.+8      	; 0x48c0 <mousekey_param_inc+0x3c>
                mk_delay += inc;
    48b8:	68 0f       	add	r22, r24
    48ba:	60 93 14 01 	sts	0x0114, r22
    48be:	03 c0       	rjmp	.+6      	; 0x48c6 <mousekey_param_inc+0x42>
            else
                mk_delay = UINT8_MAX;
    48c0:	8f ef       	ldi	r24, 0xFF	; 255
    48c2:	80 93 14 01 	sts	0x0114, r24
            PRINT_SET_VAL(mk_delay);
    48c6:	80 91 14 01 	lds	r24, 0x0114
    48ca:	1f 92       	push	r1
    48cc:	8f 93       	push	r24
    48ce:	83 e3       	ldi	r24, 0x33	; 51
    48d0:	97 e0       	ldi	r25, 0x07	; 7
    48d2:	72 c0       	rjmp	.+228    	; 0x49b8 <mousekey_param_inc+0x134>
            break;
        case 2:
            if (mk_interval + inc < UINT8_MAX)
    48d4:	80 91 13 01 	lds	r24, 0x0113
    48d8:	26 2f       	mov	r18, r22
    48da:	30 e0       	ldi	r19, 0x00	; 0
    48dc:	28 0f       	add	r18, r24
    48de:	31 1d       	adc	r19, r1
    48e0:	2f 3f       	cpi	r18, 0xFF	; 255
    48e2:	31 05       	cpc	r19, r1
    48e4:	24 f4       	brge	.+8      	; 0x48ee <mousekey_param_inc+0x6a>
                mk_interval += inc;
    48e6:	68 0f       	add	r22, r24
    48e8:	60 93 13 01 	sts	0x0113, r22
    48ec:	03 c0       	rjmp	.+6      	; 0x48f4 <mousekey_param_inc+0x70>
            else
                mk_interval = UINT8_MAX;
    48ee:	8f ef       	ldi	r24, 0xFF	; 255
    48f0:	80 93 13 01 	sts	0x0113, r24
            PRINT_SET_VAL(mk_interval);
    48f4:	80 91 13 01 	lds	r24, 0x0113
    48f8:	1f 92       	push	r1
    48fa:	8f 93       	push	r24
    48fc:	81 e2       	ldi	r24, 0x21	; 33
    48fe:	97 e0       	ldi	r25, 0x07	; 7
    4900:	5b c0       	rjmp	.+182    	; 0x49b8 <mousekey_param_inc+0x134>
            break;
        case 3:
            if (mk_max_speed + inc < UINT8_MAX)
    4902:	80 91 12 01 	lds	r24, 0x0112
    4906:	26 2f       	mov	r18, r22
    4908:	30 e0       	ldi	r19, 0x00	; 0
    490a:	28 0f       	add	r18, r24
    490c:	31 1d       	adc	r19, r1
    490e:	2f 3f       	cpi	r18, 0xFF	; 255
    4910:	31 05       	cpc	r19, r1
    4912:	24 f4       	brge	.+8      	; 0x491c <mousekey_param_inc+0x98>
                mk_max_speed += inc;
    4914:	68 0f       	add	r22, r24
    4916:	60 93 12 01 	sts	0x0112, r22
    491a:	03 c0       	rjmp	.+6      	; 0x4922 <mousekey_param_inc+0x9e>
            else
                mk_max_speed = UINT8_MAX;
    491c:	8f ef       	ldi	r24, 0xFF	; 255
    491e:	80 93 12 01 	sts	0x0112, r24
            PRINT_SET_VAL(mk_max_speed);
    4922:	80 91 12 01 	lds	r24, 0x0112
    4926:	1f 92       	push	r1
    4928:	8f 93       	push	r24
    492a:	8e e0       	ldi	r24, 0x0E	; 14
    492c:	97 e0       	ldi	r25, 0x07	; 7
    492e:	44 c0       	rjmp	.+136    	; 0x49b8 <mousekey_param_inc+0x134>
            break;
        case 4:
            if (mk_time_to_max + inc < UINT8_MAX)
    4930:	80 91 11 01 	lds	r24, 0x0111
    4934:	26 2f       	mov	r18, r22
    4936:	30 e0       	ldi	r19, 0x00	; 0
    4938:	28 0f       	add	r18, r24
    493a:	31 1d       	adc	r19, r1
    493c:	2f 3f       	cpi	r18, 0xFF	; 255
    493e:	31 05       	cpc	r19, r1
    4940:	24 f4       	brge	.+8      	; 0x494a <mousekey_param_inc+0xc6>
                mk_time_to_max += inc;
    4942:	68 0f       	add	r22, r24
    4944:	60 93 11 01 	sts	0x0111, r22
    4948:	03 c0       	rjmp	.+6      	; 0x4950 <mousekey_param_inc+0xcc>
            else
                mk_time_to_max = UINT8_MAX;
    494a:	8f ef       	ldi	r24, 0xFF	; 255
    494c:	80 93 11 01 	sts	0x0111, r24
            PRINT_SET_VAL(mk_time_to_max);
    4950:	80 91 11 01 	lds	r24, 0x0111
    4954:	1f 92       	push	r1
    4956:	8f 93       	push	r24
    4958:	89 ef       	ldi	r24, 0xF9	; 249
    495a:	96 e0       	ldi	r25, 0x06	; 6
    495c:	2d c0       	rjmp	.+90     	; 0x49b8 <mousekey_param_inc+0x134>
            break;
        case 5:
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    495e:	80 91 10 01 	lds	r24, 0x0110
    4962:	26 2f       	mov	r18, r22
    4964:	30 e0       	ldi	r19, 0x00	; 0
    4966:	28 0f       	add	r18, r24
    4968:	31 1d       	adc	r19, r1
    496a:	2f 3f       	cpi	r18, 0xFF	; 255
    496c:	31 05       	cpc	r19, r1
    496e:	24 f4       	brge	.+8      	; 0x4978 <mousekey_param_inc+0xf4>
                mk_wheel_max_speed += inc;
    4970:	68 0f       	add	r22, r24
    4972:	60 93 10 01 	sts	0x0110, r22
    4976:	03 c0       	rjmp	.+6      	; 0x497e <mousekey_param_inc+0xfa>
            else
                mk_wheel_max_speed = UINT8_MAX;
    4978:	8f ef       	ldi	r24, 0xFF	; 255
    497a:	80 93 10 01 	sts	0x0110, r24
            PRINT_SET_VAL(mk_wheel_max_speed);
    497e:	80 91 10 01 	lds	r24, 0x0110
    4982:	1f 92       	push	r1
    4984:	8f 93       	push	r24
    4986:	80 ee       	ldi	r24, 0xE0	; 224
    4988:	96 e0       	ldi	r25, 0x06	; 6
    498a:	16 c0       	rjmp	.+44     	; 0x49b8 <mousekey_param_inc+0x134>
            break;
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    498c:	80 91 0f 01 	lds	r24, 0x010F
    4990:	26 2f       	mov	r18, r22
    4992:	30 e0       	ldi	r19, 0x00	; 0
    4994:	28 0f       	add	r18, r24
    4996:	31 1d       	adc	r19, r1
    4998:	2f 3f       	cpi	r18, 0xFF	; 255
    499a:	31 05       	cpc	r19, r1
    499c:	24 f4       	brge	.+8      	; 0x49a6 <mousekey_param_inc+0x122>
                mk_wheel_time_to_max += inc;
    499e:	68 0f       	add	r22, r24
    49a0:	60 93 0f 01 	sts	0x010F, r22
    49a4:	03 c0       	rjmp	.+6      	; 0x49ac <mousekey_param_inc+0x128>
            else
                mk_wheel_time_to_max = UINT8_MAX;
    49a6:	8f ef       	ldi	r24, 0xFF	; 255
    49a8:	80 93 0f 01 	sts	0x010F, r24
            PRINT_SET_VAL(mk_wheel_time_to_max);
    49ac:	80 91 0f 01 	lds	r24, 0x010F
    49b0:	1f 92       	push	r1
    49b2:	8f 93       	push	r24
    49b4:	85 ec       	ldi	r24, 0xC5	; 197
    49b6:	96 e0       	ldi	r25, 0x06	; 6
    49b8:	9f 93       	push	r25
    49ba:	8f 93       	push	r24
    49bc:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
            break;
    49c0:	0f 90       	pop	r0
    49c2:	0f 90       	pop	r0
    49c4:	0f 90       	pop	r0
    49c6:	0f 90       	pop	r0
    49c8:	08 95       	ret

000049ca <mousekey_param_dec>:
    }
}

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
    49ca:	83 30       	cpi	r24, 0x03	; 3
    49cc:	81 f1       	breq	.+96     	; 0x4a2e <mousekey_param_dec+0x64>
    49ce:	28 f4       	brcc	.+10     	; 0x49da <mousekey_param_dec+0x10>
    49d0:	81 30       	cpi	r24, 0x01	; 1
    49d2:	59 f0       	breq	.+22     	; 0x49ea <mousekey_param_dec+0x20>
    49d4:	82 30       	cpi	r24, 0x02	; 2
    49d6:	d1 f0       	breq	.+52     	; 0x4a0c <mousekey_param_dec+0x42>
    49d8:	08 95       	ret
    49da:	85 30       	cpi	r24, 0x05	; 5
    49dc:	09 f4       	brne	.+2      	; 0x49e0 <mousekey_param_dec+0x16>
    49de:	49 c0       	rjmp	.+146    	; 0x4a72 <mousekey_param_dec+0xa8>
    49e0:	b8 f1       	brcs	.+110    	; 0x4a50 <mousekey_param_dec+0x86>
    49e2:	86 30       	cpi	r24, 0x06	; 6
    49e4:	09 f4       	brne	.+2      	; 0x49e8 <mousekey_param_dec+0x1e>
    49e6:	56 c0       	rjmp	.+172    	; 0x4a94 <mousekey_param_dec+0xca>
    49e8:	08 95       	ret
        case 1:
            if (mk_delay > dec)
    49ea:	80 91 14 01 	lds	r24, 0x0114
    49ee:	68 17       	cp	r22, r24
    49f0:	20 f4       	brcc	.+8      	; 0x49fa <mousekey_param_dec+0x30>
                mk_delay -= dec;
    49f2:	86 1b       	sub	r24, r22
    49f4:	80 93 14 01 	sts	0x0114, r24
    49f8:	02 c0       	rjmp	.+4      	; 0x49fe <mousekey_param_dec+0x34>
            else
                mk_delay = 0;
    49fa:	10 92 14 01 	sts	0x0114, r1
            PRINT_SET_VAL(mk_delay);
    49fe:	80 91 14 01 	lds	r24, 0x0114
    4a02:	1f 92       	push	r1
    4a04:	8f 93       	push	r24
    4a06:	86 eb       	ldi	r24, 0xB6	; 182
    4a08:	96 e0       	ldi	r25, 0x06	; 6
    4a0a:	54 c0       	rjmp	.+168    	; 0x4ab4 <mousekey_param_dec+0xea>
            break;
        case 2:
            if (mk_interval > dec)
    4a0c:	80 91 13 01 	lds	r24, 0x0113
    4a10:	68 17       	cp	r22, r24
    4a12:	20 f4       	brcc	.+8      	; 0x4a1c <mousekey_param_dec+0x52>
                mk_interval -= dec;
    4a14:	86 1b       	sub	r24, r22
    4a16:	80 93 13 01 	sts	0x0113, r24
    4a1a:	02 c0       	rjmp	.+4      	; 0x4a20 <mousekey_param_dec+0x56>
            else
                mk_interval = 0;
    4a1c:	10 92 13 01 	sts	0x0113, r1
            PRINT_SET_VAL(mk_interval);
    4a20:	80 91 13 01 	lds	r24, 0x0113
    4a24:	1f 92       	push	r1
    4a26:	8f 93       	push	r24
    4a28:	84 ea       	ldi	r24, 0xA4	; 164
    4a2a:	96 e0       	ldi	r25, 0x06	; 6
    4a2c:	43 c0       	rjmp	.+134    	; 0x4ab4 <mousekey_param_dec+0xea>
            break;
        case 3:
            if (mk_max_speed > dec)
    4a2e:	80 91 12 01 	lds	r24, 0x0112
    4a32:	68 17       	cp	r22, r24
    4a34:	20 f4       	brcc	.+8      	; 0x4a3e <mousekey_param_dec+0x74>
                mk_max_speed -= dec;
    4a36:	86 1b       	sub	r24, r22
    4a38:	80 93 12 01 	sts	0x0112, r24
    4a3c:	02 c0       	rjmp	.+4      	; 0x4a42 <mousekey_param_dec+0x78>
            else
                mk_max_speed = 0;
    4a3e:	10 92 12 01 	sts	0x0112, r1
            PRINT_SET_VAL(mk_max_speed);
    4a42:	80 91 12 01 	lds	r24, 0x0112
    4a46:	1f 92       	push	r1
    4a48:	8f 93       	push	r24
    4a4a:	81 e9       	ldi	r24, 0x91	; 145
    4a4c:	96 e0       	ldi	r25, 0x06	; 6
    4a4e:	32 c0       	rjmp	.+100    	; 0x4ab4 <mousekey_param_dec+0xea>
            break;
        case 4:
            if (mk_time_to_max > dec)
    4a50:	80 91 11 01 	lds	r24, 0x0111
    4a54:	68 17       	cp	r22, r24
    4a56:	20 f4       	brcc	.+8      	; 0x4a60 <mousekey_param_dec+0x96>
                mk_time_to_max -= dec;
    4a58:	86 1b       	sub	r24, r22
    4a5a:	80 93 11 01 	sts	0x0111, r24
    4a5e:	02 c0       	rjmp	.+4      	; 0x4a64 <mousekey_param_dec+0x9a>
            else
                mk_time_to_max = 0;
    4a60:	10 92 11 01 	sts	0x0111, r1
            PRINT_SET_VAL(mk_time_to_max);
    4a64:	80 91 11 01 	lds	r24, 0x0111
    4a68:	1f 92       	push	r1
    4a6a:	8f 93       	push	r24
    4a6c:	8c e7       	ldi	r24, 0x7C	; 124
    4a6e:	96 e0       	ldi	r25, 0x06	; 6
    4a70:	21 c0       	rjmp	.+66     	; 0x4ab4 <mousekey_param_dec+0xea>
            break;
        case 5:
            if (mk_wheel_max_speed > dec)
    4a72:	80 91 10 01 	lds	r24, 0x0110
    4a76:	68 17       	cp	r22, r24
    4a78:	20 f4       	brcc	.+8      	; 0x4a82 <mousekey_param_dec+0xb8>
                mk_wheel_max_speed -= dec;
    4a7a:	86 1b       	sub	r24, r22
    4a7c:	80 93 10 01 	sts	0x0110, r24
    4a80:	02 c0       	rjmp	.+4      	; 0x4a86 <mousekey_param_dec+0xbc>
            else
                mk_wheel_max_speed = 0;
    4a82:	10 92 10 01 	sts	0x0110, r1
            PRINT_SET_VAL(mk_wheel_max_speed);
    4a86:	80 91 10 01 	lds	r24, 0x0110
    4a8a:	1f 92       	push	r1
    4a8c:	8f 93       	push	r24
    4a8e:	83 e6       	ldi	r24, 0x63	; 99
    4a90:	96 e0       	ldi	r25, 0x06	; 6
    4a92:	10 c0       	rjmp	.+32     	; 0x4ab4 <mousekey_param_dec+0xea>
            break;
        case 6:
            if (mk_wheel_time_to_max > dec)
    4a94:	80 91 0f 01 	lds	r24, 0x010F
    4a98:	68 17       	cp	r22, r24
    4a9a:	20 f4       	brcc	.+8      	; 0x4aa4 <mousekey_param_dec+0xda>
                mk_wheel_time_to_max -= dec;
    4a9c:	86 1b       	sub	r24, r22
    4a9e:	80 93 0f 01 	sts	0x010F, r24
    4aa2:	02 c0       	rjmp	.+4      	; 0x4aa8 <mousekey_param_dec+0xde>
            else
                mk_wheel_time_to_max = 0;
    4aa4:	10 92 0f 01 	sts	0x010F, r1
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4aa8:	80 91 0f 01 	lds	r24, 0x010F
    4aac:	1f 92       	push	r1
    4aae:	8f 93       	push	r24
    4ab0:	88 e4       	ldi	r24, 0x48	; 72
    4ab2:	96 e0       	ldi	r25, 0x06	; 6
    4ab4:	9f 93       	push	r25
    4ab6:	8f 93       	push	r24
    4ab8:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
            break;
    4abc:	0f 90       	pop	r0
    4abe:	0f 90       	pop	r0
    4ac0:	0f 90       	pop	r0
    4ac2:	0f 90       	pop	r0
    4ac4:	08 95       	ret

00004ac6 <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    4ac6:	cf 93       	push	r28
    4ac8:	c8 2f       	mov	r28, r24
    xprintf("L%d\n", layer);
    4aca:	1f 92       	push	r1
    4acc:	8f 93       	push	r24
    4ace:	8d e4       	ldi	r24, 0x4D	; 77
    4ad0:	99 e0       	ldi	r25, 0x09	; 9
    4ad2:	9f 93       	push	r25
    4ad4:	8f 93       	push	r24
    4ad6:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
    default_layer_set(1UL<<layer);
    4ada:	81 e0       	ldi	r24, 0x01	; 1
    4adc:	90 e0       	ldi	r25, 0x00	; 0
    4ade:	a0 e0       	ldi	r26, 0x00	; 0
    4ae0:	b0 e0       	ldi	r27, 0x00	; 0
    4ae2:	bc 01       	movw	r22, r24
    4ae4:	cd 01       	movw	r24, r26
    4ae6:	04 c0       	rjmp	.+8      	; 0x4af0 <switch_default_layer+0x2a>
    4ae8:	66 0f       	add	r22, r22
    4aea:	77 1f       	adc	r23, r23
    4aec:	88 1f       	adc	r24, r24
    4aee:	99 1f       	adc	r25, r25
    4af0:	ca 95       	dec	r28
    4af2:	d2 f7       	brpl	.-12     	; 0x4ae8 <switch_default_layer+0x22>
    4af4:	0e 94 df 1a 	call	0x35be	; 0x35be <default_layer_set>
    clear_keyboard();
    4af8:	0f 90       	pop	r0
    4afa:	0f 90       	pop	r0
    4afc:	0f 90       	pop	r0
    4afe:	0f 90       	pop	r0
}
    4b00:	cf 91       	pop	r28

static void switch_default_layer(uint8_t layer)
{
    xprintf("L%d\n", layer);
    default_layer_set(1UL<<layer);
    clear_keyboard();
    4b02:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <clear_keyboard>

00004b06 <command_common>:
#endif
}
#endif

static bool command_common(uint8_t code)
{
    4b06:	cf 93       	push	r28
    static host_driver_t *host_driver = 0;
    switch (code) {
    4b08:	8b 31       	cpi	r24, 0x1B	; 27
    4b0a:	09 f4       	brne	.+2      	; 0x4b0e <command_common+0x8>
    4b0c:	cb c1       	rjmp	.+918    	; 0x4ea4 <command_common+0x39e>
    4b0e:	08 f0       	brcs	.+2      	; 0x4b12 <command_common+0xc>
    4b10:	49 c0       	rjmp	.+146    	; 0x4ba4 <command_common+0x9e>
    4b12:	8e 30       	cpi	r24, 0x0E	; 14
    4b14:	09 f4       	brne	.+2      	; 0x4b18 <command_common+0x12>
    4b16:	da c1       	rjmp	.+948    	; 0x4ecc <command_common+0x3c6>
    4b18:	00 f5       	brcc	.+64     	; 0x4b5a <command_common+0x54>
    4b1a:	87 30       	cpi	r24, 0x07	; 7
    4b1c:	09 f4       	brne	.+2      	; 0x4b20 <command_common+0x1a>
    4b1e:	a9 c1       	rjmp	.+850    	; 0x4e72 <command_common+0x36c>
    4b20:	a8 f4       	brcc	.+42     	; 0x4b4c <command_common+0x46>
    4b22:	86 30       	cpi	r24, 0x06	; 6
    4b24:	09 f0       	breq	.+2      	; 0x4b28 <command_common+0x22>
    4b26:	60 c2       	rjmp	.+1216   	; 0x4fe8 <command_common+0x4e2>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    4b28:	80 91 c7 01 	lds	r24, 0x01C7
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    4b2c:	81 7f       	andi	r24, 0xF1	; 241
    4b2e:	8e 7f       	andi	r24, 0xFE	; 254
    4b30:	80 93 c7 01 	sts	0x01C7, r24
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    4b34:	82 e5       	ldi	r24, 0x52	; 82
    4b36:	99 e0       	ldi	r25, 0x09	; 9
    4b38:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
            debug_matrix   = false;
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
            command_console_help();
            print("C> ");
    4b3c:	82 e7       	ldi	r24, 0x72	; 114
    4b3e:	9d e0       	ldi	r25, 0x0D	; 13
    4b40:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
            command_state = CONSOLE;
    4b44:	81 e0       	ldi	r24, 0x01	; 1
    4b46:	80 93 d7 01 	sts	0x01D7, r24
    4b4a:	91 c1       	rjmp	.+802    	; 0x4e6e <command_common+0x368>
#endif

static bool command_common(uint8_t code)
{
    static host_driver_t *host_driver = 0;
    switch (code) {
    4b4c:	88 30       	cpi	r24, 0x08	; 8
    4b4e:	09 f4       	brne	.+2      	; 0x4b52 <command_common+0x4c>
    4b50:	5b c0       	rjmp	.+182    	; 0x4c08 <command_common+0x102>
    4b52:	8b 30       	cpi	r24, 0x0B	; 11
    4b54:	09 f4       	brne	.+2      	; 0x4b58 <command_common+0x52>
    4b56:	87 c1       	rjmp	.+782    	; 0x4e66 <command_common+0x360>
    4b58:	47 c2       	rjmp	.+1166   	; 0x4fe8 <command_common+0x4e2>
    4b5a:	81 31       	cpi	r24, 0x11	; 17
    4b5c:	09 f4       	brne	.+2      	; 0x4b60 <command_common+0x5a>
    4b5e:	2c c2       	rjmp	.+1112   	; 0x4fb8 <command_common+0x4b2>
    4b60:	20 f4       	brcc	.+8      	; 0x4b6a <command_common+0x64>
    4b62:	80 31       	cpi	r24, 0x10	; 16
    4b64:	09 f4       	brne	.+2      	; 0x4b68 <command_common+0x62>
    4b66:	c6 c1       	rjmp	.+908    	; 0x4ef4 <command_common+0x3ee>
    4b68:	3f c2       	rjmp	.+1150   	; 0x4fe8 <command_common+0x4e2>
    4b6a:	86 31       	cpi	r24, 0x16	; 22
    4b6c:	09 f4       	brne	.+2      	; 0x4b70 <command_common+0x6a>
    4b6e:	dd c1       	rjmp	.+954    	; 0x4f2a <command_common+0x424>
    4b70:	89 31       	cpi	r24, 0x19	; 25
    4b72:	09 f0       	breq	.+2      	; 0x4b76 <command_common+0x70>
    4b74:	39 c2       	rjmp	.+1138   	; 0x4fe8 <command_common+0x4e2>
            } else {
                print("\nmouse: off\n");
            }
            break;
        case KC_V: // print version & information
            print("\n\t- Version -\n");
    4b76:	86 ee       	ldi	r24, 0xE6	; 230
    4b78:	9c e0       	ldi	r25, 0x0C	; 12
    4b7a:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    4b7e:	8d eb       	ldi	r24, 0xBD	; 189
    4b80:	9c e0       	ldi	r25, 0x0C	; 12
    4b82:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    4b86:	88 e8       	ldi	r24, 0x88	; 136
    4b88:	9c e0       	ldi	r25, 0x0C	; 12
    4b8a:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    4b8e:	81 e6       	ldi	r24, 0x61	; 97
    4b90:	9c e0       	ldi	r25, 0x0C	; 12
    4b92:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
            /* build options */
            print("OPTIONS:"
    4b96:	8c e1       	ldi	r24, 0x1C	; 28
    4b98:	9c e0       	ldi	r25, 0x0C	; 12
    4b9a:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    4b9e:	81 ef       	ldi	r24, 0xF1	; 241
    4ba0:	9b e0       	ldi	r25, 0x0B	; 11
    4ba2:	63 c1       	rjmp	.+710    	; 0x4e6a <command_common+0x364>
#endif

static bool command_common(uint8_t code)
{
    static host_driver_t *host_driver = 0;
    switch (code) {
    4ba4:	85 33       	cpi	r24, 0x35	; 53
    4ba6:	09 f4       	brne	.+2      	; 0x4baa <command_common+0xa4>
    4ba8:	19 c2       	rjmp	.+1074   	; 0x4fdc <command_common+0x4d6>
    4baa:	68 f4       	brcc	.+26     	; 0x4bc6 <command_common+0xc0>
    4bac:	87 32       	cpi	r24, 0x27	; 39
    4bae:	09 f4       	brne	.+2      	; 0x4bb2 <command_common+0xac>
    4bb0:	15 c2       	rjmp	.+1066   	; 0x4fdc <command_common+0x4d6>
    4bb2:	28 f4       	brcc	.+10     	; 0x4bbe <command_common+0xb8>
    4bb4:	8e 31       	cpi	r24, 0x1E	; 30
    4bb6:	08 f4       	brcc	.+2      	; 0x4bba <command_common+0xb4>
    4bb8:	17 c2       	rjmp	.+1070   	; 0x4fe8 <command_common+0x4e2>
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    4bba:	8d 51       	subi	r24, 0x1D	; 29
    4bbc:	12 c2       	rjmp	.+1060   	; 0x4fe2 <command_common+0x4dc>
#endif

static bool command_common(uint8_t code)
{
    static host_driver_t *host_driver = 0;
    switch (code) {
    4bbe:	89 32       	cpi	r24, 0x29	; 41
    4bc0:	09 f4       	brne	.+2      	; 0x4bc4 <command_common+0xbe>
    4bc2:	0c c2       	rjmp	.+1048   	; 0x4fdc <command_common+0x4d6>
    4bc4:	11 c2       	rjmp	.+1058   	; 0x4fe8 <command_common+0x4e2>
    4bc6:	83 34       	cpi	r24, 0x43	; 67
    4bc8:	38 f4       	brcc	.+14     	; 0x4bd8 <command_common+0xd2>
    4bca:	8a 33       	cpi	r24, 0x3A	; 58
    4bcc:	08 f0       	brcs	.+2      	; 0x4bd0 <command_common+0xca>
    4bce:	08 c2       	rjmp	.+1040   	; 0x4fe0 <command_common+0x4da>
    4bd0:	88 33       	cpi	r24, 0x38	; 56
    4bd2:	09 f4       	brne	.+2      	; 0x4bd6 <command_common+0xd0>
    4bd4:	48 c1       	rjmp	.+656    	; 0x4e66 <command_common+0x360>
    4bd6:	08 c2       	rjmp	.+1040   	; 0x4fe8 <command_common+0x4e2>
    4bd8:	83 34       	cpi	r24, 0x43	; 67
    4bda:	09 f4       	brne	.+2      	; 0x4bde <command_common+0xd8>
    4bdc:	ff c1       	rjmp	.+1022   	; 0x4fdc <command_common+0x4d6>
    4bde:	88 34       	cpi	r24, 0x48	; 72
    4be0:	09 f0       	breq	.+2      	; 0x4be4 <command_common+0xde>
    4be2:	02 c2       	rjmp	.+1028   	; 0x4fe8 <command_common+0x4e2>
            command_console_help();
            print("C> ");
            command_state = CONSOLE;
            break;
        case KC_PAUSE:
            clear_keyboard();
    4be4:	0e 94 23 17 	call	0x2e46	; 0x2e46 <clear_keyboard>
            print("\n\nbootloader... ");
    4be8:	81 e6       	ldi	r24, 0x61	; 97
    4bea:	9d e0       	ldi	r25, 0x0D	; 13
    4bec:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    4bf0:	9f ef       	ldi	r25, 0xFF	; 255
    4bf2:	23 ed       	ldi	r18, 0xD3	; 211
    4bf4:	80 e3       	ldi	r24, 0x30	; 48
    4bf6:	91 50       	subi	r25, 0x01	; 1
    4bf8:	20 40       	sbci	r18, 0x00	; 0
    4bfa:	80 40       	sbci	r24, 0x00	; 0
    4bfc:	e1 f7       	brne	.-8      	; 0x4bf6 <command_common+0xf0>
    4bfe:	00 c0       	rjmp	.+0      	; 0x4c00 <command_common+0xfa>
    4c00:	00 00       	nop
            _delay_ms(1000);
            bootloader_jump(); // not return
    4c02:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <bootloader_jump>
    4c06:	33 c1       	rjmp	.+614    	; 0x4e6e <command_common+0x368>
            led_set(host_keyboard_leds());
            break;
#endif
#ifdef BOOTMAGIC_ENABLE
        case KC_E:
            print("eeconfig:\n");
    4c08:	86 e7       	ldi	r24, 0x76	; 118
    4c0a:	9d e0       	ldi	r25, 0x0D	; 13
    4c0c:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
}

#ifdef BOOTMAGIC_ENABLE
static void print_eeconfig(void)
{
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    4c10:	81 e5       	ldi	r24, 0x51	; 81
    4c12:	9b e0       	ldi	r25, 0x0B	; 11
    4c14:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    4c18:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <eeconfig_read_default_layer>
    4c1c:	1f 92       	push	r1
    4c1e:	8f 93       	push	r24
    4c20:	8e e4       	ldi	r24, 0x4E	; 78
    4c22:	9b e0       	ldi	r25, 0x0B	; 11
    4c24:	9f 93       	push	r25
    4c26:	8f 93       	push	r24
    4c28:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
    4c2c:	8c e4       	ldi	r24, 0x4C	; 76
    4c2e:	9b e0       	ldi	r25, 0x0B	; 11
    4c30:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>

    debug_config_t dc;
    dc.raw = eeconfig_read_debug();
    4c34:	0e 94 62 21 	call	0x42c4	; 0x42c4 <eeconfig_read_debug>
    4c38:	c8 2f       	mov	r28, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    4c3a:	89 e3       	ldi	r24, 0x39	; 57
    4c3c:	9b e0       	ldi	r25, 0x0B	; 11
    4c3e:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    4c42:	1f 92       	push	r1
    4c44:	cf 93       	push	r28
    4c46:	84 e3       	ldi	r24, 0x34	; 52
    4c48:	9b e0       	ldi	r25, 0x0B	; 11
    4c4a:	9f 93       	push	r25
    4c4c:	8f 93       	push	r24
    4c4e:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
    4c52:	82 e3       	ldi	r24, 0x32	; 50
    4c54:	9b e0       	ldi	r25, 0x0B	; 11
    4c56:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    4c5a:	88 e2       	ldi	r24, 0x28	; 40
    4c5c:	9b e0       	ldi	r25, 0x0B	; 11
    4c5e:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    4c62:	8c 2f       	mov	r24, r28
    4c64:	81 70       	andi	r24, 0x01	; 1
    4c66:	1f 92       	push	r1
    4c68:	8f 93       	push	r24
    4c6a:	85 e2       	ldi	r24, 0x25	; 37
    4c6c:	9b e0       	ldi	r25, 0x0B	; 11
    4c6e:	9f 93       	push	r25
    4c70:	8f 93       	push	r24
    4c72:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
    4c76:	83 e2       	ldi	r24, 0x23	; 35
    4c78:	9b e0       	ldi	r25, 0x0B	; 11
    4c7a:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    4c7e:	89 e1       	ldi	r24, 0x19	; 25
    4c80:	9b e0       	ldi	r25, 0x0B	; 11
    4c82:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    4c86:	c1 fb       	bst	r28, 1
    4c88:	88 27       	eor	r24, r24
    4c8a:	80 f9       	bld	r24, 0
    4c8c:	1f 92       	push	r1
    4c8e:	8f 93       	push	r24
    4c90:	86 e1       	ldi	r24, 0x16	; 22
    4c92:	9b e0       	ldi	r25, 0x0B	; 11
    4c94:	9f 93       	push	r25
    4c96:	8f 93       	push	r24
    4c98:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
    4c9c:	84 e1       	ldi	r24, 0x14	; 20
    4c9e:	9b e0       	ldi	r25, 0x0B	; 11
    4ca0:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    4ca4:	88 e0       	ldi	r24, 0x08	; 8
    4ca6:	9b e0       	ldi	r25, 0x0B	; 11
    4ca8:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    4cac:	c2 fb       	bst	r28, 2
    4cae:	88 27       	eor	r24, r24
    4cb0:	80 f9       	bld	r24, 0
    4cb2:	1f 92       	push	r1
    4cb4:	8f 93       	push	r24
    4cb6:	85 e0       	ldi	r24, 0x05	; 5
    4cb8:	9b e0       	ldi	r25, 0x0B	; 11
    4cba:	9f 93       	push	r25
    4cbc:	8f 93       	push	r24
    4cbe:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
    4cc2:	83 e0       	ldi	r24, 0x03	; 3
    4cc4:	9b e0       	ldi	r25, 0x0B	; 11
    4cc6:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    4cca:	8a ef       	ldi	r24, 0xFA	; 250
    4ccc:	9a e0       	ldi	r25, 0x0A	; 10
    4cce:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    4cd2:	c3 fb       	bst	r28, 3
    4cd4:	cc 27       	eor	r28, r28
    4cd6:	c0 f9       	bld	r28, 0
    4cd8:	1f 92       	push	r1
    4cda:	cf 93       	push	r28
    4cdc:	87 ef       	ldi	r24, 0xF7	; 247
    4cde:	9a e0       	ldi	r25, 0x0A	; 10
    4ce0:	9f 93       	push	r25
    4ce2:	8f 93       	push	r24
    4ce4:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
    4ce8:	85 ef       	ldi	r24, 0xF5	; 245
    4cea:	9a e0       	ldi	r25, 0x0A	; 10
    4cec:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>

    keymap_config_t kc;
    kc.raw = eeconfig_read_keymap();
    4cf0:	0e 94 74 21 	call	0x42e8	; 0x42e8 <eeconfig_read_keymap>
    4cf4:	c8 2f       	mov	r28, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    4cf6:	81 ee       	ldi	r24, 0xE1	; 225
    4cf8:	9a e0       	ldi	r25, 0x0A	; 10
    4cfa:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    4cfe:	1f 92       	push	r1
    4d00:	cf 93       	push	r28
    4d02:	8c ed       	ldi	r24, 0xDC	; 220
    4d04:	9a e0       	ldi	r25, 0x0A	; 10
    4d06:	9f 93       	push	r25
    4d08:	8f 93       	push	r24
    4d0a:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
    4d0e:	8a ed       	ldi	r24, 0xDA	; 218
    4d10:	9a e0       	ldi	r25, 0x0A	; 10
    4d12:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    4d16:	81 ec       	ldi	r24, 0xC1	; 193
    4d18:	9a e0       	ldi	r25, 0x0A	; 10
    4d1a:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    4d1e:	8c 2f       	mov	r24, r28
    4d20:	81 70       	andi	r24, 0x01	; 1
    4d22:	1f 92       	push	r1
    4d24:	8f 93       	push	r24
    4d26:	8e eb       	ldi	r24, 0xBE	; 190
    4d28:	9a e0       	ldi	r25, 0x0A	; 10
    4d2a:	9f 93       	push	r25
    4d2c:	8f 93       	push	r24
    4d2e:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
    4d32:	8d b7       	in	r24, 0x3d	; 61
    4d34:	9e b7       	in	r25, 0x3e	; 62
    4d36:	80 96       	adiw	r24, 0x20	; 32
    4d38:	0f b6       	in	r0, 0x3f	; 63
    4d3a:	f8 94       	cli
    4d3c:	9e bf       	out	0x3e, r25	; 62
    4d3e:	0f be       	out	0x3f, r0	; 63
    4d40:	8d bf       	out	0x3d, r24	; 61
    4d42:	8c eb       	ldi	r24, 0xBC	; 188
    4d44:	9a e0       	ldi	r25, 0x0A	; 10
    4d46:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    4d4a:	85 ea       	ldi	r24, 0xA5	; 165
    4d4c:	9a e0       	ldi	r25, 0x0A	; 10
    4d4e:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    4d52:	c1 fb       	bst	r28, 1
    4d54:	88 27       	eor	r24, r24
    4d56:	80 f9       	bld	r24, 0
    4d58:	1f 92       	push	r1
    4d5a:	8f 93       	push	r24
    4d5c:	82 ea       	ldi	r24, 0xA2	; 162
    4d5e:	9a e0       	ldi	r25, 0x0A	; 10
    4d60:	9f 93       	push	r25
    4d62:	8f 93       	push	r24
    4d64:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
    4d68:	80 ea       	ldi	r24, 0xA0	; 160
    4d6a:	9a e0       	ldi	r25, 0x0A	; 10
    4d6c:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    4d70:	8e e8       	ldi	r24, 0x8E	; 142
    4d72:	9a e0       	ldi	r25, 0x0A	; 10
    4d74:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    4d78:	c2 fb       	bst	r28, 2
    4d7a:	88 27       	eor	r24, r24
    4d7c:	80 f9       	bld	r24, 0
    4d7e:	1f 92       	push	r1
    4d80:	8f 93       	push	r24
    4d82:	8b e8       	ldi	r24, 0x8B	; 139
    4d84:	9a e0       	ldi	r25, 0x0A	; 10
    4d86:	9f 93       	push	r25
    4d88:	8f 93       	push	r24
    4d8a:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
    4d8e:	89 e8       	ldi	r24, 0x89	; 137
    4d90:	9a e0       	ldi	r25, 0x0A	; 10
    4d92:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    4d96:	87 e7       	ldi	r24, 0x77	; 119
    4d98:	9a e0       	ldi	r25, 0x0A	; 10
    4d9a:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    4d9e:	c3 fb       	bst	r28, 3
    4da0:	88 27       	eor	r24, r24
    4da2:	80 f9       	bld	r24, 0
    4da4:	1f 92       	push	r1
    4da6:	8f 93       	push	r24
    4da8:	84 e7       	ldi	r24, 0x74	; 116
    4daa:	9a e0       	ldi	r25, 0x0A	; 10
    4dac:	9f 93       	push	r25
    4dae:	8f 93       	push	r24
    4db0:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
    4db4:	82 e7       	ldi	r24, 0x72	; 114
    4db6:	9a e0       	ldi	r25, 0x0A	; 10
    4db8:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    4dbc:	88 e6       	ldi	r24, 0x68	; 104
    4dbe:	9a e0       	ldi	r25, 0x0A	; 10
    4dc0:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    4dc4:	c4 fb       	bst	r28, 4
    4dc6:	88 27       	eor	r24, r24
    4dc8:	80 f9       	bld	r24, 0
    4dca:	1f 92       	push	r1
    4dcc:	8f 93       	push	r24
    4dce:	85 e6       	ldi	r24, 0x65	; 101
    4dd0:	9a e0       	ldi	r25, 0x0A	; 10
    4dd2:	9f 93       	push	r25
    4dd4:	8f 93       	push	r24
    4dd6:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
    4dda:	83 e6       	ldi	r24, 0x63	; 99
    4ddc:	9a e0       	ldi	r25, 0x0A	; 10
    4dde:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    4de2:	81 e5       	ldi	r24, 0x51	; 81
    4de4:	9a e0       	ldi	r25, 0x0A	; 10
    4de6:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    4dea:	c5 fb       	bst	r28, 5
    4dec:	88 27       	eor	r24, r24
    4dee:	80 f9       	bld	r24, 0
    4df0:	1f 92       	push	r1
    4df2:	8f 93       	push	r24
    4df4:	8e e4       	ldi	r24, 0x4E	; 78
    4df6:	9a e0       	ldi	r25, 0x0A	; 10
    4df8:	9f 93       	push	r25
    4dfa:	8f 93       	push	r24
    4dfc:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
    4e00:	8c e4       	ldi	r24, 0x4C	; 76
    4e02:	9a e0       	ldi	r25, 0x0A	; 10
    4e04:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    4e08:	80 e3       	ldi	r24, 0x30	; 48
    4e0a:	9a e0       	ldi	r25, 0x0A	; 10
    4e0c:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    4e10:	c6 fb       	bst	r28, 6
    4e12:	88 27       	eor	r24, r24
    4e14:	80 f9       	bld	r24, 0
    4e16:	1f 92       	push	r1
    4e18:	8f 93       	push	r24
    4e1a:	8d e2       	ldi	r24, 0x2D	; 45
    4e1c:	9a e0       	ldi	r25, 0x0A	; 10
    4e1e:	9f 93       	push	r25
    4e20:	8f 93       	push	r24
    4e22:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
    4e26:	8b e2       	ldi	r24, 0x2B	; 43
    4e28:	9a e0       	ldi	r25, 0x0A	; 10
    4e2a:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    4e2e:	83 e2       	ldi	r24, 0x23	; 35
    4e30:	9a e0       	ldi	r25, 0x0A	; 10
    4e32:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    4e36:	c7 fb       	bst	r28, 7
    4e38:	cc 27       	eor	r28, r28
    4e3a:	c0 f9       	bld	r28, 0
    4e3c:	1f 92       	push	r1
    4e3e:	cf 93       	push	r28
    4e40:	80 e2       	ldi	r24, 0x20	; 32
    4e42:	9a e0       	ldi	r25, 0x0A	; 10
    4e44:	9f 93       	push	r25
    4e46:	8f 93       	push	r24
    4e48:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
    4e4c:	8e e1       	ldi	r24, 0x1E	; 30
    4e4e:	9a e0       	ldi	r25, 0x0A	; 10
    4e50:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    4e54:	8d b7       	in	r24, 0x3d	; 61
    4e56:	9e b7       	in	r25, 0x3e	; 62
    4e58:	4c 96       	adiw	r24, 0x1c	; 28
    4e5a:	0f b6       	in	r0, 0x3f	; 63
    4e5c:	f8 94       	cli
    4e5e:	9e bf       	out	0x3e, r25	; 62
    4e60:	0f be       	out	0x3f, r0	; 63
    4e62:	8d bf       	out	0x3d, r24	; 61
    4e64:	04 c0       	rjmp	.+8      	; 0x4e6e <command_common+0x368>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\t- Magic -\n"
    4e66:	89 e7       	ldi	r24, 0x79	; 121
    4e68:	99 e0       	ldi	r25, 0x09	; 9
    4e6a:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
            break;
        default:
            print("?");
            return false;
    }
    return true;
    4e6e:	c1 e0       	ldi	r28, 0x01	; 1
    4e70:	c0 c0       	rjmp	.+384    	; 0x4ff2 <command_common+0x4ec>
            print("\n\nbootloader... ");
            _delay_ms(1000);
            bootloader_jump(); // not return
            break;
        case KC_D:
            if (debug_enable) {
    4e72:	80 91 c7 01 	lds	r24, 0x01C7
    4e76:	c8 2f       	mov	r28, r24
    4e78:	c1 70       	andi	r28, 0x01	; 1
    4e7a:	80 ff       	sbrs	r24, 0
    4e7c:	09 c0       	rjmp	.+18     	; 0x4e90 <command_common+0x38a>
                print("\ndebug: off\n");
    4e7e:	84 e5       	ldi	r24, 0x54	; 84
    4e80:	9d e0       	ldi	r25, 0x0D	; 13
    4e82:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
                debug_matrix   = false;
    4e86:	80 91 c7 01 	lds	r24, 0x01C7
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    4e8a:	81 7f       	andi	r24, 0xF1	; 241
    4e8c:	8e 7f       	andi	r24, 0xFE	; 254
    4e8e:	47 c0       	rjmp	.+142    	; 0x4f1e <command_common+0x418>
            } else {
                print("\ndebug: on\n");
    4e90:	88 e4       	ldi	r24, 0x48	; 72
    4e92:	9d e0       	ldi	r25, 0x0D	; 13
    4e94:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
                debug_enable   = true;
    4e98:	80 91 c7 01 	lds	r24, 0x01C7
    4e9c:	81 60       	ori	r24, 0x01	; 1
    4e9e:	80 93 c7 01 	sts	0x01C7, r24
    4ea2:	e5 cf       	rjmp	.-54     	; 0x4e6e <command_common+0x368>
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    4ea4:	90 91 c7 01 	lds	r25, 0x01C7
    4ea8:	91 fb       	bst	r25, 1
    4eaa:	cc 27       	eor	r28, r28
    4eac:	c0 f9       	bld	r28, 0
    4eae:	81 e0       	ldi	r24, 0x01	; 1
    4eb0:	c8 27       	eor	r28, r24
    4eb2:	89 2f       	mov	r24, r25
    4eb4:	c0 fb       	bst	r28, 0
    4eb6:	81 f9       	bld	r24, 1
    4eb8:	80 93 c7 01 	sts	0x01C7, r24
            if (debug_matrix) {
    4ebc:	cc 23       	and	r28, r28
    4ebe:	19 f0       	breq	.+6      	; 0x4ec6 <command_common+0x3c0>
                print("\nmatrix: on\n");
    4ec0:	8b e3       	ldi	r24, 0x3B	; 59
    4ec2:	9d e0       	ldi	r25, 0x0D	; 13
    4ec4:	27 c0       	rjmp	.+78     	; 0x4f14 <command_common+0x40e>
                debug_enable = true;
            } else {
                print("\nmatrix: off\n");
    4ec6:	8d e2       	ldi	r24, 0x2D	; 45
    4ec8:	9d e0       	ldi	r25, 0x0D	; 13
    4eca:	cf cf       	rjmp	.-98     	; 0x4e6a <command_common+0x364>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    4ecc:	90 91 c7 01 	lds	r25, 0x01C7
    4ed0:	92 fb       	bst	r25, 2
    4ed2:	cc 27       	eor	r28, r28
    4ed4:	c0 f9       	bld	r28, 0
    4ed6:	81 e0       	ldi	r24, 0x01	; 1
    4ed8:	c8 27       	eor	r28, r24
    4eda:	89 2f       	mov	r24, r25
    4edc:	c0 fb       	bst	r28, 0
    4ede:	82 f9       	bld	r24, 2
    4ee0:	80 93 c7 01 	sts	0x01C7, r24
            if (debug_keyboard) {
    4ee4:	cc 23       	and	r28, r28
    4ee6:	19 f0       	breq	.+6      	; 0x4eee <command_common+0x3e8>
                print("\nkeyboard: on\n");
    4ee8:	8e e1       	ldi	r24, 0x1E	; 30
    4eea:	9d e0       	ldi	r25, 0x0D	; 13
    4eec:	13 c0       	rjmp	.+38     	; 0x4f14 <command_common+0x40e>
                debug_enable = true;
            } else {
                print("\nkeyboard: off\n");
    4eee:	8e e0       	ldi	r24, 0x0E	; 14
    4ef0:	9d e0       	ldi	r25, 0x0D	; 13
    4ef2:	bb cf       	rjmp	.-138    	; 0x4e6a <command_common+0x364>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    4ef4:	90 91 c7 01 	lds	r25, 0x01C7
    4ef8:	93 fb       	bst	r25, 3
    4efa:	cc 27       	eor	r28, r28
    4efc:	c0 f9       	bld	r28, 0
    4efe:	81 e0       	ldi	r24, 0x01	; 1
    4f00:	c8 27       	eor	r28, r24
    4f02:	89 2f       	mov	r24, r25
    4f04:	c0 fb       	bst	r28, 0
    4f06:	83 f9       	bld	r24, 3
    4f08:	80 93 c7 01 	sts	0x01C7, r24
            if (debug_mouse) {
    4f0c:	cc 23       	and	r28, r28
    4f0e:	51 f0       	breq	.+20     	; 0x4f24 <command_common+0x41e>
                print("\nmouse: on\n");
    4f10:	82 e0       	ldi	r24, 0x02	; 2
    4f12:	9d e0       	ldi	r25, 0x0D	; 13
    4f14:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
                debug_enable = true;
    4f18:	80 91 c7 01 	lds	r24, 0x01C7
    4f1c:	81 60       	ori	r24, 0x01	; 1
    4f1e:	80 93 c7 01 	sts	0x01C7, r24
    4f22:	67 c0       	rjmp	.+206    	; 0x4ff2 <command_common+0x4ec>
            } else {
                print("\nmouse: off\n");
    4f24:	85 ef       	ldi	r24, 0xF5	; 245
    4f26:	9c e0       	ldi	r25, 0x0C	; 12
    4f28:	a0 cf       	rjmp	.-192    	; 0x4e6a <command_common+0x364>
            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
                  " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
                  " AVR_ARCH: avr" STR(__AVR_ARCH__) "\n");
            break;
        case KC_S:
            print("\n\t- Status -\n");
    4f2a:	83 ee       	ldi	r24, 0xE3	; 227
    4f2c:	9b e0       	ldi	r25, 0x0B	; 11
    4f2e:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
            print_val_hex8(host_keyboard_leds());
    4f32:	0e 94 2a 11 	call	0x2254	; 0x2254 <host_keyboard_leds>
    4f36:	1f 92       	push	r1
    4f38:	8f 93       	push	r24
    4f3a:	89 ec       	ldi	r24, 0xC9	; 201
    4f3c:	9b e0       	ldi	r25, 0x0B	; 11
    4f3e:	9f 93       	push	r25
    4f40:	8f 93       	push	r24
    4f42:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
            print_val_hex8(keyboard_protocol);
    4f46:	80 91 0b 01 	lds	r24, 0x010B
    4f4a:	1f 92       	push	r1
    4f4c:	8f 93       	push	r24
    4f4e:	82 eb       	ldi	r24, 0xB2	; 178
    4f50:	9b e0       	ldi	r25, 0x0B	; 11
    4f52:	9f 93       	push	r25
    4f54:	8f 93       	push	r24
    4f56:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
            print_val_hex8(keyboard_idle);
    4f5a:	80 91 62 01 	lds	r24, 0x0162
    4f5e:	1f 92       	push	r1
    4f60:	8f 93       	push	r24
    4f62:	8f e9       	ldi	r24, 0x9F	; 159
    4f64:	9b e0       	ldi	r25, 0x0B	; 11
    4f66:	9f 93       	push	r25
    4f68:	8f 93       	push	r24
    4f6a:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
#ifdef NKRO_ENABLE
            print_val_hex8(keyboard_nkro);
    4f6e:	80 91 0c 01 	lds	r24, 0x010C
    4f72:	1f 92       	push	r1
    4f74:	8f 93       	push	r24
    4f76:	8c e8       	ldi	r24, 0x8C	; 140
    4f78:	9b e0       	ldi	r25, 0x0B	; 11
    4f7a:	9f 93       	push	r25
    4f7c:	8f 93       	push	r24
    4f7e:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
#endif
            print_val_hex32(timer_count);
    4f82:	80 91 c9 01 	lds	r24, 0x01C9
    4f86:	90 91 ca 01 	lds	r25, 0x01CA
    4f8a:	a0 91 cb 01 	lds	r26, 0x01CB
    4f8e:	b0 91 cc 01 	lds	r27, 0x01CC
    4f92:	bf 93       	push	r27
    4f94:	af 93       	push	r26
    4f96:	9f 93       	push	r25
    4f98:	8f 93       	push	r24
    4f9a:	88 e7       	ldi	r24, 0x78	; 120
    4f9c:	9b e0       	ldi	r25, 0x0B	; 11
    4f9e:	9f 93       	push	r25
    4fa0:	8f 93       	push	r24
    4fa2:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
#ifdef PROTOCOL_PJRC
#   if USB_COUNT_SOF
            print_val_hex8(usbSofCount);
#   endif
#endif
            break;
    4fa6:	8d b7       	in	r24, 0x3d	; 61
    4fa8:	9e b7       	in	r25, 0x3e	; 62
    4faa:	46 96       	adiw	r24, 0x16	; 22
    4fac:	0f b6       	in	r0, 0x3f	; 63
    4fae:	f8 94       	cli
    4fb0:	9e bf       	out	0x3e, r25	; 62
    4fb2:	0f be       	out	0x3f, r0	; 63
    4fb4:	8d bf       	out	0x3d, r24	; 61
    4fb6:	5b cf       	rjmp	.-330    	; 0x4e6e <command_common+0x368>
#ifdef NKRO_ENABLE
        case KC_N:
            clear_keyboard(); //Prevents stuck keys.
    4fb8:	0e 94 23 17 	call	0x2e46	; 0x2e46 <clear_keyboard>
            keyboard_nkro = !keyboard_nkro;
    4fbc:	c0 91 0c 01 	lds	r28, 0x010C
    4fc0:	81 e0       	ldi	r24, 0x01	; 1
    4fc2:	c8 27       	eor	r28, r24
    4fc4:	c0 93 0c 01 	sts	0x010C, r28
            if (keyboard_nkro)
    4fc8:	cc 23       	and	r28, r28
    4fca:	29 f0       	breq	.+10     	; 0x4fd6 <command_common+0x4d0>
                print("NKRO: on\n");
    4fcc:	8e e6       	ldi	r24, 0x6E	; 110
    4fce:	9b e0       	ldi	r25, 0x0B	; 11
    4fd0:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    4fd4:	0e c0       	rjmp	.+28     	; 0x4ff2 <command_common+0x4ec>
            else
                print("NKRO: off\n");
    4fd6:	83 e6       	ldi	r24, 0x63	; 99
    4fd8:	9b e0       	ldi	r25, 0x0B	; 11
    4fda:	47 cf       	rjmp	.-370    	; 0x4e6a <command_common+0x364>
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
    4fdc:	80 e0       	ldi	r24, 0x00	; 0
    4fde:	01 c0       	rjmp	.+2      	; 0x4fe2 <command_common+0x4dc>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    4fe0:	89 53       	subi	r24, 0x39	; 57
    4fe2:	0e 94 63 25 	call	0x4ac6	; 0x4ac6 <switch_default_layer>
    4fe6:	43 cf       	rjmp	.-378    	; 0x4e6e <command_common+0x368>
            break;
        default:
            print("?");
    4fe8:	81 e6       	ldi	r24, 0x61	; 97
    4fea:	9b e0       	ldi	r25, 0x0B	; 11
    4fec:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
            return false;
    4ff0:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return true;
}
    4ff2:	8c 2f       	mov	r24, r28
    4ff4:	cf 91       	pop	r28
    4ff6:	08 95       	ret

00004ff8 <command_extra>:
/* This allows to define extra commands. return false when not processed. */
bool command_extra(uint8_t code) __attribute__ ((weak));
bool command_extra(uint8_t code)
{
    return false;
}
    4ff8:	80 e0       	ldi	r24, 0x00	; 0
    4ffa:	08 95       	ret

00004ffc <command_console_extra>:

bool command_console_extra(uint8_t code) __attribute__ ((weak));
bool command_console_extra(uint8_t code)
{
    return false;
}
    4ffc:	80 e0       	ldi	r24, 0x00	; 0
    4ffe:	08 95       	ret

00005000 <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    5000:	cf 93       	push	r28
    5002:	c8 2f       	mov	r28, r24
    switch (command_state) {
    5004:	80 91 d7 01 	lds	r24, 0x01D7
    5008:	81 30       	cpi	r24, 0x01	; 1
    500a:	71 f0       	breq	.+28     	; 0x5028 <command_proc+0x28>
    500c:	20 f0       	brcs	.+8      	; 0x5016 <command_proc+0x16>
    500e:	82 30       	cpi	r24, 0x02	; 2
    5010:	09 f4       	brne	.+2      	; 0x5014 <command_proc+0x14>
    5012:	4b c0       	rjmp	.+150    	; 0x50aa <command_proc+0xaa>
    5014:	42 c1       	rjmp	.+644    	; 0x529a <command_proc+0x29a>
        case ONESHOT:
            if (!IS_COMMAND())
    5016:	e0 91 0d 01 	lds	r30, 0x010D
    501a:	f0 91 0e 01 	lds	r31, 0x010E
    501e:	80 81       	ld	r24, Z
    5020:	82 32       	cpi	r24, 0x22	; 34
    5022:	09 f0       	breq	.+2      	; 0x5026 <command_proc+0x26>
    5024:	3c c1       	rjmp	.+632    	; 0x529e <command_proc+0x29e>
    5026:	07 c0       	rjmp	.+14     	; 0x5036 <command_proc+0x36>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    5028:	e0 91 0d 01 	lds	r30, 0x010D
    502c:	f0 91 0e 01 	lds	r31, 0x010E
    5030:	80 81       	ld	r24, Z
    5032:	82 32       	cpi	r24, 0x22	; 34
    5034:	61 f4       	brne	.+24     	; 0x504e <command_proc+0x4e>
                return (command_extra(code) || command_common(code));
    5036:	8c 2f       	mov	r24, r28
    5038:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <command_extra>
    503c:	81 11       	cpse	r24, r1
    503e:	04 c0       	rjmp	.+8      	; 0x5048 <command_proc+0x48>
    5040:	8c 2f       	mov	r24, r28
    5042:	0e 94 83 25 	call	0x4b06	; 0x4b06 <command_common>
    5046:	2f c0       	rjmp	.+94     	; 0x50a6 <command_proc+0xa6>
    5048:	81 e0       	ldi	r24, 0x01	; 1
    504a:	90 e0       	ldi	r25, 0x00	; 0
    504c:	2c c0       	rjmp	.+88     	; 0x50a6 <command_proc+0xa6>
            else
                return (command_console_extra(code) || command_console(code));
    504e:	8c 2f       	mov	r24, r28
    5050:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <command_console_extra>
    5054:	81 11       	cpse	r24, r1
    5056:	26 c0       	rjmp	.+76     	; 0x50a4 <command_proc+0xa4>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    5058:	c4 31       	cpi	r28, 0x14	; 20
    505a:	e1 f0       	breq	.+56     	; 0x5094 <command_proc+0x94>
    505c:	70 f4       	brcc	.+28     	; 0x507a <command_proc+0x7a>
    505e:	cb 30       	cpi	r28, 0x0B	; 11
    5060:	81 f0       	breq	.+32     	; 0x5082 <command_proc+0x82>
    5062:	c0 31       	cpi	r28, 0x10	; 16
    5064:	d1 f4       	brne	.+52     	; 0x509a <command_proc+0x9a>
        case KC_ESC:
            command_state = ONESHOT;
            return false;
#ifdef MOUSEKEY_ENABLE
        case KC_M:
            mousekey_console_help();
    5066:	0e 94 2b 24 	call	0x4856	; 0x4856 <mousekey_console_help>
            print("M> ");
    506a:	85 e4       	ldi	r24, 0x45	; 69
    506c:	99 e0       	ldi	r25, 0x09	; 9
    506e:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
            command_state = MOUSEKEY;
    5072:	82 e0       	ldi	r24, 0x02	; 2
    5074:	80 93 d7 01 	sts	0x01D7, r24
    5078:	15 c0       	rjmp	.+42     	; 0x50a4 <command_proc+0xa4>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    507a:	c9 32       	cpi	r28, 0x29	; 41
    507c:	59 f0       	breq	.+22     	; 0x5094 <command_proc+0x94>
    507e:	c8 33       	cpi	r28, 0x38	; 56
    5080:	61 f4       	brne	.+24     	; 0x509a <command_proc+0x9a>
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    5082:	82 e5       	ldi	r24, 0x52	; 82
    5084:	99 e0       	ldi	r25, 0x09	; 9
    5086:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    508a:	89 e4       	ldi	r24, 0x49	; 73
    508c:	99 e0       	ldi	r25, 0x09	; 9
    508e:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    5092:	08 c0       	rjmp	.+16     	; 0x50a4 <command_proc+0xa4>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            command_state = ONESHOT;
    5094:	10 92 d7 01 	sts	0x01D7, r1
    5098:	04 c1       	rjmp	.+520    	; 0x52a2 <command_proc+0x2a2>
            print("M> ");
            command_state = MOUSEKEY;
            return true;
#endif
        default:
            print("?");
    509a:	83 e4       	ldi	r24, 0x43	; 67
    509c:	99 e0       	ldi	r25, 0x09	; 9
    509e:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    50a2:	ff c0       	rjmp	.+510    	; 0x52a2 <command_proc+0x2a2>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    50a4:	81 e0       	ldi	r24, 0x01	; 1
    50a6:	81 70       	andi	r24, 0x01	; 1
    50a8:	fe c0       	rjmp	.+508    	; 0x52a6 <command_proc+0x2a6>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    50aa:	c4 32       	cpi	r28, 0x24	; 36
    50ac:	28 f5       	brcc	.+74     	; 0x50f8 <command_proc+0xf8>
    50ae:	ce 31       	cpi	r28, 0x1E	; 30
    50b0:	08 f0       	brcs	.+2      	; 0x50b4 <command_proc+0xb4>
    50b2:	c1 c0       	rjmp	.+386    	; 0x5236 <command_proc+0x236>
    50b4:	cb 30       	cpi	r28, 0x0B	; 11
    50b6:	a1 f1       	breq	.+104    	; 0x5120 <command_proc+0x120>
    50b8:	d0 f4       	brcc	.+52     	; 0x50ee <command_proc+0xee>
    50ba:	c7 30       	cpi	r28, 0x07	; 7
    50bc:	09 f0       	breq	.+2      	; 0x50c0 <command_proc+0xc0>
    50be:	d3 c0       	rjmp	.+422    	; 0x5266 <command_proc+0x266>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
    50c0:	8e e1       	ldi	r24, 0x1E	; 30
    50c2:	80 93 14 01 	sts	0x0114, r24
            mk_interval = MOUSEKEY_INTERVAL;
    50c6:	82 e3       	ldi	r24, 0x32	; 50
    50c8:	80 93 13 01 	sts	0x0113, r24
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    50cc:	8a e0       	ldi	r24, 0x0A	; 10
    50ce:	80 93 12 01 	sts	0x0112, r24
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    50d2:	84 e1       	ldi	r24, 0x14	; 20
    50d4:	80 93 11 01 	sts	0x0111, r24
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    50d8:	88 e0       	ldi	r24, 0x08	; 8
    50da:	80 93 10 01 	sts	0x0110, r24
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    50de:	88 e2       	ldi	r24, 0x28	; 40
    50e0:	80 93 0f 01 	sts	0x010F, r24
            print("set default\n");
    50e4:	89 ee       	ldi	r24, 0xE9	; 233
    50e6:	97 e0       	ldi	r25, 0x07	; 7
    50e8:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    50ec:	bf c0       	rjmp	.+382    	; 0x526c <command_proc+0x26c>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    50ee:	c3 31       	cpi	r28, 0x13	; 19
    50f0:	49 f1       	breq	.+82     	; 0x5144 <command_proc+0x144>
    50f2:	c4 31       	cpi	r28, 0x14	; 20
    50f4:	c1 f0       	breq	.+48     	; 0x5126 <command_proc+0x126>
    50f6:	b7 c0       	rjmp	.+366    	; 0x5266 <command_proc+0x266>
    50f8:	cb 34       	cpi	r28, 0x4B	; 75
    50fa:	09 f4       	brne	.+2      	; 0x50fe <command_proc+0xfe>
    50fc:	a9 c0       	rjmp	.+338    	; 0x5250 <command_proc+0x250>
    50fe:	28 f4       	brcc	.+10     	; 0x510a <command_proc+0x10a>
    5100:	c9 32       	cpi	r28, 0x29	; 41
    5102:	89 f0       	breq	.+34     	; 0x5126 <command_proc+0x126>
    5104:	c8 33       	cpi	r28, 0x38	; 56
    5106:	61 f0       	breq	.+24     	; 0x5120 <command_proc+0x120>
    5108:	ae c0       	rjmp	.+348    	; 0x5266 <command_proc+0x266>
    510a:	c1 35       	cpi	r28, 0x51	; 81
    510c:	09 f4       	brne	.+2      	; 0x5110 <command_proc+0x110>
    510e:	9e c0       	rjmp	.+316    	; 0x524c <command_proc+0x24c>
    5110:	c2 35       	cpi	r28, 0x52	; 82
    5112:	09 f4       	brne	.+2      	; 0x5116 <command_proc+0x116>
    5114:	99 c0       	rjmp	.+306    	; 0x5248 <command_proc+0x248>
    5116:	ce 34       	cpi	r28, 0x4E	; 78
    5118:	09 f0       	breq	.+2      	; 0x511c <command_proc+0x11c>
    511a:	a5 c0       	rjmp	.+330    	; 0x5266 <command_proc+0x266>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    511c:	6a e0       	ldi	r22, 0x0A	; 10
    511e:	9e c0       	rjmp	.+316    	; 0x525c <command_proc+0x25c>
static bool mousekey_console(uint8_t code)
{
    switch (code) {
        case KC_H:
        case KC_SLASH: /* ? */
            mousekey_console_help();
    5120:	0e 94 2b 24 	call	0x4856	; 0x4856 <mousekey_console_help>
    5124:	a3 c0       	rjmp	.+326    	; 0x526c <command_proc+0x26c>
            break;
        case KC_Q:
        case KC_ESC:
            if (mousekey_param) {
    5126:	80 91 d6 01 	lds	r24, 0x01D6
    512a:	88 23       	and	r24, r24
    512c:	19 f0       	breq	.+6      	; 0x5134 <command_proc+0x134>
                mousekey_param = 0;
    512e:	10 92 d6 01 	sts	0x01D6, r1
    5132:	9c c0       	rjmp	.+312    	; 0x526c <command_proc+0x26c>
            } else {
                print("C> ");
    5134:	86 ef       	ldi	r24, 0xF6	; 246
    5136:	97 e0       	ldi	r25, 0x07	; 7
    5138:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
                command_state = CONSOLE;
    513c:	81 e0       	ldi	r24, 0x01	; 1
    513e:	80 93 d7 01 	sts	0x01D7, r24
    5142:	b1 c0       	rjmp	.+354    	; 0x52a6 <command_proc+0x2a6>
 ***********************************************************/
static uint8_t mousekey_param = 0;

static void mousekey_param_print(void)
{
    print("\n\t- Values -\n");
    5144:	80 ed       	ldi	r24, 0xD0	; 208
    5146:	97 e0       	ldi	r25, 0x07	; 7
    5148:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    514c:	8e eb       	ldi	r24, 0xBE	; 190
    514e:	97 e0       	ldi	r25, 0x07	; 7
    5150:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    5154:	80 91 14 01 	lds	r24, 0x0114
    5158:	1f 92       	push	r1
    515a:	8f 93       	push	r24
    515c:	8b eb       	ldi	r24, 0xBB	; 187
    515e:	97 e0       	ldi	r25, 0x07	; 7
    5160:	9f 93       	push	r25
    5162:	8f 93       	push	r24
    5164:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
    5168:	89 eb       	ldi	r24, 0xB9	; 185
    516a:	97 e0       	ldi	r25, 0x07	; 7
    516c:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    5170:	87 ea       	ldi	r24, 0xA7	; 167
    5172:	97 e0       	ldi	r25, 0x07	; 7
    5174:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    5178:	80 91 13 01 	lds	r24, 0x0113
    517c:	1f 92       	push	r1
    517e:	8f 93       	push	r24
    5180:	84 ea       	ldi	r24, 0xA4	; 164
    5182:	97 e0       	ldi	r25, 0x07	; 7
    5184:	9f 93       	push	r25
    5186:	8f 93       	push	r24
    5188:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
    518c:	82 ea       	ldi	r24, 0xA2	; 162
    518e:	97 e0       	ldi	r25, 0x07	; 7
    5190:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    5194:	83 e9       	ldi	r24, 0x93	; 147
    5196:	97 e0       	ldi	r25, 0x07	; 7
    5198:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    519c:	80 91 12 01 	lds	r24, 0x0112
    51a0:	1f 92       	push	r1
    51a2:	8f 93       	push	r24
    51a4:	80 e9       	ldi	r24, 0x90	; 144
    51a6:	97 e0       	ldi	r25, 0x07	; 7
    51a8:	9f 93       	push	r25
    51aa:	8f 93       	push	r24
    51ac:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
    51b0:	8e e8       	ldi	r24, 0x8E	; 142
    51b2:	97 e0       	ldi	r25, 0x07	; 7
    51b4:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    51b8:	8d e7       	ldi	r24, 0x7D	; 125
    51ba:	97 e0       	ldi	r25, 0x07	; 7
    51bc:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    51c0:	80 91 11 01 	lds	r24, 0x0111
    51c4:	1f 92       	push	r1
    51c6:	8f 93       	push	r24
    51c8:	8a e7       	ldi	r24, 0x7A	; 122
    51ca:	97 e0       	ldi	r25, 0x07	; 7
    51cc:	9f 93       	push	r25
    51ce:	8f 93       	push	r24
    51d0:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
    51d4:	88 e7       	ldi	r24, 0x78	; 120
    51d6:	97 e0       	ldi	r25, 0x07	; 7
    51d8:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    51dc:	83 e6       	ldi	r24, 0x63	; 99
    51de:	97 e0       	ldi	r25, 0x07	; 7
    51e0:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    51e4:	80 91 10 01 	lds	r24, 0x0110
    51e8:	1f 92       	push	r1
    51ea:	8f 93       	push	r24
    51ec:	80 e6       	ldi	r24, 0x60	; 96
    51ee:	97 e0       	ldi	r25, 0x07	; 7
    51f0:	9f 93       	push	r25
    51f2:	8f 93       	push	r24
    51f4:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
    51f8:	8e e5       	ldi	r24, 0x5E	; 94
    51fa:	97 e0       	ldi	r25, 0x07	; 7
    51fc:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    5200:	87 e4       	ldi	r24, 0x47	; 71
    5202:	97 e0       	ldi	r25, 0x07	; 7
    5204:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    5208:	80 91 0f 01 	lds	r24, 0x010F
    520c:	1f 92       	push	r1
    520e:	8f 93       	push	r24
    5210:	84 e4       	ldi	r24, 0x44	; 68
    5212:	97 e0       	ldi	r25, 0x07	; 7
    5214:	9f 93       	push	r25
    5216:	8f 93       	push	r24
    5218:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
    521c:	82 e4       	ldi	r24, 0x42	; 66
    521e:	97 e0       	ldi	r25, 0x07	; 7
    5220:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
    5224:	8d b7       	in	r24, 0x3d	; 61
    5226:	9e b7       	in	r25, 0x3e	; 62
    5228:	48 96       	adiw	r24, 0x18	; 24
    522a:	0f b6       	in	r0, 0x3f	; 63
    522c:	f8 94       	cli
    522e:	9e bf       	out	0x3e, r25	; 62
    5230:	0f be       	out	0x3f, r0	; 63
    5232:	8d bf       	out	0x3d, r24	; 61
    5234:	1b c0       	rjmp	.+54     	; 0x526c <command_proc+0x26c>
    5236:	ce 51       	subi	r28, 0x1E	; 30
    5238:	ec 2f       	mov	r30, r28
    523a:	f0 e0       	ldi	r31, 0x00	; 0
    523c:	e2 5d       	subi	r30, 0xD2	; 210
    523e:	fe 4f       	sbci	r31, 0xFE	; 254
        case KC_2:
        case KC_3:
        case KC_4:
        case KC_5:
        case KC_6:
            mousekey_param = numkey2num(code);
    5240:	80 81       	ld	r24, Z
    5242:	80 93 d6 01 	sts	0x01D6, r24
    5246:	12 c0       	rjmp	.+36     	; 0x526c <command_proc+0x26c>
            break;
        case KC_UP:
            mousekey_param_inc(mousekey_param, 1);
    5248:	61 e0       	ldi	r22, 0x01	; 1
    524a:	03 c0       	rjmp	.+6      	; 0x5252 <command_proc+0x252>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
    524c:	61 e0       	ldi	r22, 0x01	; 1
    524e:	06 c0       	rjmp	.+12     	; 0x525c <command_proc+0x25c>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
    5250:	6a e0       	ldi	r22, 0x0A	; 10
    5252:	80 91 d6 01 	lds	r24, 0x01D6
    5256:	0e 94 42 24 	call	0x4884	; 0x4884 <mousekey_param_inc>
    525a:	08 c0       	rjmp	.+16     	; 0x526c <command_proc+0x26c>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    525c:	80 91 d6 01 	lds	r24, 0x01D6
    5260:	0e 94 e5 24 	call	0x49ca	; 0x49ca <mousekey_param_dec>
    5264:	03 c0       	rjmp	.+6      	; 0x526c <command_proc+0x26c>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
            print("set default\n");
            break;
        default:
            print("?");
    5266:	87 ee       	ldi	r24, 0xE7	; 231
    5268:	97 e0       	ldi	r25, 0x07	; 7
    526a:	13 c0       	rjmp	.+38     	; 0x5292 <command_proc+0x292>
            return false;
    }
    if (mousekey_param)
    526c:	80 91 d6 01 	lds	r24, 0x01D6
    5270:	88 23       	and	r24, r24
    5272:	69 f0       	breq	.+26     	; 0x528e <command_proc+0x28e>
        xprintf("M%d> ", mousekey_param);
    5274:	1f 92       	push	r1
    5276:	8f 93       	push	r24
    5278:	81 ee       	ldi	r24, 0xE1	; 225
    527a:	97 e0       	ldi	r25, 0x07	; 7
    527c:	9f 93       	push	r25
    527e:	8f 93       	push	r24
    5280:	0e 94 ac 07 	call	0xf58	; 0xf58 <__xprintf>
    5284:	0f 90       	pop	r0
    5286:	0f 90       	pop	r0
    5288:	0f 90       	pop	r0
    528a:	0f 90       	pop	r0
    528c:	04 c0       	rjmp	.+8      	; 0x5296 <command_proc+0x296>
    else
        print("M>" );
    528e:	8e ed       	ldi	r24, 0xDE	; 222
    5290:	97 e0       	ldi	r25, 0x07	; 7
    5292:	0e 94 13 07 	call	0xe26	; 0xe26 <xputs>
#endif
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
    5296:	81 e0       	ldi	r24, 0x01	; 1
    5298:	06 c0       	rjmp	.+12     	; 0x52a6 <command_proc+0x2a6>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    529a:	10 92 d7 01 	sts	0x01D7, r1
bool command_proc(uint8_t code)
{
    switch (command_state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
    529e:	80 e0       	ldi	r24, 0x00	; 0
    52a0:	02 c0       	rjmp	.+4      	; 0x52a6 <command_proc+0x2a6>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    52a2:	80 e0       	ldi	r24, 0x00	; 0
    52a4:	00 cf       	rjmp	.-512    	; 0x50a6 <command_proc+0xa6>
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
}
    52a6:	cf 91       	pop	r28
    52a8:	08 95       	ret

000052aa <__fixsfsi>:
    52aa:	04 d0       	rcall	.+8      	; 0x52b4 <__fixunssfsi>
    52ac:	68 94       	set
    52ae:	b1 11       	cpse	r27, r1
    52b0:	8d c0       	rjmp	.+282    	; 0x53cc <__fp_szero>
    52b2:	08 95       	ret

000052b4 <__fixunssfsi>:
    52b4:	70 d0       	rcall	.+224    	; 0x5396 <__fp_splitA>
    52b6:	88 f0       	brcs	.+34     	; 0x52da <__fixunssfsi+0x26>
    52b8:	9f 57       	subi	r25, 0x7F	; 127
    52ba:	90 f0       	brcs	.+36     	; 0x52e0 <__fixunssfsi+0x2c>
    52bc:	b9 2f       	mov	r27, r25
    52be:	99 27       	eor	r25, r25
    52c0:	b7 51       	subi	r27, 0x17	; 23
    52c2:	a0 f0       	brcs	.+40     	; 0x52ec <__fixunssfsi+0x38>
    52c4:	d1 f0       	breq	.+52     	; 0x52fa <__fixunssfsi+0x46>
    52c6:	66 0f       	add	r22, r22
    52c8:	77 1f       	adc	r23, r23
    52ca:	88 1f       	adc	r24, r24
    52cc:	99 1f       	adc	r25, r25
    52ce:	1a f0       	brmi	.+6      	; 0x52d6 <__fixunssfsi+0x22>
    52d0:	ba 95       	dec	r27
    52d2:	c9 f7       	brne	.-14     	; 0x52c6 <__fixunssfsi+0x12>
    52d4:	12 c0       	rjmp	.+36     	; 0x52fa <__fixunssfsi+0x46>
    52d6:	b1 30       	cpi	r27, 0x01	; 1
    52d8:	81 f0       	breq	.+32     	; 0x52fa <__fixunssfsi+0x46>
    52da:	77 d0       	rcall	.+238    	; 0x53ca <__fp_zero>
    52dc:	b1 e0       	ldi	r27, 0x01	; 1
    52de:	08 95       	ret
    52e0:	74 c0       	rjmp	.+232    	; 0x53ca <__fp_zero>
    52e2:	67 2f       	mov	r22, r23
    52e4:	78 2f       	mov	r23, r24
    52e6:	88 27       	eor	r24, r24
    52e8:	b8 5f       	subi	r27, 0xF8	; 248
    52ea:	39 f0       	breq	.+14     	; 0x52fa <__fixunssfsi+0x46>
    52ec:	b9 3f       	cpi	r27, 0xF9	; 249
    52ee:	cc f3       	brlt	.-14     	; 0x52e2 <__fixunssfsi+0x2e>
    52f0:	86 95       	lsr	r24
    52f2:	77 95       	ror	r23
    52f4:	67 95       	ror	r22
    52f6:	b3 95       	inc	r27
    52f8:	d9 f7       	brne	.-10     	; 0x52f0 <__fixunssfsi+0x3c>
    52fa:	3e f4       	brtc	.+14     	; 0x530a <__fixunssfsi+0x56>
    52fc:	90 95       	com	r25
    52fe:	80 95       	com	r24
    5300:	70 95       	com	r23
    5302:	61 95       	neg	r22
    5304:	7f 4f       	sbci	r23, 0xFF	; 255
    5306:	8f 4f       	sbci	r24, 0xFF	; 255
    5308:	9f 4f       	sbci	r25, 0xFF	; 255
    530a:	08 95       	ret

0000530c <__floatunsisf>:
    530c:	e8 94       	clt
    530e:	09 c0       	rjmp	.+18     	; 0x5322 <__floatsisf+0x12>

00005310 <__floatsisf>:
    5310:	97 fb       	bst	r25, 7
    5312:	3e f4       	brtc	.+14     	; 0x5322 <__floatsisf+0x12>
    5314:	90 95       	com	r25
    5316:	80 95       	com	r24
    5318:	70 95       	com	r23
    531a:	61 95       	neg	r22
    531c:	7f 4f       	sbci	r23, 0xFF	; 255
    531e:	8f 4f       	sbci	r24, 0xFF	; 255
    5320:	9f 4f       	sbci	r25, 0xFF	; 255
    5322:	99 23       	and	r25, r25
    5324:	a9 f0       	breq	.+42     	; 0x5350 <__floatsisf+0x40>
    5326:	f9 2f       	mov	r31, r25
    5328:	96 e9       	ldi	r25, 0x96	; 150
    532a:	bb 27       	eor	r27, r27
    532c:	93 95       	inc	r25
    532e:	f6 95       	lsr	r31
    5330:	87 95       	ror	r24
    5332:	77 95       	ror	r23
    5334:	67 95       	ror	r22
    5336:	b7 95       	ror	r27
    5338:	f1 11       	cpse	r31, r1
    533a:	f8 cf       	rjmp	.-16     	; 0x532c <__floatsisf+0x1c>
    533c:	fa f4       	brpl	.+62     	; 0x537c <__floatsisf+0x6c>
    533e:	bb 0f       	add	r27, r27
    5340:	11 f4       	brne	.+4      	; 0x5346 <__floatsisf+0x36>
    5342:	60 ff       	sbrs	r22, 0
    5344:	1b c0       	rjmp	.+54     	; 0x537c <__floatsisf+0x6c>
    5346:	6f 5f       	subi	r22, 0xFF	; 255
    5348:	7f 4f       	sbci	r23, 0xFF	; 255
    534a:	8f 4f       	sbci	r24, 0xFF	; 255
    534c:	9f 4f       	sbci	r25, 0xFF	; 255
    534e:	16 c0       	rjmp	.+44     	; 0x537c <__floatsisf+0x6c>
    5350:	88 23       	and	r24, r24
    5352:	11 f0       	breq	.+4      	; 0x5358 <__floatsisf+0x48>
    5354:	96 e9       	ldi	r25, 0x96	; 150
    5356:	11 c0       	rjmp	.+34     	; 0x537a <__floatsisf+0x6a>
    5358:	77 23       	and	r23, r23
    535a:	21 f0       	breq	.+8      	; 0x5364 <__floatsisf+0x54>
    535c:	9e e8       	ldi	r25, 0x8E	; 142
    535e:	87 2f       	mov	r24, r23
    5360:	76 2f       	mov	r23, r22
    5362:	05 c0       	rjmp	.+10     	; 0x536e <__floatsisf+0x5e>
    5364:	66 23       	and	r22, r22
    5366:	71 f0       	breq	.+28     	; 0x5384 <__floatsisf+0x74>
    5368:	96 e8       	ldi	r25, 0x86	; 134
    536a:	86 2f       	mov	r24, r22
    536c:	70 e0       	ldi	r23, 0x00	; 0
    536e:	60 e0       	ldi	r22, 0x00	; 0
    5370:	2a f0       	brmi	.+10     	; 0x537c <__floatsisf+0x6c>
    5372:	9a 95       	dec	r25
    5374:	66 0f       	add	r22, r22
    5376:	77 1f       	adc	r23, r23
    5378:	88 1f       	adc	r24, r24
    537a:	da f7       	brpl	.-10     	; 0x5372 <__floatsisf+0x62>
    537c:	88 0f       	add	r24, r24
    537e:	96 95       	lsr	r25
    5380:	87 95       	ror	r24
    5382:	97 f9       	bld	r25, 7
    5384:	08 95       	ret

00005386 <__fp_split3>:
    5386:	57 fd       	sbrc	r21, 7
    5388:	90 58       	subi	r25, 0x80	; 128
    538a:	44 0f       	add	r20, r20
    538c:	55 1f       	adc	r21, r21
    538e:	59 f0       	breq	.+22     	; 0x53a6 <__fp_splitA+0x10>
    5390:	5f 3f       	cpi	r21, 0xFF	; 255
    5392:	71 f0       	breq	.+28     	; 0x53b0 <__fp_splitA+0x1a>
    5394:	47 95       	ror	r20

00005396 <__fp_splitA>:
    5396:	88 0f       	add	r24, r24
    5398:	97 fb       	bst	r25, 7
    539a:	99 1f       	adc	r25, r25
    539c:	61 f0       	breq	.+24     	; 0x53b6 <__fp_splitA+0x20>
    539e:	9f 3f       	cpi	r25, 0xFF	; 255
    53a0:	79 f0       	breq	.+30     	; 0x53c0 <__fp_splitA+0x2a>
    53a2:	87 95       	ror	r24
    53a4:	08 95       	ret
    53a6:	12 16       	cp	r1, r18
    53a8:	13 06       	cpc	r1, r19
    53aa:	14 06       	cpc	r1, r20
    53ac:	55 1f       	adc	r21, r21
    53ae:	f2 cf       	rjmp	.-28     	; 0x5394 <__fp_split3+0xe>
    53b0:	46 95       	lsr	r20
    53b2:	f1 df       	rcall	.-30     	; 0x5396 <__fp_splitA>
    53b4:	08 c0       	rjmp	.+16     	; 0x53c6 <__fp_splitA+0x30>
    53b6:	16 16       	cp	r1, r22
    53b8:	17 06       	cpc	r1, r23
    53ba:	18 06       	cpc	r1, r24
    53bc:	99 1f       	adc	r25, r25
    53be:	f1 cf       	rjmp	.-30     	; 0x53a2 <__fp_splitA+0xc>
    53c0:	86 95       	lsr	r24
    53c2:	71 05       	cpc	r23, r1
    53c4:	61 05       	cpc	r22, r1
    53c6:	08 94       	sec
    53c8:	08 95       	ret

000053ca <__fp_zero>:
    53ca:	e8 94       	clt

000053cc <__fp_szero>:
    53cc:	bb 27       	eor	r27, r27
    53ce:	66 27       	eor	r22, r22
    53d0:	77 27       	eor	r23, r23
    53d2:	cb 01       	movw	r24, r22
    53d4:	97 f9       	bld	r25, 7
    53d6:	08 95       	ret

000053d8 <__mulsf3>:
    53d8:	0b d0       	rcall	.+22     	; 0x53f0 <__mulsf3x>
    53da:	78 c0       	rjmp	.+240    	; 0x54cc <__fp_round>
    53dc:	69 d0       	rcall	.+210    	; 0x54b0 <__fp_pscA>
    53de:	28 f0       	brcs	.+10     	; 0x53ea <__mulsf3+0x12>
    53e0:	6e d0       	rcall	.+220    	; 0x54be <__fp_pscB>
    53e2:	18 f0       	brcs	.+6      	; 0x53ea <__mulsf3+0x12>
    53e4:	95 23       	and	r25, r21
    53e6:	09 f0       	breq	.+2      	; 0x53ea <__mulsf3+0x12>
    53e8:	5a c0       	rjmp	.+180    	; 0x549e <__fp_inf>
    53ea:	5f c0       	rjmp	.+190    	; 0x54aa <__fp_nan>
    53ec:	11 24       	eor	r1, r1
    53ee:	ee cf       	rjmp	.-36     	; 0x53cc <__fp_szero>

000053f0 <__mulsf3x>:
    53f0:	ca df       	rcall	.-108    	; 0x5386 <__fp_split3>
    53f2:	a0 f3       	brcs	.-24     	; 0x53dc <__mulsf3+0x4>

000053f4 <__mulsf3_pse>:
    53f4:	95 9f       	mul	r25, r21
    53f6:	d1 f3       	breq	.-12     	; 0x53ec <__mulsf3+0x14>
    53f8:	95 0f       	add	r25, r21
    53fa:	50 e0       	ldi	r21, 0x00	; 0
    53fc:	55 1f       	adc	r21, r21
    53fe:	62 9f       	mul	r22, r18
    5400:	f0 01       	movw	r30, r0
    5402:	72 9f       	mul	r23, r18
    5404:	bb 27       	eor	r27, r27
    5406:	f0 0d       	add	r31, r0
    5408:	b1 1d       	adc	r27, r1
    540a:	63 9f       	mul	r22, r19
    540c:	aa 27       	eor	r26, r26
    540e:	f0 0d       	add	r31, r0
    5410:	b1 1d       	adc	r27, r1
    5412:	aa 1f       	adc	r26, r26
    5414:	64 9f       	mul	r22, r20
    5416:	66 27       	eor	r22, r22
    5418:	b0 0d       	add	r27, r0
    541a:	a1 1d       	adc	r26, r1
    541c:	66 1f       	adc	r22, r22
    541e:	82 9f       	mul	r24, r18
    5420:	22 27       	eor	r18, r18
    5422:	b0 0d       	add	r27, r0
    5424:	a1 1d       	adc	r26, r1
    5426:	62 1f       	adc	r22, r18
    5428:	73 9f       	mul	r23, r19
    542a:	b0 0d       	add	r27, r0
    542c:	a1 1d       	adc	r26, r1
    542e:	62 1f       	adc	r22, r18
    5430:	83 9f       	mul	r24, r19
    5432:	a0 0d       	add	r26, r0
    5434:	61 1d       	adc	r22, r1
    5436:	22 1f       	adc	r18, r18
    5438:	74 9f       	mul	r23, r20
    543a:	33 27       	eor	r19, r19
    543c:	a0 0d       	add	r26, r0
    543e:	61 1d       	adc	r22, r1
    5440:	23 1f       	adc	r18, r19
    5442:	84 9f       	mul	r24, r20
    5444:	60 0d       	add	r22, r0
    5446:	21 1d       	adc	r18, r1
    5448:	82 2f       	mov	r24, r18
    544a:	76 2f       	mov	r23, r22
    544c:	6a 2f       	mov	r22, r26
    544e:	11 24       	eor	r1, r1
    5450:	9f 57       	subi	r25, 0x7F	; 127
    5452:	50 40       	sbci	r21, 0x00	; 0
    5454:	8a f0       	brmi	.+34     	; 0x5478 <__mulsf3_pse+0x84>
    5456:	e1 f0       	breq	.+56     	; 0x5490 <__mulsf3_pse+0x9c>
    5458:	88 23       	and	r24, r24
    545a:	4a f0       	brmi	.+18     	; 0x546e <__mulsf3_pse+0x7a>
    545c:	ee 0f       	add	r30, r30
    545e:	ff 1f       	adc	r31, r31
    5460:	bb 1f       	adc	r27, r27
    5462:	66 1f       	adc	r22, r22
    5464:	77 1f       	adc	r23, r23
    5466:	88 1f       	adc	r24, r24
    5468:	91 50       	subi	r25, 0x01	; 1
    546a:	50 40       	sbci	r21, 0x00	; 0
    546c:	a9 f7       	brne	.-22     	; 0x5458 <__mulsf3_pse+0x64>
    546e:	9e 3f       	cpi	r25, 0xFE	; 254
    5470:	51 05       	cpc	r21, r1
    5472:	70 f0       	brcs	.+28     	; 0x5490 <__mulsf3_pse+0x9c>
    5474:	14 c0       	rjmp	.+40     	; 0x549e <__fp_inf>
    5476:	aa cf       	rjmp	.-172    	; 0x53cc <__fp_szero>
    5478:	5f 3f       	cpi	r21, 0xFF	; 255
    547a:	ec f3       	brlt	.-6      	; 0x5476 <__mulsf3_pse+0x82>
    547c:	98 3e       	cpi	r25, 0xE8	; 232
    547e:	dc f3       	brlt	.-10     	; 0x5476 <__mulsf3_pse+0x82>
    5480:	86 95       	lsr	r24
    5482:	77 95       	ror	r23
    5484:	67 95       	ror	r22
    5486:	b7 95       	ror	r27
    5488:	f7 95       	ror	r31
    548a:	e7 95       	ror	r30
    548c:	9f 5f       	subi	r25, 0xFF	; 255
    548e:	c1 f7       	brne	.-16     	; 0x5480 <__mulsf3_pse+0x8c>
    5490:	fe 2b       	or	r31, r30
    5492:	88 0f       	add	r24, r24
    5494:	91 1d       	adc	r25, r1
    5496:	96 95       	lsr	r25
    5498:	87 95       	ror	r24
    549a:	97 f9       	bld	r25, 7
    549c:	08 95       	ret

0000549e <__fp_inf>:
    549e:	97 f9       	bld	r25, 7
    54a0:	9f 67       	ori	r25, 0x7F	; 127
    54a2:	80 e8       	ldi	r24, 0x80	; 128
    54a4:	70 e0       	ldi	r23, 0x00	; 0
    54a6:	60 e0       	ldi	r22, 0x00	; 0
    54a8:	08 95       	ret

000054aa <__fp_nan>:
    54aa:	9f ef       	ldi	r25, 0xFF	; 255
    54ac:	80 ec       	ldi	r24, 0xC0	; 192
    54ae:	08 95       	ret

000054b0 <__fp_pscA>:
    54b0:	00 24       	eor	r0, r0
    54b2:	0a 94       	dec	r0
    54b4:	16 16       	cp	r1, r22
    54b6:	17 06       	cpc	r1, r23
    54b8:	18 06       	cpc	r1, r24
    54ba:	09 06       	cpc	r0, r25
    54bc:	08 95       	ret

000054be <__fp_pscB>:
    54be:	00 24       	eor	r0, r0
    54c0:	0a 94       	dec	r0
    54c2:	12 16       	cp	r1, r18
    54c4:	13 06       	cpc	r1, r19
    54c6:	14 06       	cpc	r1, r20
    54c8:	05 06       	cpc	r0, r21
    54ca:	08 95       	ret

000054cc <__fp_round>:
    54cc:	09 2e       	mov	r0, r25
    54ce:	03 94       	inc	r0
    54d0:	00 0c       	add	r0, r0
    54d2:	11 f4       	brne	.+4      	; 0x54d8 <__fp_round+0xc>
    54d4:	88 23       	and	r24, r24
    54d6:	52 f0       	brmi	.+20     	; 0x54ec <__fp_round+0x20>
    54d8:	bb 0f       	add	r27, r27
    54da:	40 f4       	brcc	.+16     	; 0x54ec <__fp_round+0x20>
    54dc:	bf 2b       	or	r27, r31
    54de:	11 f4       	brne	.+4      	; 0x54e4 <__fp_round+0x18>
    54e0:	60 ff       	sbrs	r22, 0
    54e2:	04 c0       	rjmp	.+8      	; 0x54ec <__fp_round+0x20>
    54e4:	6f 5f       	subi	r22, 0xFF	; 255
    54e6:	7f 4f       	sbci	r23, 0xFF	; 255
    54e8:	8f 4f       	sbci	r24, 0xFF	; 255
    54ea:	9f 4f       	sbci	r25, 0xFF	; 255
    54ec:	08 95       	ret

000054ee <__udivmodqi4>:
    54ee:	99 1b       	sub	r25, r25
    54f0:	79 e0       	ldi	r23, 0x09	; 9
    54f2:	04 c0       	rjmp	.+8      	; 0x54fc <__udivmodqi4_ep>

000054f4 <__udivmodqi4_loop>:
    54f4:	99 1f       	adc	r25, r25
    54f6:	96 17       	cp	r25, r22
    54f8:	08 f0       	brcs	.+2      	; 0x54fc <__udivmodqi4_ep>
    54fa:	96 1b       	sub	r25, r22

000054fc <__udivmodqi4_ep>:
    54fc:	88 1f       	adc	r24, r24
    54fe:	7a 95       	dec	r23
    5500:	c9 f7       	brne	.-14     	; 0x54f4 <__udivmodqi4_loop>
    5502:	80 95       	com	r24
    5504:	08 95       	ret

00005506 <__divmodhi4>:
    5506:	97 fb       	bst	r25, 7
    5508:	07 2e       	mov	r0, r23
    550a:	16 f4       	brtc	.+4      	; 0x5510 <__divmodhi4+0xa>
    550c:	00 94       	com	r0
    550e:	07 d0       	rcall	.+14     	; 0x551e <__divmodhi4_neg1>
    5510:	77 fd       	sbrc	r23, 7
    5512:	09 d0       	rcall	.+18     	; 0x5526 <__divmodhi4_neg2>
    5514:	0e 94 9d 2a 	call	0x553a	; 0x553a <__udivmodhi4>
    5518:	07 fc       	sbrc	r0, 7
    551a:	05 d0       	rcall	.+10     	; 0x5526 <__divmodhi4_neg2>
    551c:	3e f4       	brtc	.+14     	; 0x552c <__divmodhi4_exit>

0000551e <__divmodhi4_neg1>:
    551e:	90 95       	com	r25
    5520:	81 95       	neg	r24
    5522:	9f 4f       	sbci	r25, 0xFF	; 255
    5524:	08 95       	ret

00005526 <__divmodhi4_neg2>:
    5526:	70 95       	com	r23
    5528:	61 95       	neg	r22
    552a:	7f 4f       	sbci	r23, 0xFF	; 255

0000552c <__divmodhi4_exit>:
    552c:	08 95       	ret

0000552e <__tablejump2__>:
    552e:	ee 0f       	add	r30, r30
    5530:	ff 1f       	adc	r31, r31
    5532:	05 90       	lpm	r0, Z+
    5534:	f4 91       	lpm	r31, Z
    5536:	e0 2d       	mov	r30, r0
    5538:	09 94       	ijmp

0000553a <__udivmodhi4>:
    553a:	aa 1b       	sub	r26, r26
    553c:	bb 1b       	sub	r27, r27
    553e:	51 e1       	ldi	r21, 0x11	; 17
    5540:	07 c0       	rjmp	.+14     	; 0x5550 <__udivmodhi4_ep>

00005542 <__udivmodhi4_loop>:
    5542:	aa 1f       	adc	r26, r26
    5544:	bb 1f       	adc	r27, r27
    5546:	a6 17       	cp	r26, r22
    5548:	b7 07       	cpc	r27, r23
    554a:	10 f0       	brcs	.+4      	; 0x5550 <__udivmodhi4_ep>
    554c:	a6 1b       	sub	r26, r22
    554e:	b7 0b       	sbc	r27, r23

00005550 <__udivmodhi4_ep>:
    5550:	88 1f       	adc	r24, r24
    5552:	99 1f       	adc	r25, r25
    5554:	5a 95       	dec	r21
    5556:	a9 f7       	brne	.-22     	; 0x5542 <__udivmodhi4_loop>
    5558:	80 95       	com	r24
    555a:	90 95       	com	r25
    555c:	bc 01       	movw	r22, r24
    555e:	cd 01       	movw	r24, r26
    5560:	08 95       	ret

00005562 <__eerd_byte_m32u4>:
    5562:	f9 99       	sbic	0x1f, 1	; 31
    5564:	fe cf       	rjmp	.-4      	; 0x5562 <__eerd_byte_m32u4>
    5566:	92 bd       	out	0x22, r25	; 34
    5568:	81 bd       	out	0x21, r24	; 33
    556a:	f8 9a       	sbi	0x1f, 0	; 31
    556c:	99 27       	eor	r25, r25
    556e:	80 b5       	in	r24, 0x20	; 32
    5570:	08 95       	ret

00005572 <__eerd_word_m32u4>:
    5572:	a8 e1       	ldi	r26, 0x18	; 24
    5574:	b0 e0       	ldi	r27, 0x00	; 0
    5576:	42 e0       	ldi	r20, 0x02	; 2
    5578:	50 e0       	ldi	r21, 0x00	; 0
    557a:	0c 94 d4 2a 	jmp	0x55a8	; 0x55a8 <__eerd_blraw_m32u4>

0000557e <__eewr_byte_m32u4>:
    557e:	26 2f       	mov	r18, r22

00005580 <__eewr_r18_m32u4>:
    5580:	f9 99       	sbic	0x1f, 1	; 31
    5582:	fe cf       	rjmp	.-4      	; 0x5580 <__eewr_r18_m32u4>
    5584:	1f ba       	out	0x1f, r1	; 31
    5586:	92 bd       	out	0x22, r25	; 34
    5588:	81 bd       	out	0x21, r24	; 33
    558a:	20 bd       	out	0x20, r18	; 32
    558c:	0f b6       	in	r0, 0x3f	; 63
    558e:	f8 94       	cli
    5590:	fa 9a       	sbi	0x1f, 2	; 31
    5592:	f9 9a       	sbi	0x1f, 1	; 31
    5594:	0f be       	out	0x3f, r0	; 63
    5596:	01 96       	adiw	r24, 0x01	; 1
    5598:	08 95       	ret

0000559a <__eewr_word_m32u4>:
    559a:	0e 94 bf 2a 	call	0x557e	; 0x557e <__eewr_byte_m32u4>
    559e:	27 2f       	mov	r18, r23
    55a0:	0c 94 c0 2a 	jmp	0x5580	; 0x5580 <__eewr_r18_m32u4>

000055a4 <__eerd_block_m32u4>:
    55a4:	dc 01       	movw	r26, r24
    55a6:	cb 01       	movw	r24, r22

000055a8 <__eerd_blraw_m32u4>:
    55a8:	fc 01       	movw	r30, r24
    55aa:	f9 99       	sbic	0x1f, 1	; 31
    55ac:	fe cf       	rjmp	.-4      	; 0x55aa <__eerd_blraw_m32u4+0x2>
    55ae:	06 c0       	rjmp	.+12     	; 0x55bc <__eerd_blraw_m32u4+0x14>
    55b0:	f2 bd       	out	0x22, r31	; 34
    55b2:	e1 bd       	out	0x21, r30	; 33
    55b4:	f8 9a       	sbi	0x1f, 0	; 31
    55b6:	31 96       	adiw	r30, 0x01	; 1
    55b8:	00 b4       	in	r0, 0x20	; 32
    55ba:	0d 92       	st	X+, r0
    55bc:	41 50       	subi	r20, 0x01	; 1
    55be:	50 40       	sbci	r21, 0x00	; 0
    55c0:	b8 f7       	brcc	.-18     	; 0x55b0 <__eerd_blraw_m32u4+0x8>
    55c2:	08 95       	ret

000055c4 <_exit>:
    55c4:	f8 94       	cli

000055c6 <__stop_program>:
    55c6:	ff cf       	rjmp	.-2      	; 0x55c6 <__stop_program>
